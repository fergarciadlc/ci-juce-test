// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AAXValidator_Config.proto

#ifndef PROTOBUF_INCLUDED_AAXValidator_5fConfig_2eproto
#define PROTOBUF_INCLUDED_AAXValidator_5fConfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_AAXValidator_5fConfig_2eproto 

namespace protobuf_AAXValidator_5fConfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[14];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_AAXValidator_5fConfig_2eproto
namespace AAXValConfig {
class Arguments;
class ArgumentsDefaultTypeInternal;
extern ArgumentsDefaultTypeInternal _Arguments_default_instance_;
class Category;
class CategoryDefaultTypeInternal;
extern CategoryDefaultTypeInternal _Category_default_instance_;
class Configuration;
class ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
class Constraints;
class ConstraintsDefaultTypeInternal;
extern ConstraintsDefaultTypeInternal _Constraints_default_instance_;
class Constraints_System;
class Constraints_SystemDefaultTypeInternal;
extern Constraints_SystemDefaultTypeInternal _Constraints_System_default_instance_;
class EnumSInt32Format;
class EnumSInt32FormatDefaultTypeInternal;
extern EnumSInt32FormatDefaultTypeInternal _EnumSInt32Format_default_instance_;
class EnumSInt32Format_ValuePair;
class EnumSInt32Format_ValuePairDefaultTypeInternal;
extern EnumSInt32Format_ValuePairDefaultTypeInternal _EnumSInt32Format_ValuePair_default_instance_;
class ParamFormat;
class ParamFormatDefaultTypeInternal;
extern ParamFormatDefaultTypeInternal _ParamFormat_default_instance_;
class Process;
class ProcessDefaultTypeInternal;
extern ProcessDefaultTypeInternal _Process_default_instance_;
class Process_PlatformProcess;
class Process_PlatformProcessDefaultTypeInternal;
extern Process_PlatformProcessDefaultTypeInternal _Process_PlatformProcess_default_instance_;
class Test;
class TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
class TestCollection;
class TestCollectionDefaultTypeInternal;
extern TestCollectionDefaultTypeInternal _TestCollection_default_instance_;
class TestModule;
class TestModuleDefaultTypeInternal;
extern TestModuleDefaultTypeInternal _TestModule_default_instance_;
class Test_Condition;
class Test_ConditionDefaultTypeInternal;
extern Test_ConditionDefaultTypeInternal _Test_Condition_default_instance_;
}  // namespace AAXValConfig
namespace google {
namespace protobuf {
template<> ::AAXValConfig::Arguments* Arena::CreateMaybeMessage<::AAXValConfig::Arguments>(Arena*);
template<> ::AAXValConfig::Category* Arena::CreateMaybeMessage<::AAXValConfig::Category>(Arena*);
template<> ::AAXValConfig::Configuration* Arena::CreateMaybeMessage<::AAXValConfig::Configuration>(Arena*);
template<> ::AAXValConfig::Constraints* Arena::CreateMaybeMessage<::AAXValConfig::Constraints>(Arena*);
template<> ::AAXValConfig::Constraints_System* Arena::CreateMaybeMessage<::AAXValConfig::Constraints_System>(Arena*);
template<> ::AAXValConfig::EnumSInt32Format* Arena::CreateMaybeMessage<::AAXValConfig::EnumSInt32Format>(Arena*);
template<> ::AAXValConfig::EnumSInt32Format_ValuePair* Arena::CreateMaybeMessage<::AAXValConfig::EnumSInt32Format_ValuePair>(Arena*);
template<> ::AAXValConfig::ParamFormat* Arena::CreateMaybeMessage<::AAXValConfig::ParamFormat>(Arena*);
template<> ::AAXValConfig::Process* Arena::CreateMaybeMessage<::AAXValConfig::Process>(Arena*);
template<> ::AAXValConfig::Process_PlatformProcess* Arena::CreateMaybeMessage<::AAXValConfig::Process_PlatformProcess>(Arena*);
template<> ::AAXValConfig::Test* Arena::CreateMaybeMessage<::AAXValConfig::Test>(Arena*);
template<> ::AAXValConfig::TestCollection* Arena::CreateMaybeMessage<::AAXValConfig::TestCollection>(Arena*);
template<> ::AAXValConfig::TestModule* Arena::CreateMaybeMessage<::AAXValConfig::TestModule>(Arena*);
template<> ::AAXValConfig::Test_Condition* Arena::CreateMaybeMessage<::AAXValConfig::Test_Condition>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace AAXValConfig {

enum Test_Condition_EConditionType {
  Test_Condition_EConditionType_E_CONDITIONTYPE_UNKNOWN = 0,
  Test_Condition_EConditionType_E_CONDITIONTYPE_PASS = 1,
  Test_Condition_EConditionType_E_CONDITIONTYPE_FAIL = 2,
  Test_Condition_EConditionType_E_CONDITIONTYPE_WARN = 3
};
bool Test_Condition_EConditionType_IsValid(int value);
const Test_Condition_EConditionType Test_Condition_EConditionType_EConditionType_MIN = Test_Condition_EConditionType_E_CONDITIONTYPE_UNKNOWN;
const Test_Condition_EConditionType Test_Condition_EConditionType_EConditionType_MAX = Test_Condition_EConditionType_E_CONDITIONTYPE_WARN;
const int Test_Condition_EConditionType_EConditionType_ARRAYSIZE = Test_Condition_EConditionType_EConditionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Test_Condition_EConditionType_descriptor();
inline const ::std::string& Test_Condition_EConditionType_Name(Test_Condition_EConditionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Test_Condition_EConditionType_descriptor(), value);
}
inline bool Test_Condition_EConditionType_Parse(
    const ::std::string& name, Test_Condition_EConditionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Test_Condition_EConditionType>(
    Test_Condition_EConditionType_descriptor(), name, value);
}
enum Process_PlatformProcess_EPlatform {
  Process_PlatformProcess_EPlatform_E_PLATFORM_UNKNOWN = 0,
  Process_PlatformProcess_EPlatform_E_PLATFORM_OSX = 1,
  Process_PlatformProcess_EPlatform_E_PLATFORM_WIN = 2
};
bool Process_PlatformProcess_EPlatform_IsValid(int value);
const Process_PlatformProcess_EPlatform Process_PlatformProcess_EPlatform_EPlatform_MIN = Process_PlatformProcess_EPlatform_E_PLATFORM_UNKNOWN;
const Process_PlatformProcess_EPlatform Process_PlatformProcess_EPlatform_EPlatform_MAX = Process_PlatformProcess_EPlatform_E_PLATFORM_WIN;
const int Process_PlatformProcess_EPlatform_EPlatform_ARRAYSIZE = Process_PlatformProcess_EPlatform_EPlatform_MAX + 1;

const ::google::protobuf::EnumDescriptor* Process_PlatformProcess_EPlatform_descriptor();
inline const ::std::string& Process_PlatformProcess_EPlatform_Name(Process_PlatformProcess_EPlatform value) {
  return ::google::protobuf::internal::NameOfEnum(
    Process_PlatformProcess_EPlatform_descriptor(), value);
}
inline bool Process_PlatformProcess_EPlatform_Parse(
    const ::std::string& name, Process_PlatformProcess_EPlatform* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Process_PlatformProcess_EPlatform>(
    Process_PlatformProcess_EPlatform_descriptor(), name, value);
}
enum ParamFormat_EValueType {
  ParamFormat_EValueType_E_VALUETYPE_UNKNOWN = 0,
  ParamFormat_EValueType_E_SINT32 = 1,
  ParamFormat_EValueType_E_UINT32 = 2,
  ParamFormat_EValueType_E_FLOAT = 3,
  ParamFormat_EValueType_E_DOUBLE = 4,
  ParamFormat_EValueType_E_STRING = 5,
  ParamFormat_EValueType_E_ENUM_SINT32 = 6,
  ParamFormat_EValueType_E_RAW = 15
};
bool ParamFormat_EValueType_IsValid(int value);
const ParamFormat_EValueType ParamFormat_EValueType_EValueType_MIN = ParamFormat_EValueType_E_VALUETYPE_UNKNOWN;
const ParamFormat_EValueType ParamFormat_EValueType_EValueType_MAX = ParamFormat_EValueType_E_RAW;
const int ParamFormat_EValueType_EValueType_ARRAYSIZE = ParamFormat_EValueType_EValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamFormat_EValueType_descriptor();
inline const ::std::string& ParamFormat_EValueType_Name(ParamFormat_EValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamFormat_EValueType_descriptor(), value);
}
inline bool ParamFormat_EValueType_Parse(
    const ::std::string& name, ParamFormat_EValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamFormat_EValueType>(
    ParamFormat_EValueType_descriptor(), name, value);
}
enum ParamFormat_EDisplayLevel {
  ParamFormat_EDisplayLevel_E_DISPLAYLEVEL_UNKNOWN = 0,
  ParamFormat_EDisplayLevel_E_DEBUG = 2,
  ParamFormat_EDisplayLevel_E_VERBOSE = 4,
  ParamFormat_EDisplayLevel_E_NORMAL = 8,
  ParamFormat_EDisplayLevel_E_ALWAYS = 12
};
bool ParamFormat_EDisplayLevel_IsValid(int value);
const ParamFormat_EDisplayLevel ParamFormat_EDisplayLevel_EDisplayLevel_MIN = ParamFormat_EDisplayLevel_E_DISPLAYLEVEL_UNKNOWN;
const ParamFormat_EDisplayLevel ParamFormat_EDisplayLevel_EDisplayLevel_MAX = ParamFormat_EDisplayLevel_E_ALWAYS;
const int ParamFormat_EDisplayLevel_EDisplayLevel_ARRAYSIZE = ParamFormat_EDisplayLevel_EDisplayLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParamFormat_EDisplayLevel_descriptor();
inline const ::std::string& ParamFormat_EDisplayLevel_Name(ParamFormat_EDisplayLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParamFormat_EDisplayLevel_descriptor(), value);
}
inline bool ParamFormat_EDisplayLevel_Parse(
    const ::std::string& name, ParamFormat_EDisplayLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParamFormat_EDisplayLevel>(
    ParamFormat_EDisplayLevel_descriptor(), name, value);
}
enum Constraints_System_EType {
  Constraints_System_EType_E_TYPE_UNKNOWN = 0,
  Constraints_System_EType_E_NATIVE = 1,
  Constraints_System_EType_E_HDX = 2,
  Constraints_System_EType_E_S3L = 3
};
bool Constraints_System_EType_IsValid(int value);
const Constraints_System_EType Constraints_System_EType_EType_MIN = Constraints_System_EType_E_TYPE_UNKNOWN;
const Constraints_System_EType Constraints_System_EType_EType_MAX = Constraints_System_EType_E_S3L;
const int Constraints_System_EType_EType_ARRAYSIZE = Constraints_System_EType_EType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Constraints_System_EType_descriptor();
inline const ::std::string& Constraints_System_EType_Name(Constraints_System_EType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Constraints_System_EType_descriptor(), value);
}
inline bool Constraints_System_EType_Parse(
    const ::std::string& name, Constraints_System_EType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Constraints_System_EType>(
    Constraints_System_EType_descriptor(), name, value);
}
// ===================================================================

class Configuration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.Configuration) */ {
 public:
  Configuration();
  virtual ~Configuration();

  Configuration(const Configuration& from);

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(Configuration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Configuration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Configuration* other);
  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Configuration* New() const final {
    return CreateMaybeMessage<Configuration>(NULL);
  }

  Configuration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AAXValConfig.Category category = 1;
  int category_size() const;
  void clear_category();
  static const int kCategoryFieldNumber = 1;
  ::AAXValConfig::Category* mutable_category(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Category >*
      mutable_category();
  const ::AAXValConfig::Category& category(int index) const;
  ::AAXValConfig::Category* add_category();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Category >&
      category() const;

  // repeated .AAXValConfig.TestCollection collection = 2;
  int collection_size() const;
  void clear_collection();
  static const int kCollectionFieldNumber = 2;
  ::AAXValConfig::TestCollection* mutable_collection(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::TestCollection >*
      mutable_collection();
  const ::AAXValConfig::TestCollection& collection(int index) const;
  ::AAXValConfig::TestCollection* add_collection();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::TestCollection >&
      collection() const;

  // repeated .AAXValConfig.TestModule module = 3;
  int module_size() const;
  void clear_module();
  static const int kModuleFieldNumber = 3;
  ::AAXValConfig::TestModule* mutable_module(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::TestModule >*
      mutable_module();
  const ::AAXValConfig::TestModule& module(int index) const;
  ::AAXValConfig::TestModule* add_module();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::TestModule >&
      module() const;

  // repeated .AAXValConfig.Test test = 4;
  int test_size() const;
  void clear_test();
  static const int kTestFieldNumber = 4;
  ::AAXValConfig::Test* mutable_test(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Test >*
      mutable_test();
  const ::AAXValConfig::Test& test(int index) const;
  ::AAXValConfig::Test* add_test();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Test >&
      test() const;

  // repeated .AAXValConfig.Process process = 5;
  int process_size() const;
  void clear_process();
  static const int kProcessFieldNumber = 5;
  ::AAXValConfig::Process* mutable_process(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Process >*
      mutable_process();
  const ::AAXValConfig::Process& process(int index) const;
  ::AAXValConfig::Process* add_process();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Process >&
      process() const;

  // repeated .AAXValConfig.ParamFormat param_format = 6;
  int param_format_size() const;
  void clear_param_format();
  static const int kParamFormatFieldNumber = 6;
  ::AAXValConfig::ParamFormat* mutable_param_format(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::ParamFormat >*
      mutable_param_format();
  const ::AAXValConfig::ParamFormat& param_format(int index) const;
  ::AAXValConfig::ParamFormat* add_param_format();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::ParamFormat >&
      param_format() const;

  // repeated .AAXValConfig.EnumSInt32Format enum_sint32_format = 7;
  int enum_sint32_format_size() const;
  void clear_enum_sint32_format();
  static const int kEnumSint32FormatFieldNumber = 7;
  ::AAXValConfig::EnumSInt32Format* mutable_enum_sint32_format(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::EnumSInt32Format >*
      mutable_enum_sint32_format();
  const ::AAXValConfig::EnumSInt32Format& enum_sint32_format(int index) const;
  ::AAXValConfig::EnumSInt32Format* add_enum_sint32_format();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::EnumSInt32Format >&
      enum_sint32_format() const;

  // repeated .AAXValConfig.Constraints constraints = 8;
  int constraints_size() const;
  void clear_constraints();
  static const int kConstraintsFieldNumber = 8;
  ::AAXValConfig::Constraints* mutable_constraints(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Constraints >*
      mutable_constraints();
  const ::AAXValConfig::Constraints& constraints(int index) const;
  ::AAXValConfig::Constraints* add_constraints();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Constraints >&
      constraints() const;

  // @@protoc_insertion_point(class_scope:AAXValConfig.Configuration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Category > category_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::TestCollection > collection_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::TestModule > module_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Test > test_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Process > process_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::ParamFormat > param_format_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::EnumSInt32Format > enum_sint32_format_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Constraints > constraints_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Category : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.Category) */ {
 public:
  Category();
  virtual ~Category();

  Category(const Category& from);

  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Category(Category&& from) noexcept
    : Category() {
    *this = ::std::move(from);
  }

  inline Category& operator=(Category&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Category& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Category* internal_default_instance() {
    return reinterpret_cast<const Category*>(
               &_Category_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Category* other);
  friend void swap(Category& a, Category& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Category* New() const final {
    return CreateMaybeMessage<Category>(NULL);
  }

  Category* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Category>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Category* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 2;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name(int index, ::std::string&& value);
  #endif
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  #if LANG_CXX11
  void add_name(::std::string&& value);
  #endif
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // repeated string description = 3;
  int description_size() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description(int index) const;
  ::std::string* mutable_description(int index);
  void set_description(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_description(int index, ::std::string&& value);
  #endif
  void set_description(int index, const char* value);
  void set_description(int index, const char* value, size_t size);
  ::std::string* add_description();
  void add_description(const ::std::string& value);
  #if LANG_CXX11
  void add_description(::std::string&& value);
  #endif
  void add_description(const char* value);
  void add_description(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& description() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_description();

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .AAXValConfig.Constraints constraints = 13;
  bool has_constraints() const;
  void clear_constraints();
  static const int kConstraintsFieldNumber = 13;
  private:
  const ::AAXValConfig::Constraints& _internal_constraints() const;
  public:
  const ::AAXValConfig::Constraints& constraints() const;
  ::AAXValConfig::Constraints* release_constraints();
  ::AAXValConfig::Constraints* mutable_constraints();
  void set_allocated_constraints(::AAXValConfig::Constraints* constraints);

  // @@protoc_insertion_point(class_scope:AAXValConfig.Category)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_constraints();
  void clear_has_constraints();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> description_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::AAXValConfig::Constraints* constraints_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.TestCollection) */ {
 public:
  TestCollection();
  virtual ~TestCollection();

  TestCollection(const TestCollection& from);

  inline TestCollection& operator=(const TestCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestCollection(TestCollection&& from) noexcept
    : TestCollection() {
    *this = ::std::move(from);
  }

  inline TestCollection& operator=(TestCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestCollection* internal_default_instance() {
    return reinterpret_cast<const TestCollection*>(
               &_TestCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TestCollection* other);
  friend void swap(TestCollection& a, TestCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestCollection* New() const final {
    return CreateMaybeMessage<TestCollection>(NULL);
  }

  TestCollection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestCollection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestCollection& from);
  void MergeFrom(const TestCollection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 2;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name(int index, ::std::string&& value);
  #endif
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  #if LANG_CXX11
  void add_name(::std::string&& value);
  #endif
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // repeated string description = 3;
  int description_size() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description(int index) const;
  ::std::string* mutable_description(int index);
  void set_description(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_description(int index, ::std::string&& value);
  #endif
  void set_description(int index, const char* value);
  void set_description(int index, const char* value, size_t size);
  ::std::string* add_description();
  void add_description(const ::std::string& value);
  #if LANG_CXX11
  void add_description(::std::string&& value);
  #endif
  void add_description(const char* value);
  void add_description(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& description() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_description();

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:AAXValConfig.TestCollection)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> description_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TestModule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.TestModule) */ {
 public:
  TestModule();
  virtual ~TestModule();

  TestModule(const TestModule& from);

  inline TestModule& operator=(const TestModule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TestModule(TestModule&& from) noexcept
    : TestModule() {
    *this = ::std::move(from);
  }

  inline TestModule& operator=(TestModule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestModule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestModule* internal_default_instance() {
    return reinterpret_cast<const TestModule*>(
               &_TestModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TestModule* other);
  friend void swap(TestModule& a, TestModule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TestModule* New() const final {
    return CreateMaybeMessage<TestModule>(NULL);
  }

  TestModule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TestModule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TestModule& from);
  void MergeFrom(const TestModule& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestModule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 2;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name(int index, ::std::string&& value);
  #endif
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  #if LANG_CXX11
  void add_name(::std::string&& value);
  #endif
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // repeated string description = 3;
  int description_size() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description(int index) const;
  ::std::string* mutable_description(int index);
  void set_description(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_description(int index, ::std::string&& value);
  #endif
  void set_description(int index, const char* value);
  void set_description(int index, const char* value, size_t size);
  ::std::string* add_description();
  void add_description(const ::std::string& value);
  #if LANG_CXX11
  void add_description(::std::string&& value);
  #endif
  void add_description(const char* value);
  void add_description(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& description() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_description();

  // repeated string collection_id = 11;
  int collection_id_size() const;
  void clear_collection_id();
  static const int kCollectionIdFieldNumber = 11;
  const ::std::string& collection_id(int index) const;
  ::std::string* mutable_collection_id(int index);
  void set_collection_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_collection_id(int index, ::std::string&& value);
  #endif
  void set_collection_id(int index, const char* value);
  void set_collection_id(int index, const char* value, size_t size);
  ::std::string* add_collection_id();
  void add_collection_id(const ::std::string& value);
  #if LANG_CXX11
  void add_collection_id(::std::string&& value);
  #endif
  void add_collection_id(const char* value);
  void add_collection_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& collection_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_collection_id();

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:AAXValConfig.TestModule)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> description_;
  ::google::protobuf::RepeatedPtrField< ::std::string> collection_id_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Test_Condition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.Test.Condition) */ {
 public:
  Test_Condition();
  virtual ~Test_Condition();

  Test_Condition(const Test_Condition& from);

  inline Test_Condition& operator=(const Test_Condition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test_Condition(Test_Condition&& from) noexcept
    : Test_Condition() {
    *this = ::std::move(from);
  }

  inline Test_Condition& operator=(Test_Condition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test_Condition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test_Condition* internal_default_instance() {
    return reinterpret_cast<const Test_Condition*>(
               &_Test_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Test_Condition* other);
  friend void swap(Test_Condition& a, Test_Condition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test_Condition* New() const final {
    return CreateMaybeMessage<Test_Condition>(NULL);
  }

  Test_Condition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Test_Condition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Test_Condition& from);
  void MergeFrom(const Test_Condition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test_Condition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Test_Condition_EConditionType EConditionType;
  static const EConditionType E_CONDITIONTYPE_UNKNOWN =
    Test_Condition_EConditionType_E_CONDITIONTYPE_UNKNOWN;
  static const EConditionType E_CONDITIONTYPE_PASS =
    Test_Condition_EConditionType_E_CONDITIONTYPE_PASS;
  static const EConditionType E_CONDITIONTYPE_FAIL =
    Test_Condition_EConditionType_E_CONDITIONTYPE_FAIL;
  static const EConditionType E_CONDITIONTYPE_WARN =
    Test_Condition_EConditionType_E_CONDITIONTYPE_WARN;
  static inline bool EConditionType_IsValid(int value) {
    return Test_Condition_EConditionType_IsValid(value);
  }
  static const EConditionType EConditionType_MIN =
    Test_Condition_EConditionType_EConditionType_MIN;
  static const EConditionType EConditionType_MAX =
    Test_Condition_EConditionType_EConditionType_MAX;
  static const int EConditionType_ARRAYSIZE =
    Test_Condition_EConditionType_EConditionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EConditionType_descriptor() {
    return Test_Condition_EConditionType_descriptor();
  }
  static inline const ::std::string& EConditionType_Name(EConditionType value) {
    return Test_Condition_EConditionType_Name(value);
  }
  static inline bool EConditionType_Parse(const ::std::string& name,
      EConditionType* value) {
    return Test_Condition_EConditionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional .AAXValConfig.Test.Condition.EConditionType type = 2 [default = E_CONDITIONTYPE_UNKNOWN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::AAXValConfig::Test_Condition_EConditionType type() const;
  void set_type(::AAXValConfig::Test_Condition_EConditionType value);

  // @@protoc_insertion_point(class_scope:AAXValConfig.Test.Condition)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_description();
  void clear_has_description();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  int type_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.Test) */ {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Test(Test&& from) noexcept
    : Test() {
    *this = ::std::move(from);
  }

  inline Test& operator=(Test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Test* other);
  friend void swap(Test& a, Test& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Test* New() const final {
    return CreateMaybeMessage<Test>(NULL);
  }

  Test* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Test>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Test_Condition Condition;

  // accessors -------------------------------------------------------

  // repeated string name = 2;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name(int index, ::std::string&& value);
  #endif
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  #if LANG_CXX11
  void add_name(::std::string&& value);
  #endif
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // repeated string description = 3;
  int description_size() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description(int index) const;
  ::std::string* mutable_description(int index);
  void set_description(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_description(int index, ::std::string&& value);
  #endif
  void set_description(int index, const char* value);
  void set_description(int index, const char* value, size_t size);
  ::std::string* add_description();
  void add_description(const ::std::string& value);
  #if LANG_CXX11
  void add_description(::std::string&& value);
  #endif
  void add_description(const char* value);
  void add_description(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& description() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_description();

  // repeated string module_id = 4;
  int module_id_size() const;
  void clear_module_id();
  static const int kModuleIdFieldNumber = 4;
  const ::std::string& module_id(int index) const;
  ::std::string* mutable_module_id(int index);
  void set_module_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_module_id(int index, ::std::string&& value);
  #endif
  void set_module_id(int index, const char* value);
  void set_module_id(int index, const char* value, size_t size);
  ::std::string* add_module_id();
  void add_module_id(const ::std::string& value);
  #if LANG_CXX11
  void add_module_id(::std::string&& value);
  #endif
  void add_module_id(const char* value);
  void add_module_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& module_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_module_id();

  // repeated string category_id = 5;
  int category_id_size() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 5;
  const ::std::string& category_id(int index) const;
  ::std::string* mutable_category_id(int index);
  void set_category_id(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_category_id(int index, ::std::string&& value);
  #endif
  void set_category_id(int index, const char* value);
  void set_category_id(int index, const char* value, size_t size);
  ::std::string* add_category_id();
  void add_category_id(const ::std::string& value);
  #if LANG_CXX11
  void add_category_id(::std::string&& value);
  #endif
  void add_category_id(const char* value);
  void add_category_id(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& category_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_category_id();

  // repeated .AAXValConfig.Test.Condition condition = 6;
  int condition_size() const;
  void clear_condition();
  static const int kConditionFieldNumber = 6;
  ::AAXValConfig::Test_Condition* mutable_condition(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Test_Condition >*
      mutable_condition();
  const ::AAXValConfig::Test_Condition& condition(int index) const;
  ::AAXValConfig::Test_Condition* add_condition();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Test_Condition >&
      condition() const;

  // repeated .AAXValConfig.ParamFormat param_format = 13;
  int param_format_size() const;
  void clear_param_format();
  static const int kParamFormatFieldNumber = 13;
  ::AAXValConfig::ParamFormat* mutable_param_format(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::ParamFormat >*
      mutable_param_format();
  const ::AAXValConfig::ParamFormat& param_format(int index) const;
  ::AAXValConfig::ParamFormat* add_param_format();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::ParamFormat >&
      param_format() const;

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string process_id = 8;
  bool has_process_id() const;
  void clear_process_id();
  static const int kProcessIdFieldNumber = 8;
  const ::std::string& process_id() const;
  void set_process_id(const ::std::string& value);
  #if LANG_CXX11
  void set_process_id(::std::string&& value);
  #endif
  void set_process_id(const char* value);
  void set_process_id(const char* value, size_t size);
  ::std::string* mutable_process_id();
  ::std::string* release_process_id();
  void set_allocated_process_id(::std::string* process_id);

  // optional string version = 20;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 20;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional .AAXValConfig.Arguments arguments = 9;
  bool has_arguments() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 9;
  private:
  const ::AAXValConfig::Arguments& _internal_arguments() const;
  public:
  const ::AAXValConfig::Arguments& arguments() const;
  ::AAXValConfig::Arguments* release_arguments();
  ::AAXValConfig::Arguments* mutable_arguments();
  void set_allocated_arguments(::AAXValConfig::Arguments* arguments);

  // optional .AAXValConfig.Constraints constraints = 14;
  bool has_constraints() const;
  void clear_constraints();
  static const int kConstraintsFieldNumber = 14;
  private:
  const ::AAXValConfig::Constraints& _internal_constraints() const;
  public:
  const ::AAXValConfig::Constraints& constraints() const;
  ::AAXValConfig::Constraints* release_constraints();
  ::AAXValConfig::Constraints* mutable_constraints();
  void set_allocated_constraints(::AAXValConfig::Constraints* constraints);

  // optional sint32 build = 21;
  bool has_build() const;
  void clear_build();
  static const int kBuildFieldNumber = 21;
  ::google::protobuf::int32 build() const;
  void set_build(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AAXValConfig.Test)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_process_id();
  void clear_has_process_id();
  void set_has_arguments();
  void clear_has_arguments();
  void set_has_constraints();
  void clear_has_constraints();
  void set_has_version();
  void clear_has_version();
  void set_has_build();
  void clear_has_build();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> description_;
  ::google::protobuf::RepeatedPtrField< ::std::string> module_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> category_id_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Test_Condition > condition_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::ParamFormat > param_format_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr process_id_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::AAXValConfig::Arguments* arguments_;
  ::AAXValConfig::Constraints* constraints_;
  ::google::protobuf::int32 build_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Process_PlatformProcess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.Process.PlatformProcess) */ {
 public:
  Process_PlatformProcess();
  virtual ~Process_PlatformProcess();

  Process_PlatformProcess(const Process_PlatformProcess& from);

  inline Process_PlatformProcess& operator=(const Process_PlatformProcess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Process_PlatformProcess(Process_PlatformProcess&& from) noexcept
    : Process_PlatformProcess() {
    *this = ::std::move(from);
  }

  inline Process_PlatformProcess& operator=(Process_PlatformProcess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Process_PlatformProcess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Process_PlatformProcess* internal_default_instance() {
    return reinterpret_cast<const Process_PlatformProcess*>(
               &_Process_PlatformProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Process_PlatformProcess* other);
  friend void swap(Process_PlatformProcess& a, Process_PlatformProcess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Process_PlatformProcess* New() const final {
    return CreateMaybeMessage<Process_PlatformProcess>(NULL);
  }

  Process_PlatformProcess* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Process_PlatformProcess>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Process_PlatformProcess& from);
  void MergeFrom(const Process_PlatformProcess& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Process_PlatformProcess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Process_PlatformProcess_EPlatform EPlatform;
  static const EPlatform E_PLATFORM_UNKNOWN =
    Process_PlatformProcess_EPlatform_E_PLATFORM_UNKNOWN;
  static const EPlatform E_PLATFORM_OSX =
    Process_PlatformProcess_EPlatform_E_PLATFORM_OSX;
  static const EPlatform E_PLATFORM_WIN =
    Process_PlatformProcess_EPlatform_E_PLATFORM_WIN;
  static inline bool EPlatform_IsValid(int value) {
    return Process_PlatformProcess_EPlatform_IsValid(value);
  }
  static const EPlatform EPlatform_MIN =
    Process_PlatformProcess_EPlatform_EPlatform_MIN;
  static const EPlatform EPlatform_MAX =
    Process_PlatformProcess_EPlatform_EPlatform_MAX;
  static const int EPlatform_ARRAYSIZE =
    Process_PlatformProcess_EPlatform_EPlatform_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EPlatform_descriptor() {
    return Process_PlatformProcess_EPlatform_descriptor();
  }
  static inline const ::std::string& EPlatform_Name(EPlatform value) {
    return Process_PlatformProcess_EPlatform_Name(value);
  }
  static inline bool EPlatform_Parse(const ::std::string& name,
      EPlatform* value) {
    return Process_PlatformProcess_EPlatform_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string invocation = 3;
  bool has_invocation() const;
  void clear_invocation();
  static const int kInvocationFieldNumber = 3;
  const ::std::string& invocation() const;
  void set_invocation(const ::std::string& value);
  #if LANG_CXX11
  void set_invocation(::std::string&& value);
  #endif
  void set_invocation(const char* value);
  void set_invocation(const char* value, size_t size);
  ::std::string* mutable_invocation();
  ::std::string* release_invocation();
  void set_allocated_invocation(::std::string* invocation);

  // optional .AAXValConfig.Arguments arguments = 4;
  bool has_arguments() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 4;
  private:
  const ::AAXValConfig::Arguments& _internal_arguments() const;
  public:
  const ::AAXValConfig::Arguments& arguments() const;
  ::AAXValConfig::Arguments* release_arguments();
  ::AAXValConfig::Arguments* mutable_arguments();
  void set_allocated_arguments(::AAXValConfig::Arguments* arguments);

  // optional .AAXValConfig.Process.PlatformProcess.EPlatform platform = 2 [default = E_PLATFORM_UNKNOWN];
  bool has_platform() const;
  void clear_platform();
  static const int kPlatformFieldNumber = 2;
  ::AAXValConfig::Process_PlatformProcess_EPlatform platform() const;
  void set_platform(::AAXValConfig::Process_PlatformProcess_EPlatform value);

  // @@protoc_insertion_point(class_scope:AAXValConfig.Process.PlatformProcess)
 private:
  void set_has_platform();
  void clear_has_platform();
  void set_has_invocation();
  void clear_has_invocation();
  void set_has_arguments();
  void clear_has_arguments();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr invocation_;
  ::AAXValConfig::Arguments* arguments_;
  int platform_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Process : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.Process) */ {
 public:
  Process();
  virtual ~Process();

  Process(const Process& from);

  inline Process& operator=(const Process& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Process(Process&& from) noexcept
    : Process() {
    *this = ::std::move(from);
  }

  inline Process& operator=(Process&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Process& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Process* internal_default_instance() {
    return reinterpret_cast<const Process*>(
               &_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Process* other);
  friend void swap(Process& a, Process& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Process* New() const final {
    return CreateMaybeMessage<Process>(NULL);
  }

  Process* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Process>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Process& from);
  void MergeFrom(const Process& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Process* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Process_PlatformProcess PlatformProcess;

  // accessors -------------------------------------------------------

  // repeated string name = 2;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name(int index, ::std::string&& value);
  #endif
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  #if LANG_CXX11
  void add_name(::std::string&& value);
  #endif
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // repeated string description = 3;
  int description_size() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description(int index) const;
  ::std::string* mutable_description(int index);
  void set_description(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_description(int index, ::std::string&& value);
  #endif
  void set_description(int index, const char* value);
  void set_description(int index, const char* value, size_t size);
  ::std::string* add_description();
  void add_description(const ::std::string& value);
  #if LANG_CXX11
  void add_description(::std::string&& value);
  #endif
  void add_description(const char* value);
  void add_description(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& description() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_description();

  // repeated .AAXValConfig.Process.PlatformProcess platform_process = 4;
  int platform_process_size() const;
  void clear_platform_process();
  static const int kPlatformProcessFieldNumber = 4;
  ::AAXValConfig::Process_PlatformProcess* mutable_platform_process(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Process_PlatformProcess >*
      mutable_platform_process();
  const ::AAXValConfig::Process_PlatformProcess& platform_process(int index) const;
  ::AAXValConfig::Process_PlatformProcess* add_platform_process();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Process_PlatformProcess >&
      platform_process() const;

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .AAXValConfig.Arguments arguments = 5;
  bool has_arguments() const;
  void clear_arguments();
  static const int kArgumentsFieldNumber = 5;
  private:
  const ::AAXValConfig::Arguments& _internal_arguments() const;
  public:
  const ::AAXValConfig::Arguments& arguments() const;
  ::AAXValConfig::Arguments* release_arguments();
  ::AAXValConfig::Arguments* mutable_arguments();
  void set_allocated_arguments(::AAXValConfig::Arguments* arguments);

  // @@protoc_insertion_point(class_scope:AAXValConfig.Process)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_arguments();
  void clear_has_arguments();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> description_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Process_PlatformProcess > platform_process_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::AAXValConfig::Arguments* arguments_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParamFormat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.ParamFormat) */ {
 public:
  ParamFormat();
  virtual ~ParamFormat();

  ParamFormat(const ParamFormat& from);

  inline ParamFormat& operator=(const ParamFormat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParamFormat(ParamFormat&& from) noexcept
    : ParamFormat() {
    *this = ::std::move(from);
  }

  inline ParamFormat& operator=(ParamFormat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParamFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParamFormat* internal_default_instance() {
    return reinterpret_cast<const ParamFormat*>(
               &_ParamFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ParamFormat* other);
  friend void swap(ParamFormat& a, ParamFormat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParamFormat* New() const final {
    return CreateMaybeMessage<ParamFormat>(NULL);
  }

  ParamFormat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParamFormat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParamFormat& from);
  void MergeFrom(const ParamFormat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamFormat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ParamFormat_EValueType EValueType;
  static const EValueType E_VALUETYPE_UNKNOWN =
    ParamFormat_EValueType_E_VALUETYPE_UNKNOWN;
  static const EValueType E_SINT32 =
    ParamFormat_EValueType_E_SINT32;
  static const EValueType E_UINT32 =
    ParamFormat_EValueType_E_UINT32;
  static const EValueType E_FLOAT =
    ParamFormat_EValueType_E_FLOAT;
  static const EValueType E_DOUBLE =
    ParamFormat_EValueType_E_DOUBLE;
  static const EValueType E_STRING =
    ParamFormat_EValueType_E_STRING;
  static const EValueType E_ENUM_SINT32 =
    ParamFormat_EValueType_E_ENUM_SINT32;
  static const EValueType E_RAW =
    ParamFormat_EValueType_E_RAW;
  static inline bool EValueType_IsValid(int value) {
    return ParamFormat_EValueType_IsValid(value);
  }
  static const EValueType EValueType_MIN =
    ParamFormat_EValueType_EValueType_MIN;
  static const EValueType EValueType_MAX =
    ParamFormat_EValueType_EValueType_MAX;
  static const int EValueType_ARRAYSIZE =
    ParamFormat_EValueType_EValueType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EValueType_descriptor() {
    return ParamFormat_EValueType_descriptor();
  }
  static inline const ::std::string& EValueType_Name(EValueType value) {
    return ParamFormat_EValueType_Name(value);
  }
  static inline bool EValueType_Parse(const ::std::string& name,
      EValueType* value) {
    return ParamFormat_EValueType_Parse(name, value);
  }

  typedef ParamFormat_EDisplayLevel EDisplayLevel;
  static const EDisplayLevel E_DISPLAYLEVEL_UNKNOWN =
    ParamFormat_EDisplayLevel_E_DISPLAYLEVEL_UNKNOWN;
  static const EDisplayLevel E_DEBUG =
    ParamFormat_EDisplayLevel_E_DEBUG;
  static const EDisplayLevel E_VERBOSE =
    ParamFormat_EDisplayLevel_E_VERBOSE;
  static const EDisplayLevel E_NORMAL =
    ParamFormat_EDisplayLevel_E_NORMAL;
  static const EDisplayLevel E_ALWAYS =
    ParamFormat_EDisplayLevel_E_ALWAYS;
  static inline bool EDisplayLevel_IsValid(int value) {
    return ParamFormat_EDisplayLevel_IsValid(value);
  }
  static const EDisplayLevel EDisplayLevel_MIN =
    ParamFormat_EDisplayLevel_EDisplayLevel_MIN;
  static const EDisplayLevel EDisplayLevel_MAX =
    ParamFormat_EDisplayLevel_EDisplayLevel_MAX;
  static const int EDisplayLevel_ARRAYSIZE =
    ParamFormat_EDisplayLevel_EDisplayLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EDisplayLevel_descriptor() {
    return ParamFormat_EDisplayLevel_descriptor();
  }
  static inline const ::std::string& EDisplayLevel_Name(EDisplayLevel value) {
    return ParamFormat_EDisplayLevel_Name(value);
  }
  static inline bool EDisplayLevel_Parse(const ::std::string& name,
      EDisplayLevel* value) {
    return ParamFormat_EDisplayLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string name = 2;
  int name_size() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name(int index) const;
  ::std::string* mutable_name(int index);
  void set_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_name(int index, ::std::string&& value);
  #endif
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  ::std::string* add_name();
  void add_name(const ::std::string& value);
  #if LANG_CXX11
  void add_name(::std::string&& value);
  #endif
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // repeated string description = 3;
  int description_size() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description(int index) const;
  ::std::string* mutable_description(int index);
  void set_description(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_description(int index, ::std::string&& value);
  #endif
  void set_description(int index, const char* value);
  void set_description(int index, const char* value, size_t size);
  ::std::string* add_description();
  void add_description(const ::std::string& value);
  #if LANG_CXX11
  void add_description(::std::string&& value);
  #endif
  void add_description(const char* value);
  void add_description(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& description() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_description();

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string units = 9 [default = ""];
  bool has_units() const;
  void clear_units();
  static const int kUnitsFieldNumber = 9;
  const ::std::string& units() const;
  void set_units(const ::std::string& value);
  #if LANG_CXX11
  void set_units(::std::string&& value);
  #endif
  void set_units(const char* value);
  void set_units(const char* value, size_t size);
  ::std::string* mutable_units();
  ::std::string* release_units();
  void set_allocated_units(::std::string* units);

  // optional string value_format_id = 10;
  bool has_value_format_id() const;
  void clear_value_format_id();
  static const int kValueFormatIdFieldNumber = 10;
  const ::std::string& value_format_id() const;
  void set_value_format_id(const ::std::string& value);
  #if LANG_CXX11
  void set_value_format_id(::std::string&& value);
  #endif
  void set_value_format_id(const char* value);
  void set_value_format_id(const char* value, size_t size);
  ::std::string* mutable_value_format_id();
  ::std::string* release_value_format_id();
  void set_allocated_value_format_id(::std::string* value_format_id);

  // optional .AAXValConfig.ParamFormat.EValueType value_type = 8 [default = E_VALUETYPE_UNKNOWN];
  bool has_value_type() const;
  void clear_value_type();
  static const int kValueTypeFieldNumber = 8;
  ::AAXValConfig::ParamFormat_EValueType value_type() const;
  void set_value_type(::AAXValConfig::ParamFormat_EValueType value);

  // optional .AAXValConfig.ParamFormat.EDisplayLevel display_level = 11 [default = E_DISPLAYLEVEL_UNKNOWN];
  bool has_display_level() const;
  void clear_display_level();
  static const int kDisplayLevelFieldNumber = 11;
  ::AAXValConfig::ParamFormat_EDisplayLevel display_level() const;
  void set_display_level(::AAXValConfig::ParamFormat_EDisplayLevel value);

  // @@protoc_insertion_point(class_scope:AAXValConfig.ParamFormat)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_value_type();
  void clear_has_value_type();
  void set_has_units();
  void clear_has_units();
  void set_has_value_format_id();
  void clear_has_value_format_id();
  void set_has_display_level();
  void clear_has_display_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> description_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr units_;
  ::google::protobuf::internal::ArenaStringPtr value_format_id_;
  int value_type_;
  int display_level_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnumSInt32Format_ValuePair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.EnumSInt32Format.ValuePair) */ {
 public:
  EnumSInt32Format_ValuePair();
  virtual ~EnumSInt32Format_ValuePair();

  EnumSInt32Format_ValuePair(const EnumSInt32Format_ValuePair& from);

  inline EnumSInt32Format_ValuePair& operator=(const EnumSInt32Format_ValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnumSInt32Format_ValuePair(EnumSInt32Format_ValuePair&& from) noexcept
    : EnumSInt32Format_ValuePair() {
    *this = ::std::move(from);
  }

  inline EnumSInt32Format_ValuePair& operator=(EnumSInt32Format_ValuePair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnumSInt32Format_ValuePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnumSInt32Format_ValuePair* internal_default_instance() {
    return reinterpret_cast<const EnumSInt32Format_ValuePair*>(
               &_EnumSInt32Format_ValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(EnumSInt32Format_ValuePair* other);
  friend void swap(EnumSInt32Format_ValuePair& a, EnumSInt32Format_ValuePair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnumSInt32Format_ValuePair* New() const final {
    return CreateMaybeMessage<EnumSInt32Format_ValuePair>(NULL);
  }

  EnumSInt32Format_ValuePair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnumSInt32Format_ValuePair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnumSInt32Format_ValuePair& from);
  void MergeFrom(const EnumSInt32Format_ValuePair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumSInt32Format_ValuePair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string description = 2;
  int description_size() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description(int index) const;
  ::std::string* mutable_description(int index);
  void set_description(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_description(int index, ::std::string&& value);
  #endif
  void set_description(int index, const char* value);
  void set_description(int index, const char* value, size_t size);
  ::std::string* add_description();
  void add_description(const ::std::string& value);
  #if LANG_CXX11
  void add_description(::std::string&& value);
  #endif
  void add_description(const char* value);
  void add_description(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& description() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_description();

  // required sint32 value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AAXValConfig.EnumSInt32Format.ValuePair)
 private:
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> description_;
  ::google::protobuf::int32 value_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnumSInt32Format : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.EnumSInt32Format) */ {
 public:
  EnumSInt32Format();
  virtual ~EnumSInt32Format();

  EnumSInt32Format(const EnumSInt32Format& from);

  inline EnumSInt32Format& operator=(const EnumSInt32Format& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnumSInt32Format(EnumSInt32Format&& from) noexcept
    : EnumSInt32Format() {
    *this = ::std::move(from);
  }

  inline EnumSInt32Format& operator=(EnumSInt32Format&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnumSInt32Format& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnumSInt32Format* internal_default_instance() {
    return reinterpret_cast<const EnumSInt32Format*>(
               &_EnumSInt32Format_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(EnumSInt32Format* other);
  friend void swap(EnumSInt32Format& a, EnumSInt32Format& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnumSInt32Format* New() const final {
    return CreateMaybeMessage<EnumSInt32Format>(NULL);
  }

  EnumSInt32Format* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnumSInt32Format>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnumSInt32Format& from);
  void MergeFrom(const EnumSInt32Format& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumSInt32Format* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EnumSInt32Format_ValuePair ValuePair;

  // accessors -------------------------------------------------------

  // repeated .AAXValConfig.EnumSInt32Format.ValuePair value_pair = 2;
  int value_pair_size() const;
  void clear_value_pair();
  static const int kValuePairFieldNumber = 2;
  ::AAXValConfig::EnumSInt32Format_ValuePair* mutable_value_pair(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::EnumSInt32Format_ValuePair >*
      mutable_value_pair();
  const ::AAXValConfig::EnumSInt32Format_ValuePair& value_pair(int index) const;
  ::AAXValConfig::EnumSInt32Format_ValuePair* add_value_pair();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::EnumSInt32Format_ValuePair >&
      value_pair() const;

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:AAXValConfig.EnumSInt32Format)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::EnumSInt32Format_ValuePair > value_pair_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Constraints_System : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.Constraints.System) */ {
 public:
  Constraints_System();
  virtual ~Constraints_System();

  Constraints_System(const Constraints_System& from);

  inline Constraints_System& operator=(const Constraints_System& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Constraints_System(Constraints_System&& from) noexcept
    : Constraints_System() {
    *this = ::std::move(from);
  }

  inline Constraints_System& operator=(Constraints_System&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Constraints_System& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Constraints_System* internal_default_instance() {
    return reinterpret_cast<const Constraints_System*>(
               &_Constraints_System_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Constraints_System* other);
  friend void swap(Constraints_System& a, Constraints_System& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Constraints_System* New() const final {
    return CreateMaybeMessage<Constraints_System>(NULL);
  }

  Constraints_System* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Constraints_System>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Constraints_System& from);
  void MergeFrom(const Constraints_System& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Constraints_System* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Constraints_System_EType EType;
  static const EType E_TYPE_UNKNOWN =
    Constraints_System_EType_E_TYPE_UNKNOWN;
  static const EType E_NATIVE =
    Constraints_System_EType_E_NATIVE;
  static const EType E_HDX =
    Constraints_System_EType_E_HDX;
  static const EType E_S3L =
    Constraints_System_EType_E_S3L;
  static inline bool EType_IsValid(int value) {
    return Constraints_System_EType_IsValid(value);
  }
  static const EType EType_MIN =
    Constraints_System_EType_EType_MIN;
  static const EType EType_MAX =
    Constraints_System_EType_EType_MAX;
  static const int EType_ARRAYSIZE =
    Constraints_System_EType_EType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EType_descriptor() {
    return Constraints_System_EType_descriptor();
  }
  static inline const ::std::string& EType_Name(EType value) {
    return Constraints_System_EType_Name(value);
  }
  static inline bool EType_Parse(const ::std::string& name,
      EType* value) {
    return Constraints_System_EType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .AAXValConfig.Constraints.System.EType type = 1 [default = E_TYPE_UNKNOWN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::AAXValConfig::Constraints_System_EType type() const;
  void set_type(::AAXValConfig::Constraints_System_EType value);

  // optional float min_version = 2;
  bool has_min_version() const;
  void clear_min_version();
  static const int kMinVersionFieldNumber = 2;
  float min_version() const;
  void set_min_version(float value);

  // optional float max_version = 3;
  bool has_max_version() const;
  void clear_max_version();
  static const int kMaxVersionFieldNumber = 3;
  float max_version() const;
  void set_max_version(float value);

  // @@protoc_insertion_point(class_scope:AAXValConfig.Constraints.System)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_min_version();
  void clear_has_min_version();
  void set_has_max_version();
  void clear_has_max_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int type_;
  float min_version_;
  float max_version_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Constraints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.Constraints) */ {
 public:
  Constraints();
  virtual ~Constraints();

  Constraints(const Constraints& from);

  inline Constraints& operator=(const Constraints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Constraints(Constraints&& from) noexcept
    : Constraints() {
    *this = ::std::move(from);
  }

  inline Constraints& operator=(Constraints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Constraints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Constraints* internal_default_instance() {
    return reinterpret_cast<const Constraints*>(
               &_Constraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Constraints* other);
  friend void swap(Constraints& a, Constraints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Constraints* New() const final {
    return CreateMaybeMessage<Constraints>(NULL);
  }

  Constraints* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Constraints>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Constraints& from);
  void MergeFrom(const Constraints& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Constraints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Constraints_System System;

  // accessors -------------------------------------------------------

  // repeated .AAXValConfig.Constraints.System system = 1;
  int system_size() const;
  void clear_system();
  static const int kSystemFieldNumber = 1;
  ::AAXValConfig::Constraints_System* mutable_system(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Constraints_System >*
      mutable_system();
  const ::AAXValConfig::Constraints_System& system(int index) const;
  ::AAXValConfig::Constraints_System* add_system();
  const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Constraints_System >&
      system() const;

  // optional sint64 min_memory_bytes = 8;
  bool has_min_memory_bytes() const;
  void clear_min_memory_bytes();
  static const int kMinMemoryBytesFieldNumber = 8;
  ::google::protobuf::int64 min_memory_bytes() const;
  void set_min_memory_bytes(::google::protobuf::int64 value);

  // optional sint64 max_memory_bytes = 9;
  bool has_max_memory_bytes() const;
  void clear_max_memory_bytes();
  static const int kMaxMemoryBytesFieldNumber = 9;
  ::google::protobuf::int64 max_memory_bytes() const;
  void set_max_memory_bytes(::google::protobuf::int64 value);

  // optional sint64 min_drive_bytes = 10;
  bool has_min_drive_bytes() const;
  void clear_min_drive_bytes();
  static const int kMinDriveBytesFieldNumber = 10;
  ::google::protobuf::int64 min_drive_bytes() const;
  void set_min_drive_bytes(::google::protobuf::int64 value);

  // optional sint64 max_drive_bytes = 11;
  bool has_max_drive_bytes() const;
  void clear_max_drive_bytes();
  static const int kMaxDriveBytesFieldNumber = 11;
  ::google::protobuf::int64 max_drive_bytes() const;
  void set_max_drive_bytes(::google::protobuf::int64 value);

  // optional sint64 min_cpu_cores = 12;
  bool has_min_cpu_cores() const;
  void clear_min_cpu_cores();
  static const int kMinCpuCoresFieldNumber = 12;
  ::google::protobuf::int64 min_cpu_cores() const;
  void set_min_cpu_cores(::google::protobuf::int64 value);

  // optional sint64 max_cpu_cores = 13;
  bool has_max_cpu_cores() const;
  void clear_max_cpu_cores();
  static const int kMaxCpuCoresFieldNumber = 13;
  ::google::protobuf::int64 max_cpu_cores() const;
  void set_max_cpu_cores(::google::protobuf::int64 value);

  // optional sint64 min_cpu_core_hz = 14;
  bool has_min_cpu_core_hz() const;
  void clear_min_cpu_core_hz();
  static const int kMinCpuCoreHzFieldNumber = 14;
  ::google::protobuf::int64 min_cpu_core_hz() const;
  void set_min_cpu_core_hz(::google::protobuf::int64 value);

  // optional sint64 max_cpu_core_hz = 15;
  bool has_max_cpu_core_hz() const;
  void clear_max_cpu_core_hz();
  static const int kMaxCpuCoreHzFieldNumber = 15;
  ::google::protobuf::int64 max_cpu_core_hz() const;
  void set_max_cpu_core_hz(::google::protobuf::int64 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Constraints)
  // @@protoc_insertion_point(class_scope:AAXValConfig.Constraints)
 private:
  void set_has_min_memory_bytes();
  void clear_has_min_memory_bytes();
  void set_has_max_memory_bytes();
  void clear_has_max_memory_bytes();
  void set_has_min_drive_bytes();
  void clear_has_min_drive_bytes();
  void set_has_max_drive_bytes();
  void clear_has_max_drive_bytes();
  void set_has_min_cpu_cores();
  void clear_has_min_cpu_cores();
  void set_has_max_cpu_cores();
  void clear_has_max_cpu_cores();
  void set_has_min_cpu_core_hz();
  void clear_has_min_cpu_core_hz();
  void set_has_max_cpu_core_hz();
  void clear_has_max_cpu_core_hz();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Constraints_System > system_;
  ::google::protobuf::int64 min_memory_bytes_;
  ::google::protobuf::int64 max_memory_bytes_;
  ::google::protobuf::int64 min_drive_bytes_;
  ::google::protobuf::int64 max_drive_bytes_;
  ::google::protobuf::int64 min_cpu_cores_;
  ::google::protobuf::int64 max_cpu_cores_;
  ::google::protobuf::int64 min_cpu_core_hz_;
  ::google::protobuf::int64 max_cpu_core_hz_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Arguments : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValConfig.Arguments) */ {
 public:
  Arguments();
  virtual ~Arguments();

  Arguments(const Arguments& from);

  inline Arguments& operator=(const Arguments& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Arguments(Arguments&& from) noexcept
    : Arguments() {
    *this = ::std::move(from);
  }

  inline Arguments& operator=(Arguments&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Arguments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Arguments* internal_default_instance() {
    return reinterpret_cast<const Arguments*>(
               &_Arguments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Arguments* other);
  friend void swap(Arguments& a, Arguments& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Arguments* New() const final {
    return CreateMaybeMessage<Arguments>(NULL);
  }

  Arguments* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Arguments>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Arguments& from);
  void MergeFrom(const Arguments& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Arguments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string elem = 1;
  int elem_size() const;
  void clear_elem();
  static const int kElemFieldNumber = 1;
  const ::std::string& elem(int index) const;
  ::std::string* mutable_elem(int index);
  void set_elem(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_elem(int index, ::std::string&& value);
  #endif
  void set_elem(int index, const char* value);
  void set_elem(int index, const char* value, size_t size);
  ::std::string* add_elem();
  void add_elem(const ::std::string& value);
  #if LANG_CXX11
  void add_elem(::std::string&& value);
  #endif
  void add_elem(const char* value);
  void add_elem(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& elem() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_elem();

  // @@protoc_insertion_point(class_scope:AAXValConfig.Arguments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> elem_;
  friend struct ::protobuf_AAXValidator_5fConfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Configuration

// repeated .AAXValConfig.Category category = 1;
inline int Configuration::category_size() const {
  return category_.size();
}
inline void Configuration::clear_category() {
  category_.Clear();
}
inline ::AAXValConfig::Category* Configuration::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Configuration.category)
  return category_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Category >*
Configuration::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Configuration.category)
  return &category_;
}
inline const ::AAXValConfig::Category& Configuration::category(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Configuration.category)
  return category_.Get(index);
}
inline ::AAXValConfig::Category* Configuration::add_category() {
  // @@protoc_insertion_point(field_add:AAXValConfig.Configuration.category)
  return category_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Category >&
Configuration::category() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Configuration.category)
  return category_;
}

// repeated .AAXValConfig.TestCollection collection = 2;
inline int Configuration::collection_size() const {
  return collection_.size();
}
inline void Configuration::clear_collection() {
  collection_.Clear();
}
inline ::AAXValConfig::TestCollection* Configuration::mutable_collection(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Configuration.collection)
  return collection_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::TestCollection >*
Configuration::mutable_collection() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Configuration.collection)
  return &collection_;
}
inline const ::AAXValConfig::TestCollection& Configuration::collection(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Configuration.collection)
  return collection_.Get(index);
}
inline ::AAXValConfig::TestCollection* Configuration::add_collection() {
  // @@protoc_insertion_point(field_add:AAXValConfig.Configuration.collection)
  return collection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::TestCollection >&
Configuration::collection() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Configuration.collection)
  return collection_;
}

// repeated .AAXValConfig.TestModule module = 3;
inline int Configuration::module_size() const {
  return module_.size();
}
inline void Configuration::clear_module() {
  module_.Clear();
}
inline ::AAXValConfig::TestModule* Configuration::mutable_module(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Configuration.module)
  return module_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::TestModule >*
Configuration::mutable_module() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Configuration.module)
  return &module_;
}
inline const ::AAXValConfig::TestModule& Configuration::module(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Configuration.module)
  return module_.Get(index);
}
inline ::AAXValConfig::TestModule* Configuration::add_module() {
  // @@protoc_insertion_point(field_add:AAXValConfig.Configuration.module)
  return module_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::TestModule >&
Configuration::module() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Configuration.module)
  return module_;
}

// repeated .AAXValConfig.Test test = 4;
inline int Configuration::test_size() const {
  return test_.size();
}
inline void Configuration::clear_test() {
  test_.Clear();
}
inline ::AAXValConfig::Test* Configuration::mutable_test(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Configuration.test)
  return test_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Test >*
Configuration::mutable_test() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Configuration.test)
  return &test_;
}
inline const ::AAXValConfig::Test& Configuration::test(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Configuration.test)
  return test_.Get(index);
}
inline ::AAXValConfig::Test* Configuration::add_test() {
  // @@protoc_insertion_point(field_add:AAXValConfig.Configuration.test)
  return test_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Test >&
Configuration::test() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Configuration.test)
  return test_;
}

// repeated .AAXValConfig.Process process = 5;
inline int Configuration::process_size() const {
  return process_.size();
}
inline void Configuration::clear_process() {
  process_.Clear();
}
inline ::AAXValConfig::Process* Configuration::mutable_process(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Configuration.process)
  return process_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Process >*
Configuration::mutable_process() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Configuration.process)
  return &process_;
}
inline const ::AAXValConfig::Process& Configuration::process(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Configuration.process)
  return process_.Get(index);
}
inline ::AAXValConfig::Process* Configuration::add_process() {
  // @@protoc_insertion_point(field_add:AAXValConfig.Configuration.process)
  return process_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Process >&
Configuration::process() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Configuration.process)
  return process_;
}

// repeated .AAXValConfig.ParamFormat param_format = 6;
inline int Configuration::param_format_size() const {
  return param_format_.size();
}
inline void Configuration::clear_param_format() {
  param_format_.Clear();
}
inline ::AAXValConfig::ParamFormat* Configuration::mutable_param_format(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Configuration.param_format)
  return param_format_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::ParamFormat >*
Configuration::mutable_param_format() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Configuration.param_format)
  return &param_format_;
}
inline const ::AAXValConfig::ParamFormat& Configuration::param_format(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Configuration.param_format)
  return param_format_.Get(index);
}
inline ::AAXValConfig::ParamFormat* Configuration::add_param_format() {
  // @@protoc_insertion_point(field_add:AAXValConfig.Configuration.param_format)
  return param_format_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::ParamFormat >&
Configuration::param_format() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Configuration.param_format)
  return param_format_;
}

// repeated .AAXValConfig.EnumSInt32Format enum_sint32_format = 7;
inline int Configuration::enum_sint32_format_size() const {
  return enum_sint32_format_.size();
}
inline void Configuration::clear_enum_sint32_format() {
  enum_sint32_format_.Clear();
}
inline ::AAXValConfig::EnumSInt32Format* Configuration::mutable_enum_sint32_format(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Configuration.enum_sint32_format)
  return enum_sint32_format_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::EnumSInt32Format >*
Configuration::mutable_enum_sint32_format() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Configuration.enum_sint32_format)
  return &enum_sint32_format_;
}
inline const ::AAXValConfig::EnumSInt32Format& Configuration::enum_sint32_format(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Configuration.enum_sint32_format)
  return enum_sint32_format_.Get(index);
}
inline ::AAXValConfig::EnumSInt32Format* Configuration::add_enum_sint32_format() {
  // @@protoc_insertion_point(field_add:AAXValConfig.Configuration.enum_sint32_format)
  return enum_sint32_format_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::EnumSInt32Format >&
Configuration::enum_sint32_format() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Configuration.enum_sint32_format)
  return enum_sint32_format_;
}

// repeated .AAXValConfig.Constraints constraints = 8;
inline int Configuration::constraints_size() const {
  return constraints_.size();
}
inline void Configuration::clear_constraints() {
  constraints_.Clear();
}
inline ::AAXValConfig::Constraints* Configuration::mutable_constraints(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Configuration.constraints)
  return constraints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Constraints >*
Configuration::mutable_constraints() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Configuration.constraints)
  return &constraints_;
}
inline const ::AAXValConfig::Constraints& Configuration::constraints(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Configuration.constraints)
  return constraints_.Get(index);
}
inline ::AAXValConfig::Constraints* Configuration::add_constraints() {
  // @@protoc_insertion_point(field_add:AAXValConfig.Configuration.constraints)
  return constraints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Constraints >&
Configuration::constraints() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Configuration.constraints)
  return constraints_;
}

// -------------------------------------------------------------------

// Category

// required string id = 1;
inline bool Category::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Category::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Category::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Category::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Category::id() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Category.id)
  return id_.GetNoArena();
}
inline void Category::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.Category.id)
}
#if LANG_CXX11
inline void Category::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.Category.id)
}
#endif
inline void Category::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Category.id)
}
inline void Category::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Category.id)
}
inline ::std::string* Category::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Category.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Category::release_id() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Category.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Category::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Category.id)
}

// repeated string name = 2;
inline int Category::name_size() const {
  return name_.size();
}
inline void Category::clear_name() {
  name_.Clear();
}
inline const ::std::string& Category::name(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Category.name)
  return name_.Get(index);
}
inline ::std::string* Category::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Category.name)
  return name_.Mutable(index);
}
inline void Category::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Category.name)
  name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Category::set_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Category.name)
  name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Category::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Category.name)
}
inline void Category::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Category.name)
}
inline ::std::string* Category::add_name() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.Category.name)
  return name_.Add();
}
inline void Category::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.Category.name)
}
#if LANG_CXX11
inline void Category::add_name(::std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.Category.name)
}
#endif
inline void Category::add_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.Category.name)
}
inline void Category::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.Category.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Category::name() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Category.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Category::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Category.name)
  return &name_;
}

// repeated string description = 3;
inline int Category::description_size() const {
  return description_.size();
}
inline void Category::clear_description() {
  description_.Clear();
}
inline const ::std::string& Category::description(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Category.description)
  return description_.Get(index);
}
inline ::std::string* Category::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Category.description)
  return description_.Mutable(index);
}
inline void Category::set_description(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Category.description)
  description_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Category::set_description(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Category.description)
  description_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Category::set_description(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Category.description)
}
inline void Category::set_description(int index, const char* value, size_t size) {
  description_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Category.description)
}
inline ::std::string* Category::add_description() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.Category.description)
  return description_.Add();
}
inline void Category::add_description(const ::std::string& value) {
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.Category.description)
}
#if LANG_CXX11
inline void Category::add_description(::std::string&& value) {
  description_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.Category.description)
}
#endif
inline void Category::add_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.Category.description)
}
inline void Category::add_description(const char* value, size_t size) {
  description_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.Category.description)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Category::description() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Category.description)
  return description_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Category::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Category.description)
  return &description_;
}

// optional .AAXValConfig.Constraints constraints = 13;
inline bool Category::has_constraints() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Category::set_has_constraints() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Category::clear_has_constraints() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Category::clear_constraints() {
  if (constraints_ != NULL) constraints_->Clear();
  clear_has_constraints();
}
inline const ::AAXValConfig::Constraints& Category::_internal_constraints() const {
  return *constraints_;
}
inline const ::AAXValConfig::Constraints& Category::constraints() const {
  const ::AAXValConfig::Constraints* p = constraints_;
  // @@protoc_insertion_point(field_get:AAXValConfig.Category.constraints)
  return p != NULL ? *p : *reinterpret_cast<const ::AAXValConfig::Constraints*>(
      &::AAXValConfig::_Constraints_default_instance_);
}
inline ::AAXValConfig::Constraints* Category::release_constraints() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Category.constraints)
  clear_has_constraints();
  ::AAXValConfig::Constraints* temp = constraints_;
  constraints_ = NULL;
  return temp;
}
inline ::AAXValConfig::Constraints* Category::mutable_constraints() {
  set_has_constraints();
  if (constraints_ == NULL) {
    auto* p = CreateMaybeMessage<::AAXValConfig::Constraints>(GetArenaNoVirtual());
    constraints_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Category.constraints)
  return constraints_;
}
inline void Category::set_allocated_constraints(::AAXValConfig::Constraints* constraints) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete constraints_;
  }
  if (constraints) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      constraints = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, constraints, submessage_arena);
    }
    set_has_constraints();
  } else {
    clear_has_constraints();
  }
  constraints_ = constraints;
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Category.constraints)
}

// -------------------------------------------------------------------

// TestCollection

// required string id = 1;
inline bool TestCollection::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestCollection::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestCollection::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestCollection::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& TestCollection::id() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.TestCollection.id)
  return id_.GetNoArena();
}
inline void TestCollection::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.TestCollection.id)
}
#if LANG_CXX11
inline void TestCollection::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.TestCollection.id)
}
#endif
inline void TestCollection::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.TestCollection.id)
}
inline void TestCollection::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.TestCollection.id)
}
inline ::std::string* TestCollection::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.TestCollection.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestCollection::release_id() {
  // @@protoc_insertion_point(field_release:AAXValConfig.TestCollection.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestCollection::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.TestCollection.id)
}

// repeated string name = 2;
inline int TestCollection::name_size() const {
  return name_.size();
}
inline void TestCollection::clear_name() {
  name_.Clear();
}
inline const ::std::string& TestCollection::name(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.TestCollection.name)
  return name_.Get(index);
}
inline ::std::string* TestCollection::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.TestCollection.name)
  return name_.Mutable(index);
}
inline void TestCollection::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.TestCollection.name)
  name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestCollection::set_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.TestCollection.name)
  name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestCollection::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.TestCollection.name)
}
inline void TestCollection::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.TestCollection.name)
}
inline ::std::string* TestCollection::add_name() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.TestCollection.name)
  return name_.Add();
}
inline void TestCollection::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.TestCollection.name)
}
#if LANG_CXX11
inline void TestCollection::add_name(::std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.TestCollection.name)
}
#endif
inline void TestCollection::add_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.TestCollection.name)
}
inline void TestCollection::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.TestCollection.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestCollection::name() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.TestCollection.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestCollection::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.TestCollection.name)
  return &name_;
}

// repeated string description = 3;
inline int TestCollection::description_size() const {
  return description_.size();
}
inline void TestCollection::clear_description() {
  description_.Clear();
}
inline const ::std::string& TestCollection::description(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.TestCollection.description)
  return description_.Get(index);
}
inline ::std::string* TestCollection::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.TestCollection.description)
  return description_.Mutable(index);
}
inline void TestCollection::set_description(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.TestCollection.description)
  description_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestCollection::set_description(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.TestCollection.description)
  description_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestCollection::set_description(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.TestCollection.description)
}
inline void TestCollection::set_description(int index, const char* value, size_t size) {
  description_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.TestCollection.description)
}
inline ::std::string* TestCollection::add_description() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.TestCollection.description)
  return description_.Add();
}
inline void TestCollection::add_description(const ::std::string& value) {
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.TestCollection.description)
}
#if LANG_CXX11
inline void TestCollection::add_description(::std::string&& value) {
  description_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.TestCollection.description)
}
#endif
inline void TestCollection::add_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.TestCollection.description)
}
inline void TestCollection::add_description(const char* value, size_t size) {
  description_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.TestCollection.description)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestCollection::description() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.TestCollection.description)
  return description_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestCollection::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.TestCollection.description)
  return &description_;
}

// -------------------------------------------------------------------

// TestModule

// required string id = 1;
inline bool TestModule::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestModule::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestModule::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestModule::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& TestModule::id() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.TestModule.id)
  return id_.GetNoArena();
}
inline void TestModule::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.TestModule.id)
}
#if LANG_CXX11
inline void TestModule::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.TestModule.id)
}
#endif
inline void TestModule::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.TestModule.id)
}
inline void TestModule::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.TestModule.id)
}
inline ::std::string* TestModule::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.TestModule.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestModule::release_id() {
  // @@protoc_insertion_point(field_release:AAXValConfig.TestModule.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestModule::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.TestModule.id)
}

// repeated string name = 2;
inline int TestModule::name_size() const {
  return name_.size();
}
inline void TestModule::clear_name() {
  name_.Clear();
}
inline const ::std::string& TestModule::name(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.TestModule.name)
  return name_.Get(index);
}
inline ::std::string* TestModule::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.TestModule.name)
  return name_.Mutable(index);
}
inline void TestModule::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.TestModule.name)
  name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestModule::set_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.TestModule.name)
  name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestModule::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.TestModule.name)
}
inline void TestModule::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.TestModule.name)
}
inline ::std::string* TestModule::add_name() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.TestModule.name)
  return name_.Add();
}
inline void TestModule::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.TestModule.name)
}
#if LANG_CXX11
inline void TestModule::add_name(::std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.TestModule.name)
}
#endif
inline void TestModule::add_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.TestModule.name)
}
inline void TestModule::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.TestModule.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestModule::name() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.TestModule.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestModule::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.TestModule.name)
  return &name_;
}

// repeated string description = 3;
inline int TestModule::description_size() const {
  return description_.size();
}
inline void TestModule::clear_description() {
  description_.Clear();
}
inline const ::std::string& TestModule::description(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.TestModule.description)
  return description_.Get(index);
}
inline ::std::string* TestModule::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.TestModule.description)
  return description_.Mutable(index);
}
inline void TestModule::set_description(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.TestModule.description)
  description_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestModule::set_description(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.TestModule.description)
  description_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestModule::set_description(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.TestModule.description)
}
inline void TestModule::set_description(int index, const char* value, size_t size) {
  description_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.TestModule.description)
}
inline ::std::string* TestModule::add_description() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.TestModule.description)
  return description_.Add();
}
inline void TestModule::add_description(const ::std::string& value) {
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.TestModule.description)
}
#if LANG_CXX11
inline void TestModule::add_description(::std::string&& value) {
  description_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.TestModule.description)
}
#endif
inline void TestModule::add_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.TestModule.description)
}
inline void TestModule::add_description(const char* value, size_t size) {
  description_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.TestModule.description)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestModule::description() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.TestModule.description)
  return description_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestModule::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.TestModule.description)
  return &description_;
}

// repeated string collection_id = 11;
inline int TestModule::collection_id_size() const {
  return collection_id_.size();
}
inline void TestModule::clear_collection_id() {
  collection_id_.Clear();
}
inline const ::std::string& TestModule::collection_id(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.TestModule.collection_id)
  return collection_id_.Get(index);
}
inline ::std::string* TestModule::mutable_collection_id(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.TestModule.collection_id)
  return collection_id_.Mutable(index);
}
inline void TestModule::set_collection_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.TestModule.collection_id)
  collection_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TestModule::set_collection_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.TestModule.collection_id)
  collection_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TestModule::set_collection_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  collection_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.TestModule.collection_id)
}
inline void TestModule::set_collection_id(int index, const char* value, size_t size) {
  collection_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.TestModule.collection_id)
}
inline ::std::string* TestModule::add_collection_id() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.TestModule.collection_id)
  return collection_id_.Add();
}
inline void TestModule::add_collection_id(const ::std::string& value) {
  collection_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.TestModule.collection_id)
}
#if LANG_CXX11
inline void TestModule::add_collection_id(::std::string&& value) {
  collection_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.TestModule.collection_id)
}
#endif
inline void TestModule::add_collection_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  collection_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.TestModule.collection_id)
}
inline void TestModule::add_collection_id(const char* value, size_t size) {
  collection_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.TestModule.collection_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestModule::collection_id() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.TestModule.collection_id)
  return collection_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestModule::mutable_collection_id() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.TestModule.collection_id)
  return &collection_id_;
}

// -------------------------------------------------------------------

// Test_Condition

// required string id = 1;
inline bool Test_Condition::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test_Condition::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test_Condition::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test_Condition::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Test_Condition::id() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.Condition.id)
  return id_.GetNoArena();
}
inline void Test_Condition::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.Condition.id)
}
#if LANG_CXX11
inline void Test_Condition::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.Test.Condition.id)
}
#endif
inline void Test_Condition::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Test.Condition.id)
}
inline void Test_Condition::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Test.Condition.id)
}
inline ::std::string* Test_Condition::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.Condition.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test_Condition::release_id() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Test.Condition.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test_Condition::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Test.Condition.id)
}

// optional .AAXValConfig.Test.Condition.EConditionType type = 2 [default = E_CONDITIONTYPE_UNKNOWN];
inline bool Test_Condition::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Test_Condition::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Test_Condition::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Test_Condition::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::AAXValConfig::Test_Condition_EConditionType Test_Condition::type() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.Condition.type)
  return static_cast< ::AAXValConfig::Test_Condition_EConditionType >(type_);
}
inline void Test_Condition::set_type(::AAXValConfig::Test_Condition_EConditionType value) {
  assert(::AAXValConfig::Test_Condition_EConditionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.Condition.type)
}

// optional string description = 3;
inline bool Test_Condition::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test_Condition::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test_Condition::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test_Condition::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& Test_Condition::description() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.Condition.description)
  return description_.GetNoArena();
}
inline void Test_Condition::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.Condition.description)
}
#if LANG_CXX11
inline void Test_Condition::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.Test.Condition.description)
}
#endif
inline void Test_Condition::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Test.Condition.description)
}
inline void Test_Condition::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Test.Condition.description)
}
inline ::std::string* Test_Condition::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.Condition.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test_Condition::release_description() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Test.Condition.description)
  if (!has_description()) {
    return NULL;
  }
  clear_has_description();
  return description_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test_Condition::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Test.Condition.description)
}

// -------------------------------------------------------------------

// Test

// required string id = 1;
inline bool Test::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Test::id() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.id)
  return id_.GetNoArena();
}
inline void Test::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.id)
}
#if LANG_CXX11
inline void Test::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.Test.id)
}
#endif
inline void Test::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Test.id)
}
inline void Test::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Test.id)
}
inline ::std::string* Test::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test::release_id() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Test.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Test.id)
}

// repeated string name = 2;
inline int Test::name_size() const {
  return name_.size();
}
inline void Test::clear_name() {
  name_.Clear();
}
inline const ::std::string& Test::name(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.name)
  return name_.Get(index);
}
inline ::std::string* Test::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.name)
  return name_.Mutable(index);
}
inline void Test::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.name)
  name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Test::set_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.name)
  name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Test::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Test.name)
}
inline void Test::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Test.name)
}
inline ::std::string* Test::add_name() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.Test.name)
  return name_.Add();
}
inline void Test::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.Test.name)
}
#if LANG_CXX11
inline void Test::add_name(::std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.Test.name)
}
#endif
inline void Test::add_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.Test.name)
}
inline void Test::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.Test.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Test::name() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Test.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Test::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Test.name)
  return &name_;
}

// repeated string description = 3;
inline int Test::description_size() const {
  return description_.size();
}
inline void Test::clear_description() {
  description_.Clear();
}
inline const ::std::string& Test::description(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.description)
  return description_.Get(index);
}
inline ::std::string* Test::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.description)
  return description_.Mutable(index);
}
inline void Test::set_description(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.description)
  description_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Test::set_description(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.description)
  description_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Test::set_description(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Test.description)
}
inline void Test::set_description(int index, const char* value, size_t size) {
  description_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Test.description)
}
inline ::std::string* Test::add_description() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.Test.description)
  return description_.Add();
}
inline void Test::add_description(const ::std::string& value) {
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.Test.description)
}
#if LANG_CXX11
inline void Test::add_description(::std::string&& value) {
  description_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.Test.description)
}
#endif
inline void Test::add_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.Test.description)
}
inline void Test::add_description(const char* value, size_t size) {
  description_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.Test.description)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Test::description() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Test.description)
  return description_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Test::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Test.description)
  return &description_;
}

// repeated string module_id = 4;
inline int Test::module_id_size() const {
  return module_id_.size();
}
inline void Test::clear_module_id() {
  module_id_.Clear();
}
inline const ::std::string& Test::module_id(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.module_id)
  return module_id_.Get(index);
}
inline ::std::string* Test::mutable_module_id(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.module_id)
  return module_id_.Mutable(index);
}
inline void Test::set_module_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.module_id)
  module_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Test::set_module_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.module_id)
  module_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Test::set_module_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  module_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Test.module_id)
}
inline void Test::set_module_id(int index, const char* value, size_t size) {
  module_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Test.module_id)
}
inline ::std::string* Test::add_module_id() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.Test.module_id)
  return module_id_.Add();
}
inline void Test::add_module_id(const ::std::string& value) {
  module_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.Test.module_id)
}
#if LANG_CXX11
inline void Test::add_module_id(::std::string&& value) {
  module_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.Test.module_id)
}
#endif
inline void Test::add_module_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  module_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.Test.module_id)
}
inline void Test::add_module_id(const char* value, size_t size) {
  module_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.Test.module_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Test::module_id() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Test.module_id)
  return module_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Test::mutable_module_id() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Test.module_id)
  return &module_id_;
}

// repeated string category_id = 5;
inline int Test::category_id_size() const {
  return category_id_.size();
}
inline void Test::clear_category_id() {
  category_id_.Clear();
}
inline const ::std::string& Test::category_id(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.category_id)
  return category_id_.Get(index);
}
inline ::std::string* Test::mutable_category_id(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.category_id)
  return category_id_.Mutable(index);
}
inline void Test::set_category_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.category_id)
  category_id_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Test::set_category_id(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.category_id)
  category_id_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Test::set_category_id(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  category_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Test.category_id)
}
inline void Test::set_category_id(int index, const char* value, size_t size) {
  category_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Test.category_id)
}
inline ::std::string* Test::add_category_id() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.Test.category_id)
  return category_id_.Add();
}
inline void Test::add_category_id(const ::std::string& value) {
  category_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.Test.category_id)
}
#if LANG_CXX11
inline void Test::add_category_id(::std::string&& value) {
  category_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.Test.category_id)
}
#endif
inline void Test::add_category_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  category_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.Test.category_id)
}
inline void Test::add_category_id(const char* value, size_t size) {
  category_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.Test.category_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Test::category_id() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Test.category_id)
  return category_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Test::mutable_category_id() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Test.category_id)
  return &category_id_;
}

// repeated .AAXValConfig.Test.Condition condition = 6;
inline int Test::condition_size() const {
  return condition_.size();
}
inline void Test::clear_condition() {
  condition_.Clear();
}
inline ::AAXValConfig::Test_Condition* Test::mutable_condition(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.condition)
  return condition_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Test_Condition >*
Test::mutable_condition() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Test.condition)
  return &condition_;
}
inline const ::AAXValConfig::Test_Condition& Test::condition(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.condition)
  return condition_.Get(index);
}
inline ::AAXValConfig::Test_Condition* Test::add_condition() {
  // @@protoc_insertion_point(field_add:AAXValConfig.Test.condition)
  return condition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Test_Condition >&
Test::condition() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Test.condition)
  return condition_;
}

// optional string process_id = 8;
inline bool Test::has_process_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test::set_has_process_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test::clear_has_process_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test::clear_process_id() {
  process_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_process_id();
}
inline const ::std::string& Test::process_id() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.process_id)
  return process_id_.GetNoArena();
}
inline void Test::set_process_id(const ::std::string& value) {
  set_has_process_id();
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.process_id)
}
#if LANG_CXX11
inline void Test::set_process_id(::std::string&& value) {
  set_has_process_id();
  process_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.Test.process_id)
}
#endif
inline void Test::set_process_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_process_id();
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Test.process_id)
}
inline void Test::set_process_id(const char* value, size_t size) {
  set_has_process_id();
  process_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Test.process_id)
}
inline ::std::string* Test::mutable_process_id() {
  set_has_process_id();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.process_id)
  return process_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test::release_process_id() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Test.process_id)
  if (!has_process_id()) {
    return NULL;
  }
  clear_has_process_id();
  return process_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_process_id(::std::string* process_id) {
  if (process_id != NULL) {
    set_has_process_id();
  } else {
    clear_has_process_id();
  }
  process_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_id);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Test.process_id)
}

// optional .AAXValConfig.Arguments arguments = 9;
inline bool Test::has_arguments() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Test::set_has_arguments() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Test::clear_has_arguments() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Test::clear_arguments() {
  if (arguments_ != NULL) arguments_->Clear();
  clear_has_arguments();
}
inline const ::AAXValConfig::Arguments& Test::_internal_arguments() const {
  return *arguments_;
}
inline const ::AAXValConfig::Arguments& Test::arguments() const {
  const ::AAXValConfig::Arguments* p = arguments_;
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.arguments)
  return p != NULL ? *p : *reinterpret_cast<const ::AAXValConfig::Arguments*>(
      &::AAXValConfig::_Arguments_default_instance_);
}
inline ::AAXValConfig::Arguments* Test::release_arguments() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Test.arguments)
  clear_has_arguments();
  ::AAXValConfig::Arguments* temp = arguments_;
  arguments_ = NULL;
  return temp;
}
inline ::AAXValConfig::Arguments* Test::mutable_arguments() {
  set_has_arguments();
  if (arguments_ == NULL) {
    auto* p = CreateMaybeMessage<::AAXValConfig::Arguments>(GetArenaNoVirtual());
    arguments_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.arguments)
  return arguments_;
}
inline void Test::set_allocated_arguments(::AAXValConfig::Arguments* arguments) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete arguments_;
  }
  if (arguments) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      arguments = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, arguments, submessage_arena);
    }
    set_has_arguments();
  } else {
    clear_has_arguments();
  }
  arguments_ = arguments;
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Test.arguments)
}

// repeated .AAXValConfig.ParamFormat param_format = 13;
inline int Test::param_format_size() const {
  return param_format_.size();
}
inline void Test::clear_param_format() {
  param_format_.Clear();
}
inline ::AAXValConfig::ParamFormat* Test::mutable_param_format(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.param_format)
  return param_format_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::ParamFormat >*
Test::mutable_param_format() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Test.param_format)
  return &param_format_;
}
inline const ::AAXValConfig::ParamFormat& Test::param_format(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.param_format)
  return param_format_.Get(index);
}
inline ::AAXValConfig::ParamFormat* Test::add_param_format() {
  // @@protoc_insertion_point(field_add:AAXValConfig.Test.param_format)
  return param_format_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::ParamFormat >&
Test::param_format() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Test.param_format)
  return param_format_;
}

// optional .AAXValConfig.Constraints constraints = 14;
inline bool Test::has_constraints() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Test::set_has_constraints() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Test::clear_has_constraints() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Test::clear_constraints() {
  if (constraints_ != NULL) constraints_->Clear();
  clear_has_constraints();
}
inline const ::AAXValConfig::Constraints& Test::_internal_constraints() const {
  return *constraints_;
}
inline const ::AAXValConfig::Constraints& Test::constraints() const {
  const ::AAXValConfig::Constraints* p = constraints_;
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.constraints)
  return p != NULL ? *p : *reinterpret_cast<const ::AAXValConfig::Constraints*>(
      &::AAXValConfig::_Constraints_default_instance_);
}
inline ::AAXValConfig::Constraints* Test::release_constraints() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Test.constraints)
  clear_has_constraints();
  ::AAXValConfig::Constraints* temp = constraints_;
  constraints_ = NULL;
  return temp;
}
inline ::AAXValConfig::Constraints* Test::mutable_constraints() {
  set_has_constraints();
  if (constraints_ == NULL) {
    auto* p = CreateMaybeMessage<::AAXValConfig::Constraints>(GetArenaNoVirtual());
    constraints_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.constraints)
  return constraints_;
}
inline void Test::set_allocated_constraints(::AAXValConfig::Constraints* constraints) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete constraints_;
  }
  if (constraints) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      constraints = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, constraints, submessage_arena);
    }
    set_has_constraints();
  } else {
    clear_has_constraints();
  }
  constraints_ = constraints;
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Test.constraints)
}

// optional string version = 20;
inline bool Test::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Test::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Test::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Test::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& Test::version() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.version)
  return version_.GetNoArena();
}
inline void Test::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.version)
}
#if LANG_CXX11
inline void Test::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.Test.version)
}
#endif
inline void Test::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Test.version)
}
inline void Test::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Test.version)
}
inline ::std::string* Test::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Test.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Test::release_version() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Test.version)
  if (!has_version()) {
    return NULL;
  }
  clear_has_version();
  return version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Test::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Test.version)
}

// optional sint32 build = 21;
inline bool Test::has_build() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Test::set_has_build() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Test::clear_has_build() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Test::clear_build() {
  build_ = 0;
  clear_has_build();
}
inline ::google::protobuf::int32 Test::build() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Test.build)
  return build_;
}
inline void Test::set_build(::google::protobuf::int32 value) {
  set_has_build();
  build_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Test.build)
}

// -------------------------------------------------------------------

// Process_PlatformProcess

// optional .AAXValConfig.Process.PlatformProcess.EPlatform platform = 2 [default = E_PLATFORM_UNKNOWN];
inline bool Process_PlatformProcess::has_platform() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Process_PlatformProcess::set_has_platform() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Process_PlatformProcess::clear_has_platform() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Process_PlatformProcess::clear_platform() {
  platform_ = 0;
  clear_has_platform();
}
inline ::AAXValConfig::Process_PlatformProcess_EPlatform Process_PlatformProcess::platform() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Process.PlatformProcess.platform)
  return static_cast< ::AAXValConfig::Process_PlatformProcess_EPlatform >(platform_);
}
inline void Process_PlatformProcess::set_platform(::AAXValConfig::Process_PlatformProcess_EPlatform value) {
  assert(::AAXValConfig::Process_PlatformProcess_EPlatform_IsValid(value));
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Process.PlatformProcess.platform)
}

// optional string invocation = 3;
inline bool Process_PlatformProcess::has_invocation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Process_PlatformProcess::set_has_invocation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Process_PlatformProcess::clear_has_invocation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Process_PlatformProcess::clear_invocation() {
  invocation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_invocation();
}
inline const ::std::string& Process_PlatformProcess::invocation() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Process.PlatformProcess.invocation)
  return invocation_.GetNoArena();
}
inline void Process_PlatformProcess::set_invocation(const ::std::string& value) {
  set_has_invocation();
  invocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.Process.PlatformProcess.invocation)
}
#if LANG_CXX11
inline void Process_PlatformProcess::set_invocation(::std::string&& value) {
  set_has_invocation();
  invocation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.Process.PlatformProcess.invocation)
}
#endif
inline void Process_PlatformProcess::set_invocation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_invocation();
  invocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Process.PlatformProcess.invocation)
}
inline void Process_PlatformProcess::set_invocation(const char* value, size_t size) {
  set_has_invocation();
  invocation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Process.PlatformProcess.invocation)
}
inline ::std::string* Process_PlatformProcess::mutable_invocation() {
  set_has_invocation();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Process.PlatformProcess.invocation)
  return invocation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Process_PlatformProcess::release_invocation() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Process.PlatformProcess.invocation)
  if (!has_invocation()) {
    return NULL;
  }
  clear_has_invocation();
  return invocation_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Process_PlatformProcess::set_allocated_invocation(::std::string* invocation) {
  if (invocation != NULL) {
    set_has_invocation();
  } else {
    clear_has_invocation();
  }
  invocation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invocation);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Process.PlatformProcess.invocation)
}

// optional .AAXValConfig.Arguments arguments = 4;
inline bool Process_PlatformProcess::has_arguments() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Process_PlatformProcess::set_has_arguments() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Process_PlatformProcess::clear_has_arguments() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Process_PlatformProcess::clear_arguments() {
  if (arguments_ != NULL) arguments_->Clear();
  clear_has_arguments();
}
inline const ::AAXValConfig::Arguments& Process_PlatformProcess::_internal_arguments() const {
  return *arguments_;
}
inline const ::AAXValConfig::Arguments& Process_PlatformProcess::arguments() const {
  const ::AAXValConfig::Arguments* p = arguments_;
  // @@protoc_insertion_point(field_get:AAXValConfig.Process.PlatformProcess.arguments)
  return p != NULL ? *p : *reinterpret_cast<const ::AAXValConfig::Arguments*>(
      &::AAXValConfig::_Arguments_default_instance_);
}
inline ::AAXValConfig::Arguments* Process_PlatformProcess::release_arguments() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Process.PlatformProcess.arguments)
  clear_has_arguments();
  ::AAXValConfig::Arguments* temp = arguments_;
  arguments_ = NULL;
  return temp;
}
inline ::AAXValConfig::Arguments* Process_PlatformProcess::mutable_arguments() {
  set_has_arguments();
  if (arguments_ == NULL) {
    auto* p = CreateMaybeMessage<::AAXValConfig::Arguments>(GetArenaNoVirtual());
    arguments_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Process.PlatformProcess.arguments)
  return arguments_;
}
inline void Process_PlatformProcess::set_allocated_arguments(::AAXValConfig::Arguments* arguments) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete arguments_;
  }
  if (arguments) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      arguments = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, arguments, submessage_arena);
    }
    set_has_arguments();
  } else {
    clear_has_arguments();
  }
  arguments_ = arguments;
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Process.PlatformProcess.arguments)
}

// -------------------------------------------------------------------

// Process

// required string id = 1;
inline bool Process::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Process::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Process::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Process::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Process::id() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Process.id)
  return id_.GetNoArena();
}
inline void Process::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.Process.id)
}
#if LANG_CXX11
inline void Process::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.Process.id)
}
#endif
inline void Process::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Process.id)
}
inline void Process::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Process.id)
}
inline ::std::string* Process::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Process.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Process::release_id() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Process.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Process::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Process.id)
}

// repeated string name = 2;
inline int Process::name_size() const {
  return name_.size();
}
inline void Process::clear_name() {
  name_.Clear();
}
inline const ::std::string& Process::name(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Process.name)
  return name_.Get(index);
}
inline ::std::string* Process::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Process.name)
  return name_.Mutable(index);
}
inline void Process::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Process.name)
  name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Process::set_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Process.name)
  name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Process::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Process.name)
}
inline void Process::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Process.name)
}
inline ::std::string* Process::add_name() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.Process.name)
  return name_.Add();
}
inline void Process::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.Process.name)
}
#if LANG_CXX11
inline void Process::add_name(::std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.Process.name)
}
#endif
inline void Process::add_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.Process.name)
}
inline void Process::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.Process.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Process::name() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Process.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Process::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Process.name)
  return &name_;
}

// repeated string description = 3;
inline int Process::description_size() const {
  return description_.size();
}
inline void Process::clear_description() {
  description_.Clear();
}
inline const ::std::string& Process::description(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Process.description)
  return description_.Get(index);
}
inline ::std::string* Process::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Process.description)
  return description_.Mutable(index);
}
inline void Process::set_description(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Process.description)
  description_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Process::set_description(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Process.description)
  description_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Process::set_description(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Process.description)
}
inline void Process::set_description(int index, const char* value, size_t size) {
  description_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Process.description)
}
inline ::std::string* Process::add_description() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.Process.description)
  return description_.Add();
}
inline void Process::add_description(const ::std::string& value) {
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.Process.description)
}
#if LANG_CXX11
inline void Process::add_description(::std::string&& value) {
  description_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.Process.description)
}
#endif
inline void Process::add_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.Process.description)
}
inline void Process::add_description(const char* value, size_t size) {
  description_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.Process.description)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Process::description() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Process.description)
  return description_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Process::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Process.description)
  return &description_;
}

// repeated .AAXValConfig.Process.PlatformProcess platform_process = 4;
inline int Process::platform_process_size() const {
  return platform_process_.size();
}
inline void Process::clear_platform_process() {
  platform_process_.Clear();
}
inline ::AAXValConfig::Process_PlatformProcess* Process::mutable_platform_process(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Process.platform_process)
  return platform_process_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Process_PlatformProcess >*
Process::mutable_platform_process() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Process.platform_process)
  return &platform_process_;
}
inline const ::AAXValConfig::Process_PlatformProcess& Process::platform_process(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Process.platform_process)
  return platform_process_.Get(index);
}
inline ::AAXValConfig::Process_PlatformProcess* Process::add_platform_process() {
  // @@protoc_insertion_point(field_add:AAXValConfig.Process.platform_process)
  return platform_process_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Process_PlatformProcess >&
Process::platform_process() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Process.platform_process)
  return platform_process_;
}

// optional .AAXValConfig.Arguments arguments = 5;
inline bool Process::has_arguments() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Process::set_has_arguments() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Process::clear_has_arguments() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Process::clear_arguments() {
  if (arguments_ != NULL) arguments_->Clear();
  clear_has_arguments();
}
inline const ::AAXValConfig::Arguments& Process::_internal_arguments() const {
  return *arguments_;
}
inline const ::AAXValConfig::Arguments& Process::arguments() const {
  const ::AAXValConfig::Arguments* p = arguments_;
  // @@protoc_insertion_point(field_get:AAXValConfig.Process.arguments)
  return p != NULL ? *p : *reinterpret_cast<const ::AAXValConfig::Arguments*>(
      &::AAXValConfig::_Arguments_default_instance_);
}
inline ::AAXValConfig::Arguments* Process::release_arguments() {
  // @@protoc_insertion_point(field_release:AAXValConfig.Process.arguments)
  clear_has_arguments();
  ::AAXValConfig::Arguments* temp = arguments_;
  arguments_ = NULL;
  return temp;
}
inline ::AAXValConfig::Arguments* Process::mutable_arguments() {
  set_has_arguments();
  if (arguments_ == NULL) {
    auto* p = CreateMaybeMessage<::AAXValConfig::Arguments>(GetArenaNoVirtual());
    arguments_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Process.arguments)
  return arguments_;
}
inline void Process::set_allocated_arguments(::AAXValConfig::Arguments* arguments) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete arguments_;
  }
  if (arguments) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      arguments = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, arguments, submessage_arena);
    }
    set_has_arguments();
  } else {
    clear_has_arguments();
  }
  arguments_ = arguments;
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.Process.arguments)
}

// -------------------------------------------------------------------

// ParamFormat

// required string id = 1;
inline bool ParamFormat::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParamFormat::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParamFormat::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParamFormat::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& ParamFormat::id() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.ParamFormat.id)
  return id_.GetNoArena();
}
inline void ParamFormat::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.ParamFormat.id)
}
#if LANG_CXX11
inline void ParamFormat::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.ParamFormat.id)
}
#endif
inline void ParamFormat::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.ParamFormat.id)
}
inline void ParamFormat::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.ParamFormat.id)
}
inline ::std::string* ParamFormat::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.ParamFormat.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamFormat::release_id() {
  // @@protoc_insertion_point(field_release:AAXValConfig.ParamFormat.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamFormat::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.ParamFormat.id)
}

// repeated string name = 2;
inline int ParamFormat::name_size() const {
  return name_.size();
}
inline void ParamFormat::clear_name() {
  name_.Clear();
}
inline const ::std::string& ParamFormat::name(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.ParamFormat.name)
  return name_.Get(index);
}
inline ::std::string* ParamFormat::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.ParamFormat.name)
  return name_.Mutable(index);
}
inline void ParamFormat::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.ParamFormat.name)
  name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ParamFormat::set_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.ParamFormat.name)
  name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ParamFormat::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.ParamFormat.name)
}
inline void ParamFormat::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.ParamFormat.name)
}
inline ::std::string* ParamFormat::add_name() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.ParamFormat.name)
  return name_.Add();
}
inline void ParamFormat::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.ParamFormat.name)
}
#if LANG_CXX11
inline void ParamFormat::add_name(::std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.ParamFormat.name)
}
#endif
inline void ParamFormat::add_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.ParamFormat.name)
}
inline void ParamFormat::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.ParamFormat.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ParamFormat::name() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.ParamFormat.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ParamFormat::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.ParamFormat.name)
  return &name_;
}

// repeated string description = 3;
inline int ParamFormat::description_size() const {
  return description_.size();
}
inline void ParamFormat::clear_description() {
  description_.Clear();
}
inline const ::std::string& ParamFormat::description(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.ParamFormat.description)
  return description_.Get(index);
}
inline ::std::string* ParamFormat::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.ParamFormat.description)
  return description_.Mutable(index);
}
inline void ParamFormat::set_description(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.ParamFormat.description)
  description_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ParamFormat::set_description(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.ParamFormat.description)
  description_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ParamFormat::set_description(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.ParamFormat.description)
}
inline void ParamFormat::set_description(int index, const char* value, size_t size) {
  description_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.ParamFormat.description)
}
inline ::std::string* ParamFormat::add_description() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.ParamFormat.description)
  return description_.Add();
}
inline void ParamFormat::add_description(const ::std::string& value) {
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.ParamFormat.description)
}
#if LANG_CXX11
inline void ParamFormat::add_description(::std::string&& value) {
  description_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.ParamFormat.description)
}
#endif
inline void ParamFormat::add_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.ParamFormat.description)
}
inline void ParamFormat::add_description(const char* value, size_t size) {
  description_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.ParamFormat.description)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ParamFormat::description() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.ParamFormat.description)
  return description_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ParamFormat::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.ParamFormat.description)
  return &description_;
}

// optional .AAXValConfig.ParamFormat.EValueType value_type = 8 [default = E_VALUETYPE_UNKNOWN];
inline bool ParamFormat::has_value_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParamFormat::set_has_value_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParamFormat::clear_has_value_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParamFormat::clear_value_type() {
  value_type_ = 0;
  clear_has_value_type();
}
inline ::AAXValConfig::ParamFormat_EValueType ParamFormat::value_type() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.ParamFormat.value_type)
  return static_cast< ::AAXValConfig::ParamFormat_EValueType >(value_type_);
}
inline void ParamFormat::set_value_type(::AAXValConfig::ParamFormat_EValueType value) {
  assert(::AAXValConfig::ParamFormat_EValueType_IsValid(value));
  set_has_value_type();
  value_type_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.ParamFormat.value_type)
}

// optional string units = 9 [default = ""];
inline bool ParamFormat::has_units() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParamFormat::set_has_units() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParamFormat::clear_has_units() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParamFormat::clear_units() {
  units_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_units();
}
inline const ::std::string& ParamFormat::units() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.ParamFormat.units)
  return units_.GetNoArena();
}
inline void ParamFormat::set_units(const ::std::string& value) {
  set_has_units();
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.ParamFormat.units)
}
#if LANG_CXX11
inline void ParamFormat::set_units(::std::string&& value) {
  set_has_units();
  units_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.ParamFormat.units)
}
#endif
inline void ParamFormat::set_units(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_units();
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.ParamFormat.units)
}
inline void ParamFormat::set_units(const char* value, size_t size) {
  set_has_units();
  units_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.ParamFormat.units)
}
inline ::std::string* ParamFormat::mutable_units() {
  set_has_units();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.ParamFormat.units)
  return units_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamFormat::release_units() {
  // @@protoc_insertion_point(field_release:AAXValConfig.ParamFormat.units)
  if (!has_units()) {
    return NULL;
  }
  clear_has_units();
  return units_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamFormat::set_allocated_units(::std::string* units) {
  if (units != NULL) {
    set_has_units();
  } else {
    clear_has_units();
  }
  units_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), units);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.ParamFormat.units)
}

// optional string value_format_id = 10;
inline bool ParamFormat::has_value_format_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParamFormat::set_has_value_format_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParamFormat::clear_has_value_format_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParamFormat::clear_value_format_id() {
  value_format_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value_format_id();
}
inline const ::std::string& ParamFormat::value_format_id() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.ParamFormat.value_format_id)
  return value_format_id_.GetNoArena();
}
inline void ParamFormat::set_value_format_id(const ::std::string& value) {
  set_has_value_format_id();
  value_format_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.ParamFormat.value_format_id)
}
#if LANG_CXX11
inline void ParamFormat::set_value_format_id(::std::string&& value) {
  set_has_value_format_id();
  value_format_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.ParamFormat.value_format_id)
}
#endif
inline void ParamFormat::set_value_format_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value_format_id();
  value_format_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.ParamFormat.value_format_id)
}
inline void ParamFormat::set_value_format_id(const char* value, size_t size) {
  set_has_value_format_id();
  value_format_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.ParamFormat.value_format_id)
}
inline ::std::string* ParamFormat::mutable_value_format_id() {
  set_has_value_format_id();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.ParamFormat.value_format_id)
  return value_format_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParamFormat::release_value_format_id() {
  // @@protoc_insertion_point(field_release:AAXValConfig.ParamFormat.value_format_id)
  if (!has_value_format_id()) {
    return NULL;
  }
  clear_has_value_format_id();
  return value_format_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParamFormat::set_allocated_value_format_id(::std::string* value_format_id) {
  if (value_format_id != NULL) {
    set_has_value_format_id();
  } else {
    clear_has_value_format_id();
  }
  value_format_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value_format_id);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.ParamFormat.value_format_id)
}

// optional .AAXValConfig.ParamFormat.EDisplayLevel display_level = 11 [default = E_DISPLAYLEVEL_UNKNOWN];
inline bool ParamFormat::has_display_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParamFormat::set_has_display_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParamFormat::clear_has_display_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParamFormat::clear_display_level() {
  display_level_ = 0;
  clear_has_display_level();
}
inline ::AAXValConfig::ParamFormat_EDisplayLevel ParamFormat::display_level() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.ParamFormat.display_level)
  return static_cast< ::AAXValConfig::ParamFormat_EDisplayLevel >(display_level_);
}
inline void ParamFormat::set_display_level(::AAXValConfig::ParamFormat_EDisplayLevel value) {
  assert(::AAXValConfig::ParamFormat_EDisplayLevel_IsValid(value));
  set_has_display_level();
  display_level_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.ParamFormat.display_level)
}

// -------------------------------------------------------------------

// EnumSInt32Format_ValuePair

// required sint32 value = 1;
inline bool EnumSInt32Format_ValuePair::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnumSInt32Format_ValuePair::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnumSInt32Format_ValuePair::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnumSInt32Format_ValuePair::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 EnumSInt32Format_ValuePair::value() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.EnumSInt32Format.ValuePair.value)
  return value_;
}
inline void EnumSInt32Format_ValuePair::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.EnumSInt32Format.ValuePair.value)
}

// repeated string description = 2;
inline int EnumSInt32Format_ValuePair::description_size() const {
  return description_.size();
}
inline void EnumSInt32Format_ValuePair::clear_description() {
  description_.Clear();
}
inline const ::std::string& EnumSInt32Format_ValuePair::description(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.EnumSInt32Format.ValuePair.description)
  return description_.Get(index);
}
inline ::std::string* EnumSInt32Format_ValuePair::mutable_description(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.EnumSInt32Format.ValuePair.description)
  return description_.Mutable(index);
}
inline void EnumSInt32Format_ValuePair::set_description(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.EnumSInt32Format.ValuePair.description)
  description_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EnumSInt32Format_ValuePair::set_description(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.EnumSInt32Format.ValuePair.description)
  description_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EnumSInt32Format_ValuePair::set_description(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.EnumSInt32Format.ValuePair.description)
}
inline void EnumSInt32Format_ValuePair::set_description(int index, const char* value, size_t size) {
  description_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.EnumSInt32Format.ValuePair.description)
}
inline ::std::string* EnumSInt32Format_ValuePair::add_description() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.EnumSInt32Format.ValuePair.description)
  return description_.Add();
}
inline void EnumSInt32Format_ValuePair::add_description(const ::std::string& value) {
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.EnumSInt32Format.ValuePair.description)
}
#if LANG_CXX11
inline void EnumSInt32Format_ValuePair::add_description(::std::string&& value) {
  description_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.EnumSInt32Format.ValuePair.description)
}
#endif
inline void EnumSInt32Format_ValuePair::add_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  description_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.EnumSInt32Format.ValuePair.description)
}
inline void EnumSInt32Format_ValuePair::add_description(const char* value, size_t size) {
  description_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.EnumSInt32Format.ValuePair.description)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
EnumSInt32Format_ValuePair::description() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.EnumSInt32Format.ValuePair.description)
  return description_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
EnumSInt32Format_ValuePair::mutable_description() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.EnumSInt32Format.ValuePair.description)
  return &description_;
}

// -------------------------------------------------------------------

// EnumSInt32Format

// required string id = 1;
inline bool EnumSInt32Format::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnumSInt32Format::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnumSInt32Format::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnumSInt32Format::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& EnumSInt32Format::id() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.EnumSInt32Format.id)
  return id_.GetNoArena();
}
inline void EnumSInt32Format::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValConfig.EnumSInt32Format.id)
}
#if LANG_CXX11
inline void EnumSInt32Format::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValConfig.EnumSInt32Format.id)
}
#endif
inline void EnumSInt32Format::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValConfig.EnumSInt32Format.id)
}
inline void EnumSInt32Format::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.EnumSInt32Format.id)
}
inline ::std::string* EnumSInt32Format::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:AAXValConfig.EnumSInt32Format.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnumSInt32Format::release_id() {
  // @@protoc_insertion_point(field_release:AAXValConfig.EnumSInt32Format.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnumSInt32Format::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AAXValConfig.EnumSInt32Format.id)
}

// repeated .AAXValConfig.EnumSInt32Format.ValuePair value_pair = 2;
inline int EnumSInt32Format::value_pair_size() const {
  return value_pair_.size();
}
inline void EnumSInt32Format::clear_value_pair() {
  value_pair_.Clear();
}
inline ::AAXValConfig::EnumSInt32Format_ValuePair* EnumSInt32Format::mutable_value_pair(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.EnumSInt32Format.value_pair)
  return value_pair_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::EnumSInt32Format_ValuePair >*
EnumSInt32Format::mutable_value_pair() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.EnumSInt32Format.value_pair)
  return &value_pair_;
}
inline const ::AAXValConfig::EnumSInt32Format_ValuePair& EnumSInt32Format::value_pair(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.EnumSInt32Format.value_pair)
  return value_pair_.Get(index);
}
inline ::AAXValConfig::EnumSInt32Format_ValuePair* EnumSInt32Format::add_value_pair() {
  // @@protoc_insertion_point(field_add:AAXValConfig.EnumSInt32Format.value_pair)
  return value_pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::EnumSInt32Format_ValuePair >&
EnumSInt32Format::value_pair() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.EnumSInt32Format.value_pair)
  return value_pair_;
}

// -------------------------------------------------------------------

// Constraints_System

// optional .AAXValConfig.Constraints.System.EType type = 1 [default = E_TYPE_UNKNOWN];
inline bool Constraints_System::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Constraints_System::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Constraints_System::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Constraints_System::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::AAXValConfig::Constraints_System_EType Constraints_System::type() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Constraints.System.type)
  return static_cast< ::AAXValConfig::Constraints_System_EType >(type_);
}
inline void Constraints_System::set_type(::AAXValConfig::Constraints_System_EType value) {
  assert(::AAXValConfig::Constraints_System_EType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Constraints.System.type)
}

// optional float min_version = 2;
inline bool Constraints_System::has_min_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Constraints_System::set_has_min_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Constraints_System::clear_has_min_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Constraints_System::clear_min_version() {
  min_version_ = 0;
  clear_has_min_version();
}
inline float Constraints_System::min_version() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Constraints.System.min_version)
  return min_version_;
}
inline void Constraints_System::set_min_version(float value) {
  set_has_min_version();
  min_version_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Constraints.System.min_version)
}

// optional float max_version = 3;
inline bool Constraints_System::has_max_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Constraints_System::set_has_max_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Constraints_System::clear_has_max_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Constraints_System::clear_max_version() {
  max_version_ = 0;
  clear_has_max_version();
}
inline float Constraints_System::max_version() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Constraints.System.max_version)
  return max_version_;
}
inline void Constraints_System::set_max_version(float value) {
  set_has_max_version();
  max_version_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Constraints.System.max_version)
}

// -------------------------------------------------------------------

// Constraints

// repeated .AAXValConfig.Constraints.System system = 1;
inline int Constraints::system_size() const {
  return system_.size();
}
inline void Constraints::clear_system() {
  system_.Clear();
}
inline ::AAXValConfig::Constraints_System* Constraints::mutable_system(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Constraints.system)
  return system_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Constraints_System >*
Constraints::mutable_system() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Constraints.system)
  return &system_;
}
inline const ::AAXValConfig::Constraints_System& Constraints::system(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Constraints.system)
  return system_.Get(index);
}
inline ::AAXValConfig::Constraints_System* Constraints::add_system() {
  // @@protoc_insertion_point(field_add:AAXValConfig.Constraints.system)
  return system_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValConfig::Constraints_System >&
Constraints::system() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Constraints.system)
  return system_;
}

// optional sint64 min_memory_bytes = 8;
inline bool Constraints::has_min_memory_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Constraints::set_has_min_memory_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Constraints::clear_has_min_memory_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Constraints::clear_min_memory_bytes() {
  min_memory_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_min_memory_bytes();
}
inline ::google::protobuf::int64 Constraints::min_memory_bytes() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Constraints.min_memory_bytes)
  return min_memory_bytes_;
}
inline void Constraints::set_min_memory_bytes(::google::protobuf::int64 value) {
  set_has_min_memory_bytes();
  min_memory_bytes_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Constraints.min_memory_bytes)
}

// optional sint64 max_memory_bytes = 9;
inline bool Constraints::has_max_memory_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Constraints::set_has_max_memory_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Constraints::clear_has_max_memory_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Constraints::clear_max_memory_bytes() {
  max_memory_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_max_memory_bytes();
}
inline ::google::protobuf::int64 Constraints::max_memory_bytes() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Constraints.max_memory_bytes)
  return max_memory_bytes_;
}
inline void Constraints::set_max_memory_bytes(::google::protobuf::int64 value) {
  set_has_max_memory_bytes();
  max_memory_bytes_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Constraints.max_memory_bytes)
}

// optional sint64 min_drive_bytes = 10;
inline bool Constraints::has_min_drive_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Constraints::set_has_min_drive_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Constraints::clear_has_min_drive_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Constraints::clear_min_drive_bytes() {
  min_drive_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_min_drive_bytes();
}
inline ::google::protobuf::int64 Constraints::min_drive_bytes() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Constraints.min_drive_bytes)
  return min_drive_bytes_;
}
inline void Constraints::set_min_drive_bytes(::google::protobuf::int64 value) {
  set_has_min_drive_bytes();
  min_drive_bytes_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Constraints.min_drive_bytes)
}

// optional sint64 max_drive_bytes = 11;
inline bool Constraints::has_max_drive_bytes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Constraints::set_has_max_drive_bytes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Constraints::clear_has_max_drive_bytes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Constraints::clear_max_drive_bytes() {
  max_drive_bytes_ = GOOGLE_LONGLONG(0);
  clear_has_max_drive_bytes();
}
inline ::google::protobuf::int64 Constraints::max_drive_bytes() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Constraints.max_drive_bytes)
  return max_drive_bytes_;
}
inline void Constraints::set_max_drive_bytes(::google::protobuf::int64 value) {
  set_has_max_drive_bytes();
  max_drive_bytes_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Constraints.max_drive_bytes)
}

// optional sint64 min_cpu_cores = 12;
inline bool Constraints::has_min_cpu_cores() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Constraints::set_has_min_cpu_cores() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Constraints::clear_has_min_cpu_cores() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Constraints::clear_min_cpu_cores() {
  min_cpu_cores_ = GOOGLE_LONGLONG(0);
  clear_has_min_cpu_cores();
}
inline ::google::protobuf::int64 Constraints::min_cpu_cores() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Constraints.min_cpu_cores)
  return min_cpu_cores_;
}
inline void Constraints::set_min_cpu_cores(::google::protobuf::int64 value) {
  set_has_min_cpu_cores();
  min_cpu_cores_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Constraints.min_cpu_cores)
}

// optional sint64 max_cpu_cores = 13;
inline bool Constraints::has_max_cpu_cores() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Constraints::set_has_max_cpu_cores() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Constraints::clear_has_max_cpu_cores() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Constraints::clear_max_cpu_cores() {
  max_cpu_cores_ = GOOGLE_LONGLONG(0);
  clear_has_max_cpu_cores();
}
inline ::google::protobuf::int64 Constraints::max_cpu_cores() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Constraints.max_cpu_cores)
  return max_cpu_cores_;
}
inline void Constraints::set_max_cpu_cores(::google::protobuf::int64 value) {
  set_has_max_cpu_cores();
  max_cpu_cores_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Constraints.max_cpu_cores)
}

// optional sint64 min_cpu_core_hz = 14;
inline bool Constraints::has_min_cpu_core_hz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Constraints::set_has_min_cpu_core_hz() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Constraints::clear_has_min_cpu_core_hz() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Constraints::clear_min_cpu_core_hz() {
  min_cpu_core_hz_ = GOOGLE_LONGLONG(0);
  clear_has_min_cpu_core_hz();
}
inline ::google::protobuf::int64 Constraints::min_cpu_core_hz() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Constraints.min_cpu_core_hz)
  return min_cpu_core_hz_;
}
inline void Constraints::set_min_cpu_core_hz(::google::protobuf::int64 value) {
  set_has_min_cpu_core_hz();
  min_cpu_core_hz_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Constraints.min_cpu_core_hz)
}

// optional sint64 max_cpu_core_hz = 15;
inline bool Constraints::has_max_cpu_core_hz() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Constraints::set_has_max_cpu_core_hz() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Constraints::clear_has_max_cpu_core_hz() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Constraints::clear_max_cpu_core_hz() {
  max_cpu_core_hz_ = GOOGLE_LONGLONG(0);
  clear_has_max_cpu_core_hz();
}
inline ::google::protobuf::int64 Constraints::max_cpu_core_hz() const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Constraints.max_cpu_core_hz)
  return max_cpu_core_hz_;
}
inline void Constraints::set_max_cpu_core_hz(::google::protobuf::int64 value) {
  set_has_max_cpu_core_hz();
  max_cpu_core_hz_ = value;
  // @@protoc_insertion_point(field_set:AAXValConfig.Constraints.max_cpu_core_hz)
}

// -------------------------------------------------------------------

// Arguments

// repeated string elem = 1;
inline int Arguments::elem_size() const {
  return elem_.size();
}
inline void Arguments::clear_elem() {
  elem_.Clear();
}
inline const ::std::string& Arguments::elem(int index) const {
  // @@protoc_insertion_point(field_get:AAXValConfig.Arguments.elem)
  return elem_.Get(index);
}
inline ::std::string* Arguments::mutable_elem(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValConfig.Arguments.elem)
  return elem_.Mutable(index);
}
inline void Arguments::set_elem(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Arguments.elem)
  elem_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Arguments::set_elem(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValConfig.Arguments.elem)
  elem_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Arguments::set_elem(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  elem_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValConfig.Arguments.elem)
}
inline void Arguments::set_elem(int index, const char* value, size_t size) {
  elem_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValConfig.Arguments.elem)
}
inline ::std::string* Arguments::add_elem() {
  // @@protoc_insertion_point(field_add_mutable:AAXValConfig.Arguments.elem)
  return elem_.Add();
}
inline void Arguments::add_elem(const ::std::string& value) {
  elem_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValConfig.Arguments.elem)
}
#if LANG_CXX11
inline void Arguments::add_elem(::std::string&& value) {
  elem_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValConfig.Arguments.elem)
}
#endif
inline void Arguments::add_elem(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  elem_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValConfig.Arguments.elem)
}
inline void Arguments::add_elem(const char* value, size_t size) {
  elem_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValConfig.Arguments.elem)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Arguments::elem() const {
  // @@protoc_insertion_point(field_list:AAXValConfig.Arguments.elem)
  return elem_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Arguments::mutable_elem() {
  // @@protoc_insertion_point(field_mutable_list:AAXValConfig.Arguments.elem)
  return &elem_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AAXValConfig

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::AAXValConfig::Test_Condition_EConditionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AAXValConfig::Test_Condition_EConditionType>() {
  return ::AAXValConfig::Test_Condition_EConditionType_descriptor();
}
template <> struct is_proto_enum< ::AAXValConfig::Process_PlatformProcess_EPlatform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AAXValConfig::Process_PlatformProcess_EPlatform>() {
  return ::AAXValConfig::Process_PlatformProcess_EPlatform_descriptor();
}
template <> struct is_proto_enum< ::AAXValConfig::ParamFormat_EValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AAXValConfig::ParamFormat_EValueType>() {
  return ::AAXValConfig::ParamFormat_EValueType_descriptor();
}
template <> struct is_proto_enum< ::AAXValConfig::ParamFormat_EDisplayLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AAXValConfig::ParamFormat_EDisplayLevel>() {
  return ::AAXValConfig::ParamFormat_EDisplayLevel_descriptor();
}
template <> struct is_proto_enum< ::AAXValConfig::Constraints_System_EType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AAXValConfig::Constraints_System_EType>() {
  return ::AAXValConfig::Constraints_System_EType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_AAXValidator_5fConfig_2eproto
