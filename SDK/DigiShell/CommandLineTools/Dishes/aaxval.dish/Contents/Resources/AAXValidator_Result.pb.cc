// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AAXValidator_Result.proto

#include "AAXValidator_Result.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_AAXValidator_5fResult_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AAXValidator_5fResult_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DataTree;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AAXValidator_5fResult_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SingleTestResult_PerformanceData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AAXValidator_5fResult_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SingleTestResult_Triad;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AAXValidator_5fResult_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Summary;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AAXValidator_5fResult_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SingleTestResult_TestConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_AAXValidator_5fResult_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_SingleTestResult;
}  // namespace protobuf_AAXValidator_5fResult_2eproto
namespace AAXValResult {
class DataTreeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataTree>
      _instance;
} _DataTree_default_instance_;
class ResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Result>
      _instance;
} _Result_default_instance_;
class SingleTestResult_TriadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingleTestResult_Triad>
      _instance;
} _SingleTestResult_Triad_default_instance_;
class SingleTestResult_TestConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingleTestResult_TestConfig>
      _instance;
} _SingleTestResult_TestConfig_default_instance_;
class SingleTestResult_PerformanceDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingleTestResult_PerformanceData>
      _instance;
} _SingleTestResult_PerformanceData_default_instance_;
class SingleTestResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SingleTestResult>
      _instance;
} _SingleTestResult_default_instance_;
class SummaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Summary>
      _instance;
} _Summary_default_instance_;
}  // namespace AAXValResult
namespace protobuf_AAXValidator_5fResult_2eproto {
static void InitDefaultsDataTree() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AAXValResult::_DataTree_default_instance_;
    new (ptr) ::AAXValResult::DataTree();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AAXValResult::DataTree::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataTree =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataTree}, {}};

static void InitDefaultsResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AAXValResult::_Result_default_instance_;
    new (ptr) ::AAXValResult::Result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AAXValResult::Result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Result =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsResult}, {
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_SingleTestResult.base,
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_Summary.base,}};

static void InitDefaultsSingleTestResult_Triad() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AAXValResult::_SingleTestResult_Triad_default_instance_;
    new (ptr) ::AAXValResult::SingleTestResult_Triad();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AAXValResult::SingleTestResult_Triad::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SingleTestResult_Triad =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSingleTestResult_Triad}, {}};

static void InitDefaultsSingleTestResult_TestConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AAXValResult::_SingleTestResult_TestConfig_default_instance_;
    new (ptr) ::AAXValResult::SingleTestResult_TestConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AAXValResult::SingleTestResult_TestConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SingleTestResult_TestConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSingleTestResult_TestConfig}, {
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_DataTree.base,}};

static void InitDefaultsSingleTestResult_PerformanceData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AAXValResult::_SingleTestResult_PerformanceData_default_instance_;
    new (ptr) ::AAXValResult::SingleTestResult_PerformanceData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AAXValResult::SingleTestResult_PerformanceData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SingleTestResult_PerformanceData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSingleTestResult_PerformanceData}, {}};

static void InitDefaultsSingleTestResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AAXValResult::_SingleTestResult_default_instance_;
    new (ptr) ::AAXValResult::SingleTestResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AAXValResult::SingleTestResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_SingleTestResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsSingleTestResult}, {
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_SingleTestResult_Triad.base,
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_SingleTestResult_TestConfig.base,
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_SingleTestResult_PerformanceData.base,
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_DataTree.base,}};

static void InitDefaultsSummary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AAXValResult::_Summary_default_instance_;
    new (ptr) ::AAXValResult::Summary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AAXValResult::Summary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Summary =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSummary}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DataTree.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Result.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SingleTestResult_Triad.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SingleTestResult_TestConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SingleTestResult_PerformanceData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SingleTestResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Summary.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::DataTree, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::DataTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::DataTree, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::DataTree, tree_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::Result, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::Result, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::Result, summary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::Result, result_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::Result, connection_id_),
  ~0u,
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_Triad, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_Triad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_Triad, manufacture_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_Triad, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_Triad, plugin_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_TestConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_TestConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_TestConfig, tree_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_PerformanceData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_PerformanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_PerformanceData, started_wall_clock_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_PerformanceData, elapsed_time_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_PerformanceData, average_ms_per_iteration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_PerformanceData, max_ms_per_iteration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_PerformanceData, cpu_usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult_PerformanceData, mem_usage_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult, effect_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult, triad_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult, test_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult, performance_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult, logs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::SingleTestResult, tree_),
  0,
  1,
  2,
  4,
  3,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::Summary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::Summary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::Summary, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::Summary, failed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::Summary, successful_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AAXValResult::Summary, not_run_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::AAXValResult::DataTree)},
  { 9, 18, sizeof(::AAXValResult::Result)},
  { 22, 30, sizeof(::AAXValResult::SingleTestResult_Triad)},
  { 33, 39, sizeof(::AAXValResult::SingleTestResult_TestConfig)},
  { 40, 51, sizeof(::AAXValResult::SingleTestResult_PerformanceData)},
  { 57, 69, sizeof(::AAXValResult::SingleTestResult)},
  { 76, 85, sizeof(::AAXValResult::Summary)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::AAXValResult::_DataTree_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AAXValResult::_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AAXValResult::_SingleTestResult_Triad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AAXValResult::_SingleTestResult_TestConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AAXValResult::_SingleTestResult_PerformanceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AAXValResult::_SingleTestResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::AAXValResult::_Summary_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "AAXValidator_Result.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031AAXValidator_Result.proto\022\014AAXValResul"
      "t\">\n\010DataTree\022\014\n\004data\030\001 \001(\t\022$\n\004tree\030\002 \003("
      "\0132\026.AAXValResult.DataTree\"\303\001\n\006Result\022.\n\006"
      "result\030\001 \003(\0132\036.AAXValResult.SingleTestRe"
      "sult\022&\n\007summary\030\002 \001(\0132\025.AAXValResult.Sum"
      "mary\022J\n\rresult_status\030\003 \001(\0162\033.AAXValResu"
      "lt.EResultStatus:\026E_RESULTSTATUS_UNKNOWN"
      "\022\025\n\rconnection_id\030\004 \001(\004\"\332\004\n\020SingleTestRe"
      "sult\022\021\n\teffect_id\030\001 \001(\t\0226\n\010triad_id\030\002 \001("
      "\0132$.AAXValResult.SingleTestResult.Triad\022"
      ">\n\013test_config\030\003 \001(\0132).AAXValResult.Sing"
      "leTestResult.TestConfig\022\r\n\005score\030\005 \001(\002\022H"
      "\n\020performance_data\030\006 \001(\0132..AAXValResult."
      "SingleTestResult.PerformanceData\022\014\n\004logs"
      "\030\t \003(\t\022$\n\004tree\030\n \003(\0132\026.AAXValResult.Data"
      "Tree\032F\n\005Triad\022\026\n\016manufacture_id\030\001 \002(\r\022\022\n"
      "\nproduct_id\030\002 \002(\r\022\021\n\tplugin_id\030\003 \002(\r\0322\n\n"
      "TestConfig\022$\n\004tree\030\001 \003(\0132\026.AAXValResult."
      "DataTree\032\261\001\n\017PerformanceData\022\036\n\026started_"
      "wall_clock_sec\030\001 \001(\002\022\030\n\020elapsed_time_sec"
      "\030\002 \001(\002\022 \n\030average_ms_per_iteration\030\003 \001(\002"
      "\022\034\n\024max_ms_per_iteration\030\004 \001(\002\022\021\n\tcpu_us"
      "age\030\007 \001(\002\022\021\n\tmem_usage\030\010 \001(\002\"M\n\007Summary\022"
      "\r\n\005total\030\001 \001(\021\022\016\n\006failed\030\002 \001(\021\022\022\n\nsucces"
      "sful\030\003 \001(\021\022\017\n\007not_run\030\005 \001(\021*\221\001\n\rEResultS"
      "tatus\022\032\n\026E_RESULTSTATUS_UNKNOWN\020\000\022\024\n\020E_C"
      "OMPLETED_PASS\020\001\022\024\n\020E_COMPLETED_FAIL\020\002\022\n\n"
      "\006E_LOST\020\004\022\r\n\tE_TIMEOUT\020\005\022\r\n\tE_ABORTED\020\006\022"
      "\016\n\nE_CANCELED\020\007"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AAXValidator_Result.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_AAXValidator_5fResult_2eproto
namespace AAXValResult {
const ::google::protobuf::EnumDescriptor* EResultStatus_descriptor() {
  protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_AAXValidator_5fResult_2eproto::file_level_enum_descriptors[0];
}
bool EResultStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DataTree::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataTree::kDataFieldNumber;
const int DataTree::kTreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataTree::DataTree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_DataTree.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AAXValResult.DataTree)
}
DataTree::DataTree(const DataTree& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tree_(from.tree_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:AAXValResult.DataTree)
}

void DataTree::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DataTree::~DataTree() {
  // @@protoc_insertion_point(destructor:AAXValResult.DataTree)
  SharedDtor();
}

void DataTree::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataTree::descriptor() {
  ::protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataTree& DataTree::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AAXValidator_5fResult_2eproto::scc_info_DataTree.base);
  return *internal_default_instance();
}


void DataTree::Clear() {
// @@protoc_insertion_point(message_clear_start:AAXValResult.DataTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tree_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AAXValResult.DataTree)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AAXValResult.DataTree.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AAXValResult.DataTree tree = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tree()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AAXValResult.DataTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AAXValResult.DataTree)
  return false;
#undef DO_
}

void DataTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AAXValResult.DataTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AAXValResult.DataTree.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->data(), output);
  }

  // repeated .AAXValResult.DataTree tree = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tree_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tree(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AAXValResult.DataTree)
}

::google::protobuf::uint8* DataTree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AAXValResult.DataTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AAXValResult.DataTree.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  // repeated .AAXValResult.DataTree tree = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tree_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tree(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AAXValResult.DataTree)
  return target;
}

size_t DataTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AAXValResult.DataTree)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .AAXValResult.DataTree tree = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tree_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tree(static_cast<int>(i)));
    }
  }

  // optional string data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataTree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AAXValResult.DataTree)
  GOOGLE_DCHECK_NE(&from, this);
  const DataTree* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataTree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AAXValResult.DataTree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AAXValResult.DataTree)
    MergeFrom(*source);
  }
}

void DataTree::MergeFrom(const DataTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AAXValResult.DataTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tree_.MergeFrom(from.tree_);
  if (from.has_data()) {
    set_has_data();
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void DataTree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AAXValResult.DataTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataTree::CopyFrom(const DataTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AAXValResult.DataTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataTree::IsInitialized() const {
  return true;
}

void DataTree::Swap(DataTree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataTree::InternalSwap(DataTree* other) {
  using std::swap;
  CastToBase(&tree_)->InternalSwap(CastToBase(&other->tree_));
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataTree::GetMetadata() const {
  protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Result::InitAsDefaultInstance() {
  ::AAXValResult::_Result_default_instance_._instance.get_mutable()->summary_ = const_cast< ::AAXValResult::Summary*>(
      ::AAXValResult::Summary::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kResultFieldNumber;
const int Result::kSummaryFieldNumber;
const int Result::kResultStatusFieldNumber;
const int Result::kConnectionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_Result.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AAXValResult.Result)
}
Result::Result(const Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      result_(from.result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_summary()) {
    summary_ = new ::AAXValResult::Summary(*from.summary_);
  } else {
    summary_ = NULL;
  }
  ::memcpy(&connection_id_, &from.connection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_status_) -
    reinterpret_cast<char*>(&connection_id_)) + sizeof(result_status_));
  // @@protoc_insertion_point(copy_constructor:AAXValResult.Result)
}

void Result::SharedCtor() {
  ::memset(&summary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_status_) -
      reinterpret_cast<char*>(&summary_)) + sizeof(result_status_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:AAXValResult.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (this != internal_default_instance()) delete summary_;
}

void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  ::protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Result& Result::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AAXValidator_5fResult_2eproto::scc_info_Result.base);
  return *internal_default_instance();
}


void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:AAXValResult.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(summary_ != NULL);
    summary_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&connection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_status_) -
        reinterpret_cast<char*>(&connection_id_)) + sizeof(result_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AAXValResult.Result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AAXValResult.SingleTestResult result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AAXValResult.Summary summary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AAXValResult.EResultStatus result_status = 3 [default = E_RESULTSTATUS_UNKNOWN];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AAXValResult::EResultStatus_IsValid(value)) {
            set_result_status(static_cast< ::AAXValResult::EResultStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 connection_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AAXValResult.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AAXValResult.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AAXValResult.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AAXValResult.SingleTestResult result = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->result(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .AAXValResult.Summary summary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_summary(), output);
  }

  // optional .AAXValResult.EResultStatus result_status = 3 [default = E_RESULTSTATUS_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result_status(), output);
  }

  // optional uint64 connection_id = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->connection_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AAXValResult.Result)
}

::google::protobuf::uint8* Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AAXValResult.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AAXValResult.SingleTestResult result = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->result(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .AAXValResult.Summary summary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_summary(), deterministic, target);
  }

  // optional .AAXValResult.EResultStatus result_status = 3 [default = E_RESULTSTATUS_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result_status(), target);
  }

  // optional uint64 connection_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->connection_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AAXValResult.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AAXValResult.Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .AAXValResult.SingleTestResult result = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->result_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->result(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .AAXValResult.Summary summary = 2;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *summary_);
    }

    // optional uint64 connection_id = 4;
    if (has_connection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->connection_id());
    }

    // optional .AAXValResult.EResultStatus result_status = 3 [default = E_RESULTSTATUS_UNKNOWN];
    if (has_result_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AAXValResult.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AAXValResult.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AAXValResult.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AAXValResult.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_summary()->::AAXValResult::Summary::MergeFrom(from.summary());
    }
    if (cached_has_bits & 0x00000002u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_status_ = from.result_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AAXValResult.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AAXValResult.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->result())) return false;
  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  using std::swap;
  CastToBase(&result_)->InternalSwap(CastToBase(&other->result_));
  swap(summary_, other->summary_);
  swap(connection_id_, other->connection_id_);
  swap(result_status_, other->result_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SingleTestResult_Triad::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleTestResult_Triad::kManufactureIdFieldNumber;
const int SingleTestResult_Triad::kProductIdFieldNumber;
const int SingleTestResult_Triad::kPluginIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleTestResult_Triad::SingleTestResult_Triad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_SingleTestResult_Triad.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AAXValResult.SingleTestResult.Triad)
}
SingleTestResult_Triad::SingleTestResult_Triad(const SingleTestResult_Triad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manufacture_id_, &from.manufacture_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&plugin_id_) -
    reinterpret_cast<char*>(&manufacture_id_)) + sizeof(plugin_id_));
  // @@protoc_insertion_point(copy_constructor:AAXValResult.SingleTestResult.Triad)
}

void SingleTestResult_Triad::SharedCtor() {
  ::memset(&manufacture_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plugin_id_) -
      reinterpret_cast<char*>(&manufacture_id_)) + sizeof(plugin_id_));
}

SingleTestResult_Triad::~SingleTestResult_Triad() {
  // @@protoc_insertion_point(destructor:AAXValResult.SingleTestResult.Triad)
  SharedDtor();
}

void SingleTestResult_Triad::SharedDtor() {
}

void SingleTestResult_Triad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SingleTestResult_Triad::descriptor() {
  ::protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleTestResult_Triad& SingleTestResult_Triad::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AAXValidator_5fResult_2eproto::scc_info_SingleTestResult_Triad.base);
  return *internal_default_instance();
}


void SingleTestResult_Triad::Clear() {
// @@protoc_insertion_point(message_clear_start:AAXValResult.SingleTestResult.Triad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&manufacture_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&plugin_id_) -
        reinterpret_cast<char*>(&manufacture_id_)) + sizeof(plugin_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SingleTestResult_Triad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AAXValResult.SingleTestResult.Triad)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 manufacture_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_manufacture_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manufacture_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 product_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_product_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 plugin_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_plugin_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plugin_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AAXValResult.SingleTestResult.Triad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AAXValResult.SingleTestResult.Triad)
  return false;
#undef DO_
}

void SingleTestResult_Triad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AAXValResult.SingleTestResult.Triad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 manufacture_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manufacture_id(), output);
  }

  // required uint32 product_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->product_id(), output);
  }

  // required uint32 plugin_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->plugin_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AAXValResult.SingleTestResult.Triad)
}

::google::protobuf::uint8* SingleTestResult_Triad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AAXValResult.SingleTestResult.Triad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 manufacture_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manufacture_id(), target);
  }

  // required uint32 product_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->product_id(), target);
  }

  // required uint32 plugin_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->plugin_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AAXValResult.SingleTestResult.Triad)
  return target;
}

size_t SingleTestResult_Triad::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AAXValResult.SingleTestResult.Triad)
  size_t total_size = 0;

  if (has_manufacture_id()) {
    // required uint32 manufacture_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->manufacture_id());
  }

  if (has_product_id()) {
    // required uint32 product_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->product_id());
  }

  if (has_plugin_id()) {
    // required uint32 plugin_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->plugin_id());
  }

  return total_size;
}
size_t SingleTestResult_Triad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AAXValResult.SingleTestResult.Triad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 manufacture_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->manufacture_id());

    // required uint32 product_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->product_id());

    // required uint32 plugin_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->plugin_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleTestResult_Triad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AAXValResult.SingleTestResult.Triad)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleTestResult_Triad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleTestResult_Triad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AAXValResult.SingleTestResult.Triad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AAXValResult.SingleTestResult.Triad)
    MergeFrom(*source);
  }
}

void SingleTestResult_Triad::MergeFrom(const SingleTestResult_Triad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AAXValResult.SingleTestResult.Triad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      manufacture_id_ = from.manufacture_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      product_id_ = from.product_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      plugin_id_ = from.plugin_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SingleTestResult_Triad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AAXValResult.SingleTestResult.Triad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleTestResult_Triad::CopyFrom(const SingleTestResult_Triad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AAXValResult.SingleTestResult.Triad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTestResult_Triad::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SingleTestResult_Triad::Swap(SingleTestResult_Triad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleTestResult_Triad::InternalSwap(SingleTestResult_Triad* other) {
  using std::swap;
  swap(manufacture_id_, other->manufacture_id_);
  swap(product_id_, other->product_id_);
  swap(plugin_id_, other->plugin_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SingleTestResult_Triad::GetMetadata() const {
  protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SingleTestResult_TestConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleTestResult_TestConfig::kTreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleTestResult_TestConfig::SingleTestResult_TestConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_SingleTestResult_TestConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AAXValResult.SingleTestResult.TestConfig)
}
SingleTestResult_TestConfig::SingleTestResult_TestConfig(const SingleTestResult_TestConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tree_(from.tree_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AAXValResult.SingleTestResult.TestConfig)
}

void SingleTestResult_TestConfig::SharedCtor() {
}

SingleTestResult_TestConfig::~SingleTestResult_TestConfig() {
  // @@protoc_insertion_point(destructor:AAXValResult.SingleTestResult.TestConfig)
  SharedDtor();
}

void SingleTestResult_TestConfig::SharedDtor() {
}

void SingleTestResult_TestConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SingleTestResult_TestConfig::descriptor() {
  ::protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleTestResult_TestConfig& SingleTestResult_TestConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AAXValidator_5fResult_2eproto::scc_info_SingleTestResult_TestConfig.base);
  return *internal_default_instance();
}


void SingleTestResult_TestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:AAXValResult.SingleTestResult.TestConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tree_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SingleTestResult_TestConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AAXValResult.SingleTestResult.TestConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AAXValResult.DataTree tree = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tree()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AAXValResult.SingleTestResult.TestConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AAXValResult.SingleTestResult.TestConfig)
  return false;
#undef DO_
}

void SingleTestResult_TestConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AAXValResult.SingleTestResult.TestConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AAXValResult.DataTree tree = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tree_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tree(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AAXValResult.SingleTestResult.TestConfig)
}

::google::protobuf::uint8* SingleTestResult_TestConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AAXValResult.SingleTestResult.TestConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AAXValResult.DataTree tree = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tree_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tree(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AAXValResult.SingleTestResult.TestConfig)
  return target;
}

size_t SingleTestResult_TestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AAXValResult.SingleTestResult.TestConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .AAXValResult.DataTree tree = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tree_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tree(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleTestResult_TestConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AAXValResult.SingleTestResult.TestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleTestResult_TestConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleTestResult_TestConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AAXValResult.SingleTestResult.TestConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AAXValResult.SingleTestResult.TestConfig)
    MergeFrom(*source);
  }
}

void SingleTestResult_TestConfig::MergeFrom(const SingleTestResult_TestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AAXValResult.SingleTestResult.TestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tree_.MergeFrom(from.tree_);
}

void SingleTestResult_TestConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AAXValResult.SingleTestResult.TestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleTestResult_TestConfig::CopyFrom(const SingleTestResult_TestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AAXValResult.SingleTestResult.TestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTestResult_TestConfig::IsInitialized() const {
  return true;
}

void SingleTestResult_TestConfig::Swap(SingleTestResult_TestConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleTestResult_TestConfig::InternalSwap(SingleTestResult_TestConfig* other) {
  using std::swap;
  CastToBase(&tree_)->InternalSwap(CastToBase(&other->tree_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SingleTestResult_TestConfig::GetMetadata() const {
  protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SingleTestResult_PerformanceData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleTestResult_PerformanceData::kStartedWallClockSecFieldNumber;
const int SingleTestResult_PerformanceData::kElapsedTimeSecFieldNumber;
const int SingleTestResult_PerformanceData::kAverageMsPerIterationFieldNumber;
const int SingleTestResult_PerformanceData::kMaxMsPerIterationFieldNumber;
const int SingleTestResult_PerformanceData::kCpuUsageFieldNumber;
const int SingleTestResult_PerformanceData::kMemUsageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleTestResult_PerformanceData::SingleTestResult_PerformanceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_SingleTestResult_PerformanceData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AAXValResult.SingleTestResult.PerformanceData)
}
SingleTestResult_PerformanceData::SingleTestResult_PerformanceData(const SingleTestResult_PerformanceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&started_wall_clock_sec_, &from.started_wall_clock_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_usage_) -
    reinterpret_cast<char*>(&started_wall_clock_sec_)) + sizeof(mem_usage_));
  // @@protoc_insertion_point(copy_constructor:AAXValResult.SingleTestResult.PerformanceData)
}

void SingleTestResult_PerformanceData::SharedCtor() {
  ::memset(&started_wall_clock_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_usage_) -
      reinterpret_cast<char*>(&started_wall_clock_sec_)) + sizeof(mem_usage_));
}

SingleTestResult_PerformanceData::~SingleTestResult_PerformanceData() {
  // @@protoc_insertion_point(destructor:AAXValResult.SingleTestResult.PerformanceData)
  SharedDtor();
}

void SingleTestResult_PerformanceData::SharedDtor() {
}

void SingleTestResult_PerformanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SingleTestResult_PerformanceData::descriptor() {
  ::protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleTestResult_PerformanceData& SingleTestResult_PerformanceData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AAXValidator_5fResult_2eproto::scc_info_SingleTestResult_PerformanceData.base);
  return *internal_default_instance();
}


void SingleTestResult_PerformanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:AAXValResult.SingleTestResult.PerformanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&started_wall_clock_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mem_usage_) -
        reinterpret_cast<char*>(&started_wall_clock_sec_)) + sizeof(mem_usage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SingleTestResult_PerformanceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AAXValResult.SingleTestResult.PerformanceData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float started_wall_clock_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_started_wall_clock_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &started_wall_clock_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float elapsed_time_sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_elapsed_time_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elapsed_time_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float average_ms_per_iteration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_average_ms_per_iteration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_ms_per_iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_ms_per_iteration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_max_ms_per_iteration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_ms_per_iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cpu_usage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_cpu_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mem_usage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_mem_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mem_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AAXValResult.SingleTestResult.PerformanceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AAXValResult.SingleTestResult.PerformanceData)
  return false;
#undef DO_
}

void SingleTestResult_PerformanceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AAXValResult.SingleTestResult.PerformanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float started_wall_clock_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->started_wall_clock_sec(), output);
  }

  // optional float elapsed_time_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->elapsed_time_sec(), output);
  }

  // optional float average_ms_per_iteration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->average_ms_per_iteration(), output);
  }

  // optional float max_ms_per_iteration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_ms_per_iteration(), output);
  }

  // optional float cpu_usage = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cpu_usage(), output);
  }

  // optional float mem_usage = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->mem_usage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AAXValResult.SingleTestResult.PerformanceData)
}

::google::protobuf::uint8* SingleTestResult_PerformanceData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AAXValResult.SingleTestResult.PerformanceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float started_wall_clock_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->started_wall_clock_sec(), target);
  }

  // optional float elapsed_time_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->elapsed_time_sec(), target);
  }

  // optional float average_ms_per_iteration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->average_ms_per_iteration(), target);
  }

  // optional float max_ms_per_iteration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_ms_per_iteration(), target);
  }

  // optional float cpu_usage = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cpu_usage(), target);
  }

  // optional float mem_usage = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->mem_usage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AAXValResult.SingleTestResult.PerformanceData)
  return target;
}

size_t SingleTestResult_PerformanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AAXValResult.SingleTestResult.PerformanceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional float started_wall_clock_sec = 1;
    if (has_started_wall_clock_sec()) {
      total_size += 1 + 4;
    }

    // optional float elapsed_time_sec = 2;
    if (has_elapsed_time_sec()) {
      total_size += 1 + 4;
    }

    // optional float average_ms_per_iteration = 3;
    if (has_average_ms_per_iteration()) {
      total_size += 1 + 4;
    }

    // optional float max_ms_per_iteration = 4;
    if (has_max_ms_per_iteration()) {
      total_size += 1 + 4;
    }

    // optional float cpu_usage = 7;
    if (has_cpu_usage()) {
      total_size += 1 + 4;
    }

    // optional float mem_usage = 8;
    if (has_mem_usage()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleTestResult_PerformanceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AAXValResult.SingleTestResult.PerformanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleTestResult_PerformanceData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleTestResult_PerformanceData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AAXValResult.SingleTestResult.PerformanceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AAXValResult.SingleTestResult.PerformanceData)
    MergeFrom(*source);
  }
}

void SingleTestResult_PerformanceData::MergeFrom(const SingleTestResult_PerformanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AAXValResult.SingleTestResult.PerformanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      started_wall_clock_sec_ = from.started_wall_clock_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      elapsed_time_sec_ = from.elapsed_time_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      average_ms_per_iteration_ = from.average_ms_per_iteration_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_ms_per_iteration_ = from.max_ms_per_iteration_;
    }
    if (cached_has_bits & 0x00000010u) {
      cpu_usage_ = from.cpu_usage_;
    }
    if (cached_has_bits & 0x00000020u) {
      mem_usage_ = from.mem_usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SingleTestResult_PerformanceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AAXValResult.SingleTestResult.PerformanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleTestResult_PerformanceData::CopyFrom(const SingleTestResult_PerformanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AAXValResult.SingleTestResult.PerformanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTestResult_PerformanceData::IsInitialized() const {
  return true;
}

void SingleTestResult_PerformanceData::Swap(SingleTestResult_PerformanceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleTestResult_PerformanceData::InternalSwap(SingleTestResult_PerformanceData* other) {
  using std::swap;
  swap(started_wall_clock_sec_, other->started_wall_clock_sec_);
  swap(elapsed_time_sec_, other->elapsed_time_sec_);
  swap(average_ms_per_iteration_, other->average_ms_per_iteration_);
  swap(max_ms_per_iteration_, other->max_ms_per_iteration_);
  swap(cpu_usage_, other->cpu_usage_);
  swap(mem_usage_, other->mem_usage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SingleTestResult_PerformanceData::GetMetadata() const {
  protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SingleTestResult::InitAsDefaultInstance() {
  ::AAXValResult::_SingleTestResult_default_instance_._instance.get_mutable()->triad_id_ = const_cast< ::AAXValResult::SingleTestResult_Triad*>(
      ::AAXValResult::SingleTestResult_Triad::internal_default_instance());
  ::AAXValResult::_SingleTestResult_default_instance_._instance.get_mutable()->test_config_ = const_cast< ::AAXValResult::SingleTestResult_TestConfig*>(
      ::AAXValResult::SingleTestResult_TestConfig::internal_default_instance());
  ::AAXValResult::_SingleTestResult_default_instance_._instance.get_mutable()->performance_data_ = const_cast< ::AAXValResult::SingleTestResult_PerformanceData*>(
      ::AAXValResult::SingleTestResult_PerformanceData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SingleTestResult::kEffectIdFieldNumber;
const int SingleTestResult::kTriadIdFieldNumber;
const int SingleTestResult::kTestConfigFieldNumber;
const int SingleTestResult::kScoreFieldNumber;
const int SingleTestResult::kPerformanceDataFieldNumber;
const int SingleTestResult::kLogsFieldNumber;
const int SingleTestResult::kTreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SingleTestResult::SingleTestResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_SingleTestResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AAXValResult.SingleTestResult)
}
SingleTestResult::SingleTestResult(const SingleTestResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      logs_(from.logs_),
      tree_(from.tree_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  effect_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_effect_id()) {
    effect_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.effect_id_);
  }
  if (from.has_triad_id()) {
    triad_id_ = new ::AAXValResult::SingleTestResult_Triad(*from.triad_id_);
  } else {
    triad_id_ = NULL;
  }
  if (from.has_test_config()) {
    test_config_ = new ::AAXValResult::SingleTestResult_TestConfig(*from.test_config_);
  } else {
    test_config_ = NULL;
  }
  if (from.has_performance_data()) {
    performance_data_ = new ::AAXValResult::SingleTestResult_PerformanceData(*from.performance_data_);
  } else {
    performance_data_ = NULL;
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:AAXValResult.SingleTestResult)
}

void SingleTestResult::SharedCtor() {
  effect_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&triad_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&triad_id_)) + sizeof(score_));
}

SingleTestResult::~SingleTestResult() {
  // @@protoc_insertion_point(destructor:AAXValResult.SingleTestResult)
  SharedDtor();
}

void SingleTestResult::SharedDtor() {
  effect_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete triad_id_;
  if (this != internal_default_instance()) delete test_config_;
  if (this != internal_default_instance()) delete performance_data_;
}

void SingleTestResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SingleTestResult::descriptor() {
  ::protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SingleTestResult& SingleTestResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AAXValidator_5fResult_2eproto::scc_info_SingleTestResult.base);
  return *internal_default_instance();
}


void SingleTestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:AAXValResult.SingleTestResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  tree_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      effect_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(triad_id_ != NULL);
      triad_id_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(test_config_ != NULL);
      test_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(performance_data_ != NULL);
      performance_data_->Clear();
    }
  }
  score_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SingleTestResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AAXValResult.SingleTestResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string effect_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effect_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->effect_id().data(), static_cast<int>(this->effect_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AAXValResult.SingleTestResult.effect_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AAXValResult.SingleTestResult.Triad triad_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_triad_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AAXValResult.SingleTestResult.TestConfig test_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_test_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AAXValResult.SingleTestResult.PerformanceData performance_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_performance_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string logs = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_logs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logs(this->logs_size() - 1).data(),
            static_cast<int>(this->logs(this->logs_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AAXValResult.SingleTestResult.logs");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .AAXValResult.DataTree tree = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tree()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AAXValResult.SingleTestResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AAXValResult.SingleTestResult)
  return false;
#undef DO_
}

void SingleTestResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AAXValResult.SingleTestResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string effect_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effect_id().data(), static_cast<int>(this->effect_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AAXValResult.SingleTestResult.effect_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->effect_id(), output);
  }

  // optional .AAXValResult.SingleTestResult.Triad triad_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_triad_id(), output);
  }

  // optional .AAXValResult.SingleTestResult.TestConfig test_config = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_test_config(), output);
  }

  // optional float score = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->score(), output);
  }

  // optional .AAXValResult.SingleTestResult.PerformanceData performance_data = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_performance_data(), output);
  }

  // repeated string logs = 9;
  for (int i = 0, n = this->logs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logs(i).data(), static_cast<int>(this->logs(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AAXValResult.SingleTestResult.logs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->logs(i), output);
  }

  // repeated .AAXValResult.DataTree tree = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tree_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->tree(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AAXValResult.SingleTestResult)
}

::google::protobuf::uint8* SingleTestResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AAXValResult.SingleTestResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string effect_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effect_id().data(), static_cast<int>(this->effect_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AAXValResult.SingleTestResult.effect_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->effect_id(), target);
  }

  // optional .AAXValResult.SingleTestResult.Triad triad_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_triad_id(), deterministic, target);
  }

  // optional .AAXValResult.SingleTestResult.TestConfig test_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_test_config(), deterministic, target);
  }

  // optional float score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->score(), target);
  }

  // optional .AAXValResult.SingleTestResult.PerformanceData performance_data = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_performance_data(), deterministic, target);
  }

  // repeated string logs = 9;
  for (int i = 0, n = this->logs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logs(i).data(), static_cast<int>(this->logs(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AAXValResult.SingleTestResult.logs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->logs(i), target);
  }

  // repeated .AAXValResult.DataTree tree = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tree_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->tree(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AAXValResult.SingleTestResult)
  return target;
}

size_t SingleTestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AAXValResult.SingleTestResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string logs = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->logs_size());
  for (int i = 0, n = this->logs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->logs(i));
  }

  // repeated .AAXValResult.DataTree tree = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->tree_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tree(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string effect_id = 1;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effect_id());
    }

    // optional .AAXValResult.SingleTestResult.Triad triad_id = 2;
    if (has_triad_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *triad_id_);
    }

    // optional .AAXValResult.SingleTestResult.TestConfig test_config = 3;
    if (has_test_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *test_config_);
    }

    // optional .AAXValResult.SingleTestResult.PerformanceData performance_data = 6;
    if (has_performance_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *performance_data_);
    }

    // optional float score = 5;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleTestResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AAXValResult.SingleTestResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleTestResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SingleTestResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AAXValResult.SingleTestResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AAXValResult.SingleTestResult)
    MergeFrom(*source);
  }
}

void SingleTestResult::MergeFrom(const SingleTestResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AAXValResult.SingleTestResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  tree_.MergeFrom(from.tree_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_effect_id();
      effect_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.effect_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_triad_id()->::AAXValResult::SingleTestResult_Triad::MergeFrom(from.triad_id());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_test_config()->::AAXValResult::SingleTestResult_TestConfig::MergeFrom(from.test_config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_performance_data()->::AAXValResult::SingleTestResult_PerformanceData::MergeFrom(from.performance_data());
    }
    if (cached_has_bits & 0x00000010u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SingleTestResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AAXValResult.SingleTestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleTestResult::CopyFrom(const SingleTestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AAXValResult.SingleTestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleTestResult::IsInitialized() const {
  if (has_triad_id()) {
    if (!this->triad_id_->IsInitialized()) return false;
  }
  return true;
}

void SingleTestResult::Swap(SingleTestResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SingleTestResult::InternalSwap(SingleTestResult* other) {
  using std::swap;
  logs_.InternalSwap(CastToBase(&other->logs_));
  CastToBase(&tree_)->InternalSwap(CastToBase(&other->tree_));
  effect_id_.Swap(&other->effect_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(triad_id_, other->triad_id_);
  swap(test_config_, other->test_config_);
  swap(performance_data_, other->performance_data_);
  swap(score_, other->score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SingleTestResult::GetMetadata() const {
  protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Summary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Summary::kTotalFieldNumber;
const int Summary::kFailedFieldNumber;
const int Summary::kSuccessfulFieldNumber;
const int Summary::kNotRunFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Summary::Summary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_AAXValidator_5fResult_2eproto::scc_info_Summary.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AAXValResult.Summary)
}
Summary::Summary(const Summary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&not_run_) -
    reinterpret_cast<char*>(&total_)) + sizeof(not_run_));
  // @@protoc_insertion_point(copy_constructor:AAXValResult.Summary)
}

void Summary::SharedCtor() {
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&not_run_) -
      reinterpret_cast<char*>(&total_)) + sizeof(not_run_));
}

Summary::~Summary() {
  // @@protoc_insertion_point(destructor:AAXValResult.Summary)
  SharedDtor();
}

void Summary::SharedDtor() {
}

void Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Summary::descriptor() {
  ::protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Summary& Summary::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_AAXValidator_5fResult_2eproto::scc_info_Summary.base);
  return *internal_default_instance();
}


void Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:AAXValResult.Summary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&not_run_) -
        reinterpret_cast<char*>(&total_)) + sizeof(not_run_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Summary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AAXValResult.Summary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 failed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_failed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &failed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 successful = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_successful();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &successful_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 not_run = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_not_run();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &not_run_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AAXValResult.Summary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AAXValResult.Summary)
  return false;
#undef DO_
}

void Summary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AAXValResult.Summary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->total(), output);
  }

  // optional sint32 failed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->failed(), output);
  }

  // optional sint32 successful = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->successful(), output);
  }

  // optional sint32 not_run = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->not_run(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AAXValResult.Summary)
}

::google::protobuf::uint8* Summary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AAXValResult.Summary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->total(), target);
  }

  // optional sint32 failed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->failed(), target);
  }

  // optional sint32 successful = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->successful(), target);
  }

  // optional sint32 not_run = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->not_run(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AAXValResult.Summary)
  return target;
}

size_t Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AAXValResult.Summary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional sint32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->total());
    }

    // optional sint32 failed = 2;
    if (has_failed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->failed());
    }

    // optional sint32 successful = 3;
    if (has_successful()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->successful());
    }

    // optional sint32 not_run = 5;
    if (has_not_run()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->not_run());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AAXValResult.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Summary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AAXValResult.Summary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AAXValResult.Summary)
    MergeFrom(*source);
  }
}

void Summary::MergeFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AAXValResult.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      failed_ = from.failed_;
    }
    if (cached_has_bits & 0x00000004u) {
      successful_ = from.successful_;
    }
    if (cached_has_bits & 0x00000008u) {
      not_run_ = from.not_run_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Summary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AAXValResult.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary::CopyFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AAXValResult.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary::IsInitialized() const {
  return true;
}

void Summary::Swap(Summary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Summary::InternalSwap(Summary* other) {
  using std::swap;
  swap(total_, other->total_);
  swap(failed_, other->failed_);
  swap(successful_, other->successful_);
  swap(not_run_, other->not_run_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Summary::GetMetadata() const {
  protobuf_AAXValidator_5fResult_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_AAXValidator_5fResult_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AAXValResult
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AAXValResult::DataTree* Arena::CreateMaybeMessage< ::AAXValResult::DataTree >(Arena* arena) {
  return Arena::CreateInternal< ::AAXValResult::DataTree >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AAXValResult::Result* Arena::CreateMaybeMessage< ::AAXValResult::Result >(Arena* arena) {
  return Arena::CreateInternal< ::AAXValResult::Result >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AAXValResult::SingleTestResult_Triad* Arena::CreateMaybeMessage< ::AAXValResult::SingleTestResult_Triad >(Arena* arena) {
  return Arena::CreateInternal< ::AAXValResult::SingleTestResult_Triad >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AAXValResult::SingleTestResult_TestConfig* Arena::CreateMaybeMessage< ::AAXValResult::SingleTestResult_TestConfig >(Arena* arena) {
  return Arena::CreateInternal< ::AAXValResult::SingleTestResult_TestConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AAXValResult::SingleTestResult_PerformanceData* Arena::CreateMaybeMessage< ::AAXValResult::SingleTestResult_PerformanceData >(Arena* arena) {
  return Arena::CreateInternal< ::AAXValResult::SingleTestResult_PerformanceData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AAXValResult::SingleTestResult* Arena::CreateMaybeMessage< ::AAXValResult::SingleTestResult >(Arena* arena) {
  return Arena::CreateInternal< ::AAXValResult::SingleTestResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AAXValResult::Summary* Arena::CreateMaybeMessage< ::AAXValResult::Summary >(Arena* arena) {
  return Arena::CreateInternal< ::AAXValResult::Summary >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
