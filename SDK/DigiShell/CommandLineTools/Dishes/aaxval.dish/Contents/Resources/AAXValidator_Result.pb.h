// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AAXValidator_Result.proto

#ifndef PROTOBUF_INCLUDED_AAXValidator_5fResult_2eproto
#define PROTOBUF_INCLUDED_AAXValidator_5fResult_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_AAXValidator_5fResult_2eproto 

namespace protobuf_AAXValidator_5fResult_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_AAXValidator_5fResult_2eproto
namespace AAXValResult {
class DataTree;
class DataTreeDefaultTypeInternal;
extern DataTreeDefaultTypeInternal _DataTree_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class SingleTestResult;
class SingleTestResultDefaultTypeInternal;
extern SingleTestResultDefaultTypeInternal _SingleTestResult_default_instance_;
class SingleTestResult_PerformanceData;
class SingleTestResult_PerformanceDataDefaultTypeInternal;
extern SingleTestResult_PerformanceDataDefaultTypeInternal _SingleTestResult_PerformanceData_default_instance_;
class SingleTestResult_TestConfig;
class SingleTestResult_TestConfigDefaultTypeInternal;
extern SingleTestResult_TestConfigDefaultTypeInternal _SingleTestResult_TestConfig_default_instance_;
class SingleTestResult_Triad;
class SingleTestResult_TriadDefaultTypeInternal;
extern SingleTestResult_TriadDefaultTypeInternal _SingleTestResult_Triad_default_instance_;
class Summary;
class SummaryDefaultTypeInternal;
extern SummaryDefaultTypeInternal _Summary_default_instance_;
}  // namespace AAXValResult
namespace google {
namespace protobuf {
template<> ::AAXValResult::DataTree* Arena::CreateMaybeMessage<::AAXValResult::DataTree>(Arena*);
template<> ::AAXValResult::Result* Arena::CreateMaybeMessage<::AAXValResult::Result>(Arena*);
template<> ::AAXValResult::SingleTestResult* Arena::CreateMaybeMessage<::AAXValResult::SingleTestResult>(Arena*);
template<> ::AAXValResult::SingleTestResult_PerformanceData* Arena::CreateMaybeMessage<::AAXValResult::SingleTestResult_PerformanceData>(Arena*);
template<> ::AAXValResult::SingleTestResult_TestConfig* Arena::CreateMaybeMessage<::AAXValResult::SingleTestResult_TestConfig>(Arena*);
template<> ::AAXValResult::SingleTestResult_Triad* Arena::CreateMaybeMessage<::AAXValResult::SingleTestResult_Triad>(Arena*);
template<> ::AAXValResult::Summary* Arena::CreateMaybeMessage<::AAXValResult::Summary>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace AAXValResult {

enum EResultStatus {
  E_RESULTSTATUS_UNKNOWN = 0,
  E_COMPLETED_PASS = 1,
  E_COMPLETED_FAIL = 2,
  E_LOST = 4,
  E_TIMEOUT = 5,
  E_ABORTED = 6,
  E_CANCELED = 7
};
bool EResultStatus_IsValid(int value);
const EResultStatus EResultStatus_MIN = E_RESULTSTATUS_UNKNOWN;
const EResultStatus EResultStatus_MAX = E_CANCELED;
const int EResultStatus_ARRAYSIZE = EResultStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EResultStatus_descriptor();
inline const ::std::string& EResultStatus_Name(EResultStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EResultStatus_descriptor(), value);
}
inline bool EResultStatus_Parse(
    const ::std::string& name, EResultStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EResultStatus>(
    EResultStatus_descriptor(), name, value);
}
// ===================================================================

class DataTree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValResult.DataTree) */ {
 public:
  DataTree();
  virtual ~DataTree();

  DataTree(const DataTree& from);

  inline DataTree& operator=(const DataTree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataTree(DataTree&& from) noexcept
    : DataTree() {
    *this = ::std::move(from);
  }

  inline DataTree& operator=(DataTree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataTree* internal_default_instance() {
    return reinterpret_cast<const DataTree*>(
               &_DataTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DataTree* other);
  friend void swap(DataTree& a, DataTree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataTree* New() const final {
    return CreateMaybeMessage<DataTree>(NULL);
  }

  DataTree* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataTree>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataTree& from);
  void MergeFrom(const DataTree& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataTree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AAXValResult.DataTree tree = 2;
  int tree_size() const;
  void clear_tree();
  static const int kTreeFieldNumber = 2;
  ::AAXValResult::DataTree* mutable_tree(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree >*
      mutable_tree();
  const ::AAXValResult::DataTree& tree(int index) const;
  ::AAXValResult::DataTree* add_tree();
  const ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree >&
      tree() const;

  // optional string data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:AAXValResult.DataTree)
 private:
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree > tree_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend struct ::protobuf_AAXValidator_5fResult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Result : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValResult.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Result* other);
  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(NULL);
  }

  Result* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AAXValResult.SingleTestResult result = 1;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::AAXValResult::SingleTestResult* mutable_result(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValResult::SingleTestResult >*
      mutable_result();
  const ::AAXValResult::SingleTestResult& result(int index) const;
  ::AAXValResult::SingleTestResult* add_result();
  const ::google::protobuf::RepeatedPtrField< ::AAXValResult::SingleTestResult >&
      result() const;

  // optional .AAXValResult.Summary summary = 2;
  bool has_summary() const;
  void clear_summary();
  static const int kSummaryFieldNumber = 2;
  private:
  const ::AAXValResult::Summary& _internal_summary() const;
  public:
  const ::AAXValResult::Summary& summary() const;
  ::AAXValResult::Summary* release_summary();
  ::AAXValResult::Summary* mutable_summary();
  void set_allocated_summary(::AAXValResult::Summary* summary);

  // optional uint64 connection_id = 4;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 4;
  ::google::protobuf::uint64 connection_id() const;
  void set_connection_id(::google::protobuf::uint64 value);

  // optional .AAXValResult.EResultStatus result_status = 3 [default = E_RESULTSTATUS_UNKNOWN];
  bool has_result_status() const;
  void clear_result_status();
  static const int kResultStatusFieldNumber = 3;
  ::AAXValResult::EResultStatus result_status() const;
  void set_result_status(::AAXValResult::EResultStatus value);

  // @@protoc_insertion_point(class_scope:AAXValResult.Result)
 private:
  void set_has_summary();
  void clear_has_summary();
  void set_has_result_status();
  void clear_has_result_status();
  void set_has_connection_id();
  void clear_has_connection_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AAXValResult::SingleTestResult > result_;
  ::AAXValResult::Summary* summary_;
  ::google::protobuf::uint64 connection_id_;
  int result_status_;
  friend struct ::protobuf_AAXValidator_5fResult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleTestResult_Triad : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValResult.SingleTestResult.Triad) */ {
 public:
  SingleTestResult_Triad();
  virtual ~SingleTestResult_Triad();

  SingleTestResult_Triad(const SingleTestResult_Triad& from);

  inline SingleTestResult_Triad& operator=(const SingleTestResult_Triad& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleTestResult_Triad(SingleTestResult_Triad&& from) noexcept
    : SingleTestResult_Triad() {
    *this = ::std::move(from);
  }

  inline SingleTestResult_Triad& operator=(SingleTestResult_Triad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleTestResult_Triad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleTestResult_Triad* internal_default_instance() {
    return reinterpret_cast<const SingleTestResult_Triad*>(
               &_SingleTestResult_Triad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SingleTestResult_Triad* other);
  friend void swap(SingleTestResult_Triad& a, SingleTestResult_Triad& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleTestResult_Triad* New() const final {
    return CreateMaybeMessage<SingleTestResult_Triad>(NULL);
  }

  SingleTestResult_Triad* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SingleTestResult_Triad>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SingleTestResult_Triad& from);
  void MergeFrom(const SingleTestResult_Triad& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleTestResult_Triad* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 manufacture_id = 1;
  bool has_manufacture_id() const;
  void clear_manufacture_id();
  static const int kManufactureIdFieldNumber = 1;
  ::google::protobuf::uint32 manufacture_id() const;
  void set_manufacture_id(::google::protobuf::uint32 value);

  // required uint32 product_id = 2;
  bool has_product_id() const;
  void clear_product_id();
  static const int kProductIdFieldNumber = 2;
  ::google::protobuf::uint32 product_id() const;
  void set_product_id(::google::protobuf::uint32 value);

  // required uint32 plugin_id = 3;
  bool has_plugin_id() const;
  void clear_plugin_id();
  static const int kPluginIdFieldNumber = 3;
  ::google::protobuf::uint32 plugin_id() const;
  void set_plugin_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:AAXValResult.SingleTestResult.Triad)
 private:
  void set_has_manufacture_id();
  void clear_has_manufacture_id();
  void set_has_product_id();
  void clear_has_product_id();
  void set_has_plugin_id();
  void clear_has_plugin_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 manufacture_id_;
  ::google::protobuf::uint32 product_id_;
  ::google::protobuf::uint32 plugin_id_;
  friend struct ::protobuf_AAXValidator_5fResult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleTestResult_TestConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValResult.SingleTestResult.TestConfig) */ {
 public:
  SingleTestResult_TestConfig();
  virtual ~SingleTestResult_TestConfig();

  SingleTestResult_TestConfig(const SingleTestResult_TestConfig& from);

  inline SingleTestResult_TestConfig& operator=(const SingleTestResult_TestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleTestResult_TestConfig(SingleTestResult_TestConfig&& from) noexcept
    : SingleTestResult_TestConfig() {
    *this = ::std::move(from);
  }

  inline SingleTestResult_TestConfig& operator=(SingleTestResult_TestConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleTestResult_TestConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleTestResult_TestConfig* internal_default_instance() {
    return reinterpret_cast<const SingleTestResult_TestConfig*>(
               &_SingleTestResult_TestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SingleTestResult_TestConfig* other);
  friend void swap(SingleTestResult_TestConfig& a, SingleTestResult_TestConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleTestResult_TestConfig* New() const final {
    return CreateMaybeMessage<SingleTestResult_TestConfig>(NULL);
  }

  SingleTestResult_TestConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SingleTestResult_TestConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SingleTestResult_TestConfig& from);
  void MergeFrom(const SingleTestResult_TestConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleTestResult_TestConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AAXValResult.DataTree tree = 1;
  int tree_size() const;
  void clear_tree();
  static const int kTreeFieldNumber = 1;
  ::AAXValResult::DataTree* mutable_tree(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree >*
      mutable_tree();
  const ::AAXValResult::DataTree& tree(int index) const;
  ::AAXValResult::DataTree* add_tree();
  const ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree >&
      tree() const;

  // @@protoc_insertion_point(class_scope:AAXValResult.SingleTestResult.TestConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree > tree_;
  friend struct ::protobuf_AAXValidator_5fResult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleTestResult_PerformanceData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValResult.SingleTestResult.PerformanceData) */ {
 public:
  SingleTestResult_PerformanceData();
  virtual ~SingleTestResult_PerformanceData();

  SingleTestResult_PerformanceData(const SingleTestResult_PerformanceData& from);

  inline SingleTestResult_PerformanceData& operator=(const SingleTestResult_PerformanceData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleTestResult_PerformanceData(SingleTestResult_PerformanceData&& from) noexcept
    : SingleTestResult_PerformanceData() {
    *this = ::std::move(from);
  }

  inline SingleTestResult_PerformanceData& operator=(SingleTestResult_PerformanceData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleTestResult_PerformanceData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleTestResult_PerformanceData* internal_default_instance() {
    return reinterpret_cast<const SingleTestResult_PerformanceData*>(
               &_SingleTestResult_PerformanceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SingleTestResult_PerformanceData* other);
  friend void swap(SingleTestResult_PerformanceData& a, SingleTestResult_PerformanceData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleTestResult_PerformanceData* New() const final {
    return CreateMaybeMessage<SingleTestResult_PerformanceData>(NULL);
  }

  SingleTestResult_PerformanceData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SingleTestResult_PerformanceData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SingleTestResult_PerformanceData& from);
  void MergeFrom(const SingleTestResult_PerformanceData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleTestResult_PerformanceData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float started_wall_clock_sec = 1;
  bool has_started_wall_clock_sec() const;
  void clear_started_wall_clock_sec();
  static const int kStartedWallClockSecFieldNumber = 1;
  float started_wall_clock_sec() const;
  void set_started_wall_clock_sec(float value);

  // optional float elapsed_time_sec = 2;
  bool has_elapsed_time_sec() const;
  void clear_elapsed_time_sec();
  static const int kElapsedTimeSecFieldNumber = 2;
  float elapsed_time_sec() const;
  void set_elapsed_time_sec(float value);

  // optional float average_ms_per_iteration = 3;
  bool has_average_ms_per_iteration() const;
  void clear_average_ms_per_iteration();
  static const int kAverageMsPerIterationFieldNumber = 3;
  float average_ms_per_iteration() const;
  void set_average_ms_per_iteration(float value);

  // optional float max_ms_per_iteration = 4;
  bool has_max_ms_per_iteration() const;
  void clear_max_ms_per_iteration();
  static const int kMaxMsPerIterationFieldNumber = 4;
  float max_ms_per_iteration() const;
  void set_max_ms_per_iteration(float value);

  // optional float cpu_usage = 7;
  bool has_cpu_usage() const;
  void clear_cpu_usage();
  static const int kCpuUsageFieldNumber = 7;
  float cpu_usage() const;
  void set_cpu_usage(float value);

  // optional float mem_usage = 8;
  bool has_mem_usage() const;
  void clear_mem_usage();
  static const int kMemUsageFieldNumber = 8;
  float mem_usage() const;
  void set_mem_usage(float value);

  // @@protoc_insertion_point(class_scope:AAXValResult.SingleTestResult.PerformanceData)
 private:
  void set_has_started_wall_clock_sec();
  void clear_has_started_wall_clock_sec();
  void set_has_elapsed_time_sec();
  void clear_has_elapsed_time_sec();
  void set_has_average_ms_per_iteration();
  void clear_has_average_ms_per_iteration();
  void set_has_max_ms_per_iteration();
  void clear_has_max_ms_per_iteration();
  void set_has_cpu_usage();
  void clear_has_cpu_usage();
  void set_has_mem_usage();
  void clear_has_mem_usage();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float started_wall_clock_sec_;
  float elapsed_time_sec_;
  float average_ms_per_iteration_;
  float max_ms_per_iteration_;
  float cpu_usage_;
  float mem_usage_;
  friend struct ::protobuf_AAXValidator_5fResult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SingleTestResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValResult.SingleTestResult) */ {
 public:
  SingleTestResult();
  virtual ~SingleTestResult();

  SingleTestResult(const SingleTestResult& from);

  inline SingleTestResult& operator=(const SingleTestResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SingleTestResult(SingleTestResult&& from) noexcept
    : SingleTestResult() {
    *this = ::std::move(from);
  }

  inline SingleTestResult& operator=(SingleTestResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleTestResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SingleTestResult* internal_default_instance() {
    return reinterpret_cast<const SingleTestResult*>(
               &_SingleTestResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SingleTestResult* other);
  friend void swap(SingleTestResult& a, SingleTestResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SingleTestResult* New() const final {
    return CreateMaybeMessage<SingleTestResult>(NULL);
  }

  SingleTestResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SingleTestResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SingleTestResult& from);
  void MergeFrom(const SingleTestResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleTestResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SingleTestResult_Triad Triad;
  typedef SingleTestResult_TestConfig TestConfig;
  typedef SingleTestResult_PerformanceData PerformanceData;

  // accessors -------------------------------------------------------

  // repeated string logs = 9;
  int logs_size() const;
  void clear_logs();
  static const int kLogsFieldNumber = 9;
  const ::std::string& logs(int index) const;
  ::std::string* mutable_logs(int index);
  void set_logs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_logs(int index, ::std::string&& value);
  #endif
  void set_logs(int index, const char* value);
  void set_logs(int index, const char* value, size_t size);
  ::std::string* add_logs();
  void add_logs(const ::std::string& value);
  #if LANG_CXX11
  void add_logs(::std::string&& value);
  #endif
  void add_logs(const char* value);
  void add_logs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& logs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_logs();

  // repeated .AAXValResult.DataTree tree = 10;
  int tree_size() const;
  void clear_tree();
  static const int kTreeFieldNumber = 10;
  ::AAXValResult::DataTree* mutable_tree(int index);
  ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree >*
      mutable_tree();
  const ::AAXValResult::DataTree& tree(int index) const;
  ::AAXValResult::DataTree* add_tree();
  const ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree >&
      tree() const;

  // optional string effect_id = 1;
  bool has_effect_id() const;
  void clear_effect_id();
  static const int kEffectIdFieldNumber = 1;
  const ::std::string& effect_id() const;
  void set_effect_id(const ::std::string& value);
  #if LANG_CXX11
  void set_effect_id(::std::string&& value);
  #endif
  void set_effect_id(const char* value);
  void set_effect_id(const char* value, size_t size);
  ::std::string* mutable_effect_id();
  ::std::string* release_effect_id();
  void set_allocated_effect_id(::std::string* effect_id);

  // optional .AAXValResult.SingleTestResult.Triad triad_id = 2;
  bool has_triad_id() const;
  void clear_triad_id();
  static const int kTriadIdFieldNumber = 2;
  private:
  const ::AAXValResult::SingleTestResult_Triad& _internal_triad_id() const;
  public:
  const ::AAXValResult::SingleTestResult_Triad& triad_id() const;
  ::AAXValResult::SingleTestResult_Triad* release_triad_id();
  ::AAXValResult::SingleTestResult_Triad* mutable_triad_id();
  void set_allocated_triad_id(::AAXValResult::SingleTestResult_Triad* triad_id);

  // optional .AAXValResult.SingleTestResult.TestConfig test_config = 3;
  bool has_test_config() const;
  void clear_test_config();
  static const int kTestConfigFieldNumber = 3;
  private:
  const ::AAXValResult::SingleTestResult_TestConfig& _internal_test_config() const;
  public:
  const ::AAXValResult::SingleTestResult_TestConfig& test_config() const;
  ::AAXValResult::SingleTestResult_TestConfig* release_test_config();
  ::AAXValResult::SingleTestResult_TestConfig* mutable_test_config();
  void set_allocated_test_config(::AAXValResult::SingleTestResult_TestConfig* test_config);

  // optional .AAXValResult.SingleTestResult.PerformanceData performance_data = 6;
  bool has_performance_data() const;
  void clear_performance_data();
  static const int kPerformanceDataFieldNumber = 6;
  private:
  const ::AAXValResult::SingleTestResult_PerformanceData& _internal_performance_data() const;
  public:
  const ::AAXValResult::SingleTestResult_PerformanceData& performance_data() const;
  ::AAXValResult::SingleTestResult_PerformanceData* release_performance_data();
  ::AAXValResult::SingleTestResult_PerformanceData* mutable_performance_data();
  void set_allocated_performance_data(::AAXValResult::SingleTestResult_PerformanceData* performance_data);

  // optional float score = 5;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 5;
  float score() const;
  void set_score(float value);

  // @@protoc_insertion_point(class_scope:AAXValResult.SingleTestResult)
 private:
  void set_has_effect_id();
  void clear_has_effect_id();
  void set_has_triad_id();
  void clear_has_triad_id();
  void set_has_test_config();
  void clear_has_test_config();
  void set_has_score();
  void clear_has_score();
  void set_has_performance_data();
  void clear_has_performance_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> logs_;
  ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree > tree_;
  ::google::protobuf::internal::ArenaStringPtr effect_id_;
  ::AAXValResult::SingleTestResult_Triad* triad_id_;
  ::AAXValResult::SingleTestResult_TestConfig* test_config_;
  ::AAXValResult::SingleTestResult_PerformanceData* performance_data_;
  float score_;
  friend struct ::protobuf_AAXValidator_5fResult_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Summary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AAXValResult.Summary) */ {
 public:
  Summary();
  virtual ~Summary();

  Summary(const Summary& from);

  inline Summary& operator=(const Summary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Summary(Summary&& from) noexcept
    : Summary() {
    *this = ::std::move(from);
  }

  inline Summary& operator=(Summary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Summary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Summary* internal_default_instance() {
    return reinterpret_cast<const Summary*>(
               &_Summary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Summary* other);
  friend void swap(Summary& a, Summary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Summary* New() const final {
    return CreateMaybeMessage<Summary>(NULL);
  }

  Summary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Summary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Summary& from);
  void MergeFrom(const Summary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 total = 1;
  bool has_total() const;
  void clear_total();
  static const int kTotalFieldNumber = 1;
  ::google::protobuf::int32 total() const;
  void set_total(::google::protobuf::int32 value);

  // optional sint32 failed = 2;
  bool has_failed() const;
  void clear_failed();
  static const int kFailedFieldNumber = 2;
  ::google::protobuf::int32 failed() const;
  void set_failed(::google::protobuf::int32 value);

  // optional sint32 successful = 3;
  bool has_successful() const;
  void clear_successful();
  static const int kSuccessfulFieldNumber = 3;
  ::google::protobuf::int32 successful() const;
  void set_successful(::google::protobuf::int32 value);

  // optional sint32 not_run = 5;
  bool has_not_run() const;
  void clear_not_run();
  static const int kNotRunFieldNumber = 5;
  ::google::protobuf::int32 not_run() const;
  void set_not_run(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AAXValResult.Summary)
 private:
  void set_has_total();
  void clear_has_total();
  void set_has_failed();
  void clear_has_failed();
  void set_has_successful();
  void clear_has_successful();
  void set_has_not_run();
  void clear_has_not_run();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 total_;
  ::google::protobuf::int32 failed_;
  ::google::protobuf::int32 successful_;
  ::google::protobuf::int32 not_run_;
  friend struct ::protobuf_AAXValidator_5fResult_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataTree

// optional string data = 1;
inline bool DataTree::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataTree::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataTree::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataTree::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& DataTree::data() const {
  // @@protoc_insertion_point(field_get:AAXValResult.DataTree.data)
  return data_.GetNoArena();
}
inline void DataTree::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValResult.DataTree.data)
}
#if LANG_CXX11
inline void DataTree::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValResult.DataTree.data)
}
#endif
inline void DataTree::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValResult.DataTree.data)
}
inline void DataTree::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValResult.DataTree.data)
}
inline ::std::string* DataTree::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:AAXValResult.DataTree.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataTree::release_data() {
  // @@protoc_insertion_point(field_release:AAXValResult.DataTree.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataTree::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:AAXValResult.DataTree.data)
}

// repeated .AAXValResult.DataTree tree = 2;
inline int DataTree::tree_size() const {
  return tree_.size();
}
inline void DataTree::clear_tree() {
  tree_.Clear();
}
inline ::AAXValResult::DataTree* DataTree::mutable_tree(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValResult.DataTree.tree)
  return tree_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree >*
DataTree::mutable_tree() {
  // @@protoc_insertion_point(field_mutable_list:AAXValResult.DataTree.tree)
  return &tree_;
}
inline const ::AAXValResult::DataTree& DataTree::tree(int index) const {
  // @@protoc_insertion_point(field_get:AAXValResult.DataTree.tree)
  return tree_.Get(index);
}
inline ::AAXValResult::DataTree* DataTree::add_tree() {
  // @@protoc_insertion_point(field_add:AAXValResult.DataTree.tree)
  return tree_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree >&
DataTree::tree() const {
  // @@protoc_insertion_point(field_list:AAXValResult.DataTree.tree)
  return tree_;
}

// -------------------------------------------------------------------

// Result

// repeated .AAXValResult.SingleTestResult result = 1;
inline int Result::result_size() const {
  return result_.size();
}
inline void Result::clear_result() {
  result_.Clear();
}
inline ::AAXValResult::SingleTestResult* Result::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValResult.Result.result)
  return result_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValResult::SingleTestResult >*
Result::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:AAXValResult.Result.result)
  return &result_;
}
inline const ::AAXValResult::SingleTestResult& Result::result(int index) const {
  // @@protoc_insertion_point(field_get:AAXValResult.Result.result)
  return result_.Get(index);
}
inline ::AAXValResult::SingleTestResult* Result::add_result() {
  // @@protoc_insertion_point(field_add:AAXValResult.Result.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValResult::SingleTestResult >&
Result::result() const {
  // @@protoc_insertion_point(field_list:AAXValResult.Result.result)
  return result_;
}

// optional .AAXValResult.Summary summary = 2;
inline bool Result::has_summary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Result::set_has_summary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Result::clear_has_summary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Result::clear_summary() {
  if (summary_ != NULL) summary_->Clear();
  clear_has_summary();
}
inline const ::AAXValResult::Summary& Result::_internal_summary() const {
  return *summary_;
}
inline const ::AAXValResult::Summary& Result::summary() const {
  const ::AAXValResult::Summary* p = summary_;
  // @@protoc_insertion_point(field_get:AAXValResult.Result.summary)
  return p != NULL ? *p : *reinterpret_cast<const ::AAXValResult::Summary*>(
      &::AAXValResult::_Summary_default_instance_);
}
inline ::AAXValResult::Summary* Result::release_summary() {
  // @@protoc_insertion_point(field_release:AAXValResult.Result.summary)
  clear_has_summary();
  ::AAXValResult::Summary* temp = summary_;
  summary_ = NULL;
  return temp;
}
inline ::AAXValResult::Summary* Result::mutable_summary() {
  set_has_summary();
  if (summary_ == NULL) {
    auto* p = CreateMaybeMessage<::AAXValResult::Summary>(GetArenaNoVirtual());
    summary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AAXValResult.Result.summary)
  return summary_;
}
inline void Result::set_allocated_summary(::AAXValResult::Summary* summary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete summary_;
  }
  if (summary) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      summary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    set_has_summary();
  } else {
    clear_has_summary();
  }
  summary_ = summary;
  // @@protoc_insertion_point(field_set_allocated:AAXValResult.Result.summary)
}

// optional .AAXValResult.EResultStatus result_status = 3 [default = E_RESULTSTATUS_UNKNOWN];
inline bool Result::has_result_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Result::set_has_result_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Result::clear_has_result_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Result::clear_result_status() {
  result_status_ = 0;
  clear_has_result_status();
}
inline ::AAXValResult::EResultStatus Result::result_status() const {
  // @@protoc_insertion_point(field_get:AAXValResult.Result.result_status)
  return static_cast< ::AAXValResult::EResultStatus >(result_status_);
}
inline void Result::set_result_status(::AAXValResult::EResultStatus value) {
  assert(::AAXValResult::EResultStatus_IsValid(value));
  set_has_result_status();
  result_status_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.Result.result_status)
}

// optional uint64 connection_id = 4;
inline bool Result::has_connection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Result::set_has_connection_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Result::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Result::clear_connection_id() {
  connection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_connection_id();
}
inline ::google::protobuf::uint64 Result::connection_id() const {
  // @@protoc_insertion_point(field_get:AAXValResult.Result.connection_id)
  return connection_id_;
}
inline void Result::set_connection_id(::google::protobuf::uint64 value) {
  set_has_connection_id();
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.Result.connection_id)
}

// -------------------------------------------------------------------

// SingleTestResult_Triad

// required uint32 manufacture_id = 1;
inline bool SingleTestResult_Triad::has_manufacture_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleTestResult_Triad::set_has_manufacture_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleTestResult_Triad::clear_has_manufacture_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleTestResult_Triad::clear_manufacture_id() {
  manufacture_id_ = 0u;
  clear_has_manufacture_id();
}
inline ::google::protobuf::uint32 SingleTestResult_Triad::manufacture_id() const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.Triad.manufacture_id)
  return manufacture_id_;
}
inline void SingleTestResult_Triad::set_manufacture_id(::google::protobuf::uint32 value) {
  set_has_manufacture_id();
  manufacture_id_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.Triad.manufacture_id)
}

// required uint32 product_id = 2;
inline bool SingleTestResult_Triad::has_product_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleTestResult_Triad::set_has_product_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleTestResult_Triad::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleTestResult_Triad::clear_product_id() {
  product_id_ = 0u;
  clear_has_product_id();
}
inline ::google::protobuf::uint32 SingleTestResult_Triad::product_id() const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.Triad.product_id)
  return product_id_;
}
inline void SingleTestResult_Triad::set_product_id(::google::protobuf::uint32 value) {
  set_has_product_id();
  product_id_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.Triad.product_id)
}

// required uint32 plugin_id = 3;
inline bool SingleTestResult_Triad::has_plugin_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleTestResult_Triad::set_has_plugin_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleTestResult_Triad::clear_has_plugin_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleTestResult_Triad::clear_plugin_id() {
  plugin_id_ = 0u;
  clear_has_plugin_id();
}
inline ::google::protobuf::uint32 SingleTestResult_Triad::plugin_id() const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.Triad.plugin_id)
  return plugin_id_;
}
inline void SingleTestResult_Triad::set_plugin_id(::google::protobuf::uint32 value) {
  set_has_plugin_id();
  plugin_id_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.Triad.plugin_id)
}

// -------------------------------------------------------------------

// SingleTestResult_TestConfig

// repeated .AAXValResult.DataTree tree = 1;
inline int SingleTestResult_TestConfig::tree_size() const {
  return tree_.size();
}
inline void SingleTestResult_TestConfig::clear_tree() {
  tree_.Clear();
}
inline ::AAXValResult::DataTree* SingleTestResult_TestConfig::mutable_tree(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValResult.SingleTestResult.TestConfig.tree)
  return tree_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree >*
SingleTestResult_TestConfig::mutable_tree() {
  // @@protoc_insertion_point(field_mutable_list:AAXValResult.SingleTestResult.TestConfig.tree)
  return &tree_;
}
inline const ::AAXValResult::DataTree& SingleTestResult_TestConfig::tree(int index) const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.TestConfig.tree)
  return tree_.Get(index);
}
inline ::AAXValResult::DataTree* SingleTestResult_TestConfig::add_tree() {
  // @@protoc_insertion_point(field_add:AAXValResult.SingleTestResult.TestConfig.tree)
  return tree_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree >&
SingleTestResult_TestConfig::tree() const {
  // @@protoc_insertion_point(field_list:AAXValResult.SingleTestResult.TestConfig.tree)
  return tree_;
}

// -------------------------------------------------------------------

// SingleTestResult_PerformanceData

// optional float started_wall_clock_sec = 1;
inline bool SingleTestResult_PerformanceData::has_started_wall_clock_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleTestResult_PerformanceData::set_has_started_wall_clock_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleTestResult_PerformanceData::clear_has_started_wall_clock_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleTestResult_PerformanceData::clear_started_wall_clock_sec() {
  started_wall_clock_sec_ = 0;
  clear_has_started_wall_clock_sec();
}
inline float SingleTestResult_PerformanceData::started_wall_clock_sec() const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.PerformanceData.started_wall_clock_sec)
  return started_wall_clock_sec_;
}
inline void SingleTestResult_PerformanceData::set_started_wall_clock_sec(float value) {
  set_has_started_wall_clock_sec();
  started_wall_clock_sec_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.PerformanceData.started_wall_clock_sec)
}

// optional float elapsed_time_sec = 2;
inline bool SingleTestResult_PerformanceData::has_elapsed_time_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleTestResult_PerformanceData::set_has_elapsed_time_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleTestResult_PerformanceData::clear_has_elapsed_time_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleTestResult_PerformanceData::clear_elapsed_time_sec() {
  elapsed_time_sec_ = 0;
  clear_has_elapsed_time_sec();
}
inline float SingleTestResult_PerformanceData::elapsed_time_sec() const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.PerformanceData.elapsed_time_sec)
  return elapsed_time_sec_;
}
inline void SingleTestResult_PerformanceData::set_elapsed_time_sec(float value) {
  set_has_elapsed_time_sec();
  elapsed_time_sec_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.PerformanceData.elapsed_time_sec)
}

// optional float average_ms_per_iteration = 3;
inline bool SingleTestResult_PerformanceData::has_average_ms_per_iteration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleTestResult_PerformanceData::set_has_average_ms_per_iteration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleTestResult_PerformanceData::clear_has_average_ms_per_iteration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleTestResult_PerformanceData::clear_average_ms_per_iteration() {
  average_ms_per_iteration_ = 0;
  clear_has_average_ms_per_iteration();
}
inline float SingleTestResult_PerformanceData::average_ms_per_iteration() const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.PerformanceData.average_ms_per_iteration)
  return average_ms_per_iteration_;
}
inline void SingleTestResult_PerformanceData::set_average_ms_per_iteration(float value) {
  set_has_average_ms_per_iteration();
  average_ms_per_iteration_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.PerformanceData.average_ms_per_iteration)
}

// optional float max_ms_per_iteration = 4;
inline bool SingleTestResult_PerformanceData::has_max_ms_per_iteration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SingleTestResult_PerformanceData::set_has_max_ms_per_iteration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SingleTestResult_PerformanceData::clear_has_max_ms_per_iteration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SingleTestResult_PerformanceData::clear_max_ms_per_iteration() {
  max_ms_per_iteration_ = 0;
  clear_has_max_ms_per_iteration();
}
inline float SingleTestResult_PerformanceData::max_ms_per_iteration() const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.PerformanceData.max_ms_per_iteration)
  return max_ms_per_iteration_;
}
inline void SingleTestResult_PerformanceData::set_max_ms_per_iteration(float value) {
  set_has_max_ms_per_iteration();
  max_ms_per_iteration_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.PerformanceData.max_ms_per_iteration)
}

// optional float cpu_usage = 7;
inline bool SingleTestResult_PerformanceData::has_cpu_usage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SingleTestResult_PerformanceData::set_has_cpu_usage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SingleTestResult_PerformanceData::clear_has_cpu_usage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SingleTestResult_PerformanceData::clear_cpu_usage() {
  cpu_usage_ = 0;
  clear_has_cpu_usage();
}
inline float SingleTestResult_PerformanceData::cpu_usage() const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.PerformanceData.cpu_usage)
  return cpu_usage_;
}
inline void SingleTestResult_PerformanceData::set_cpu_usage(float value) {
  set_has_cpu_usage();
  cpu_usage_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.PerformanceData.cpu_usage)
}

// optional float mem_usage = 8;
inline bool SingleTestResult_PerformanceData::has_mem_usage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SingleTestResult_PerformanceData::set_has_mem_usage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SingleTestResult_PerformanceData::clear_has_mem_usage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SingleTestResult_PerformanceData::clear_mem_usage() {
  mem_usage_ = 0;
  clear_has_mem_usage();
}
inline float SingleTestResult_PerformanceData::mem_usage() const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.PerformanceData.mem_usage)
  return mem_usage_;
}
inline void SingleTestResult_PerformanceData::set_mem_usage(float value) {
  set_has_mem_usage();
  mem_usage_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.PerformanceData.mem_usage)
}

// -------------------------------------------------------------------

// SingleTestResult

// optional string effect_id = 1;
inline bool SingleTestResult::has_effect_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleTestResult::set_has_effect_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleTestResult::clear_has_effect_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleTestResult::clear_effect_id() {
  effect_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_effect_id();
}
inline const ::std::string& SingleTestResult::effect_id() const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.effect_id)
  return effect_id_.GetNoArena();
}
inline void SingleTestResult::set_effect_id(const ::std::string& value) {
  set_has_effect_id();
  effect_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.effect_id)
}
#if LANG_CXX11
inline void SingleTestResult::set_effect_id(::std::string&& value) {
  set_has_effect_id();
  effect_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AAXValResult.SingleTestResult.effect_id)
}
#endif
inline void SingleTestResult::set_effect_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_effect_id();
  effect_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AAXValResult.SingleTestResult.effect_id)
}
inline void SingleTestResult::set_effect_id(const char* value, size_t size) {
  set_has_effect_id();
  effect_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AAXValResult.SingleTestResult.effect_id)
}
inline ::std::string* SingleTestResult::mutable_effect_id() {
  set_has_effect_id();
  // @@protoc_insertion_point(field_mutable:AAXValResult.SingleTestResult.effect_id)
  return effect_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SingleTestResult::release_effect_id() {
  // @@protoc_insertion_point(field_release:AAXValResult.SingleTestResult.effect_id)
  if (!has_effect_id()) {
    return NULL;
  }
  clear_has_effect_id();
  return effect_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SingleTestResult::set_allocated_effect_id(::std::string* effect_id) {
  if (effect_id != NULL) {
    set_has_effect_id();
  } else {
    clear_has_effect_id();
  }
  effect_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), effect_id);
  // @@protoc_insertion_point(field_set_allocated:AAXValResult.SingleTestResult.effect_id)
}

// optional .AAXValResult.SingleTestResult.Triad triad_id = 2;
inline bool SingleTestResult::has_triad_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleTestResult::set_has_triad_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleTestResult::clear_has_triad_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleTestResult::clear_triad_id() {
  if (triad_id_ != NULL) triad_id_->Clear();
  clear_has_triad_id();
}
inline const ::AAXValResult::SingleTestResult_Triad& SingleTestResult::_internal_triad_id() const {
  return *triad_id_;
}
inline const ::AAXValResult::SingleTestResult_Triad& SingleTestResult::triad_id() const {
  const ::AAXValResult::SingleTestResult_Triad* p = triad_id_;
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.triad_id)
  return p != NULL ? *p : *reinterpret_cast<const ::AAXValResult::SingleTestResult_Triad*>(
      &::AAXValResult::_SingleTestResult_Triad_default_instance_);
}
inline ::AAXValResult::SingleTestResult_Triad* SingleTestResult::release_triad_id() {
  // @@protoc_insertion_point(field_release:AAXValResult.SingleTestResult.triad_id)
  clear_has_triad_id();
  ::AAXValResult::SingleTestResult_Triad* temp = triad_id_;
  triad_id_ = NULL;
  return temp;
}
inline ::AAXValResult::SingleTestResult_Triad* SingleTestResult::mutable_triad_id() {
  set_has_triad_id();
  if (triad_id_ == NULL) {
    auto* p = CreateMaybeMessage<::AAXValResult::SingleTestResult_Triad>(GetArenaNoVirtual());
    triad_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AAXValResult.SingleTestResult.triad_id)
  return triad_id_;
}
inline void SingleTestResult::set_allocated_triad_id(::AAXValResult::SingleTestResult_Triad* triad_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete triad_id_;
  }
  if (triad_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      triad_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, triad_id, submessage_arena);
    }
    set_has_triad_id();
  } else {
    clear_has_triad_id();
  }
  triad_id_ = triad_id;
  // @@protoc_insertion_point(field_set_allocated:AAXValResult.SingleTestResult.triad_id)
}

// optional .AAXValResult.SingleTestResult.TestConfig test_config = 3;
inline bool SingleTestResult::has_test_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleTestResult::set_has_test_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleTestResult::clear_has_test_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleTestResult::clear_test_config() {
  if (test_config_ != NULL) test_config_->Clear();
  clear_has_test_config();
}
inline const ::AAXValResult::SingleTestResult_TestConfig& SingleTestResult::_internal_test_config() const {
  return *test_config_;
}
inline const ::AAXValResult::SingleTestResult_TestConfig& SingleTestResult::test_config() const {
  const ::AAXValResult::SingleTestResult_TestConfig* p = test_config_;
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.test_config)
  return p != NULL ? *p : *reinterpret_cast<const ::AAXValResult::SingleTestResult_TestConfig*>(
      &::AAXValResult::_SingleTestResult_TestConfig_default_instance_);
}
inline ::AAXValResult::SingleTestResult_TestConfig* SingleTestResult::release_test_config() {
  // @@protoc_insertion_point(field_release:AAXValResult.SingleTestResult.test_config)
  clear_has_test_config();
  ::AAXValResult::SingleTestResult_TestConfig* temp = test_config_;
  test_config_ = NULL;
  return temp;
}
inline ::AAXValResult::SingleTestResult_TestConfig* SingleTestResult::mutable_test_config() {
  set_has_test_config();
  if (test_config_ == NULL) {
    auto* p = CreateMaybeMessage<::AAXValResult::SingleTestResult_TestConfig>(GetArenaNoVirtual());
    test_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AAXValResult.SingleTestResult.test_config)
  return test_config_;
}
inline void SingleTestResult::set_allocated_test_config(::AAXValResult::SingleTestResult_TestConfig* test_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete test_config_;
  }
  if (test_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      test_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, test_config, submessage_arena);
    }
    set_has_test_config();
  } else {
    clear_has_test_config();
  }
  test_config_ = test_config;
  // @@protoc_insertion_point(field_set_allocated:AAXValResult.SingleTestResult.test_config)
}

// optional float score = 5;
inline bool SingleTestResult::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SingleTestResult::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SingleTestResult::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SingleTestResult::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline float SingleTestResult::score() const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.score)
  return score_;
}
inline void SingleTestResult::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.score)
}

// optional .AAXValResult.SingleTestResult.PerformanceData performance_data = 6;
inline bool SingleTestResult::has_performance_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SingleTestResult::set_has_performance_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SingleTestResult::clear_has_performance_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SingleTestResult::clear_performance_data() {
  if (performance_data_ != NULL) performance_data_->Clear();
  clear_has_performance_data();
}
inline const ::AAXValResult::SingleTestResult_PerformanceData& SingleTestResult::_internal_performance_data() const {
  return *performance_data_;
}
inline const ::AAXValResult::SingleTestResult_PerformanceData& SingleTestResult::performance_data() const {
  const ::AAXValResult::SingleTestResult_PerformanceData* p = performance_data_;
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.performance_data)
  return p != NULL ? *p : *reinterpret_cast<const ::AAXValResult::SingleTestResult_PerformanceData*>(
      &::AAXValResult::_SingleTestResult_PerformanceData_default_instance_);
}
inline ::AAXValResult::SingleTestResult_PerformanceData* SingleTestResult::release_performance_data() {
  // @@protoc_insertion_point(field_release:AAXValResult.SingleTestResult.performance_data)
  clear_has_performance_data();
  ::AAXValResult::SingleTestResult_PerformanceData* temp = performance_data_;
  performance_data_ = NULL;
  return temp;
}
inline ::AAXValResult::SingleTestResult_PerformanceData* SingleTestResult::mutable_performance_data() {
  set_has_performance_data();
  if (performance_data_ == NULL) {
    auto* p = CreateMaybeMessage<::AAXValResult::SingleTestResult_PerformanceData>(GetArenaNoVirtual());
    performance_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AAXValResult.SingleTestResult.performance_data)
  return performance_data_;
}
inline void SingleTestResult::set_allocated_performance_data(::AAXValResult::SingleTestResult_PerformanceData* performance_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete performance_data_;
  }
  if (performance_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      performance_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, performance_data, submessage_arena);
    }
    set_has_performance_data();
  } else {
    clear_has_performance_data();
  }
  performance_data_ = performance_data;
  // @@protoc_insertion_point(field_set_allocated:AAXValResult.SingleTestResult.performance_data)
}

// repeated string logs = 9;
inline int SingleTestResult::logs_size() const {
  return logs_.size();
}
inline void SingleTestResult::clear_logs() {
  logs_.Clear();
}
inline const ::std::string& SingleTestResult::logs(int index) const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.logs)
  return logs_.Get(index);
}
inline ::std::string* SingleTestResult::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValResult.SingleTestResult.logs)
  return logs_.Mutable(index);
}
inline void SingleTestResult::set_logs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.logs)
  logs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SingleTestResult::set_logs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:AAXValResult.SingleTestResult.logs)
  logs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SingleTestResult::set_logs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  logs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AAXValResult.SingleTestResult.logs)
}
inline void SingleTestResult::set_logs(int index, const char* value, size_t size) {
  logs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AAXValResult.SingleTestResult.logs)
}
inline ::std::string* SingleTestResult::add_logs() {
  // @@protoc_insertion_point(field_add_mutable:AAXValResult.SingleTestResult.logs)
  return logs_.Add();
}
inline void SingleTestResult::add_logs(const ::std::string& value) {
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AAXValResult.SingleTestResult.logs)
}
#if LANG_CXX11
inline void SingleTestResult::add_logs(::std::string&& value) {
  logs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AAXValResult.SingleTestResult.logs)
}
#endif
inline void SingleTestResult::add_logs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  logs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AAXValResult.SingleTestResult.logs)
}
inline void SingleTestResult::add_logs(const char* value, size_t size) {
  logs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AAXValResult.SingleTestResult.logs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SingleTestResult::logs() const {
  // @@protoc_insertion_point(field_list:AAXValResult.SingleTestResult.logs)
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SingleTestResult::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:AAXValResult.SingleTestResult.logs)
  return &logs_;
}

// repeated .AAXValResult.DataTree tree = 10;
inline int SingleTestResult::tree_size() const {
  return tree_.size();
}
inline void SingleTestResult::clear_tree() {
  tree_.Clear();
}
inline ::AAXValResult::DataTree* SingleTestResult::mutable_tree(int index) {
  // @@protoc_insertion_point(field_mutable:AAXValResult.SingleTestResult.tree)
  return tree_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree >*
SingleTestResult::mutable_tree() {
  // @@protoc_insertion_point(field_mutable_list:AAXValResult.SingleTestResult.tree)
  return &tree_;
}
inline const ::AAXValResult::DataTree& SingleTestResult::tree(int index) const {
  // @@protoc_insertion_point(field_get:AAXValResult.SingleTestResult.tree)
  return tree_.Get(index);
}
inline ::AAXValResult::DataTree* SingleTestResult::add_tree() {
  // @@protoc_insertion_point(field_add:AAXValResult.SingleTestResult.tree)
  return tree_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AAXValResult::DataTree >&
SingleTestResult::tree() const {
  // @@protoc_insertion_point(field_list:AAXValResult.SingleTestResult.tree)
  return tree_;
}

// -------------------------------------------------------------------

// Summary

// optional sint32 total = 1;
inline bool Summary::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Summary::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Summary::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Summary::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 Summary::total() const {
  // @@protoc_insertion_point(field_get:AAXValResult.Summary.total)
  return total_;
}
inline void Summary::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.Summary.total)
}

// optional sint32 failed = 2;
inline bool Summary::has_failed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Summary::set_has_failed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Summary::clear_has_failed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Summary::clear_failed() {
  failed_ = 0;
  clear_has_failed();
}
inline ::google::protobuf::int32 Summary::failed() const {
  // @@protoc_insertion_point(field_get:AAXValResult.Summary.failed)
  return failed_;
}
inline void Summary::set_failed(::google::protobuf::int32 value) {
  set_has_failed();
  failed_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.Summary.failed)
}

// optional sint32 successful = 3;
inline bool Summary::has_successful() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Summary::set_has_successful() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Summary::clear_has_successful() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Summary::clear_successful() {
  successful_ = 0;
  clear_has_successful();
}
inline ::google::protobuf::int32 Summary::successful() const {
  // @@protoc_insertion_point(field_get:AAXValResult.Summary.successful)
  return successful_;
}
inline void Summary::set_successful(::google::protobuf::int32 value) {
  set_has_successful();
  successful_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.Summary.successful)
}

// optional sint32 not_run = 5;
inline bool Summary::has_not_run() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Summary::set_has_not_run() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Summary::clear_has_not_run() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Summary::clear_not_run() {
  not_run_ = 0;
  clear_has_not_run();
}
inline ::google::protobuf::int32 Summary::not_run() const {
  // @@protoc_insertion_point(field_get:AAXValResult.Summary.not_run)
  return not_run_;
}
inline void Summary::set_not_run(::google::protobuf::int32 value) {
  set_has_not_run();
  not_run_ = value;
  // @@protoc_insertion_point(field_set:AAXValResult.Summary.not_run)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AAXValResult

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::AAXValResult::EResultStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AAXValResult::EResultStatus>() {
  return ::AAXValResult::EResultStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_AAXValidator_5fResult_2eproto
