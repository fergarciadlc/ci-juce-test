package AAXValConfig;

/** @file
	
 @brief Google Protocol Buffer message definitions for the AAX Validator configuration
 structure
 
 */

/** @defgroup AAXValidator_Config_Messages Configuration messages
 
 @brief Google Protocol Buffer message definitions for the AAX Validator configuration
 structure
 
 @details
 
 	\dotfile aaxvalidator_config_structure.dot "Configuration message structure"

 In general, users will select and run test @ref TestCollection "collections" (high level)
 or @ref AAXValConfig::TestModule "modules" (low level) rather than explicitly triggering
 individual @ref AAXValConfig::Test "tests".
 
 @sa @ref AAXVal_GetConfiguration
 @sa @ref kAAXVal_Format_Protobuf_Data
 @sa @ref kAAXVal_Format_Protobuf_Text  
 
 */

/** @namespace AAXValConfig
 
 @ingroup AAXValidator_Config_Messages
 */

/** @class AAXValConfig::Configuration
 
 @brief Complete configuration wrapper
 
 @details
 
 @ingroup AAXValidator_Config_Messages
 */
message Configuration {
	repeated Category category = 1;
	repeated TestCollection collection = 2;
	repeated TestModule module = 3;
	repeated Test test = 4;
	repeated Process process = 5;
	repeated ParamFormat param_format = 6;
	repeated EnumSInt32Format enum_sint32_format = 7;
	repeated Constraints constraints = 8;
}

/** @class AAXValConfig::Category
 
 @brief Test category
 
 @details
 Test categories describe areas of test coverage, such as particular platforms or
 features. @ref AAXValConfig::Constraints may optionally be placed on each category to limit tests
 in the category to certain environments. 
 
 @ingroup AAXValidator_Config_Messages
 */
message Category {
	required string id = 1;
	repeated string name = 2;
	repeated string description = 3;
	
	optional Constraints constraints = 13;
}

/** @class AAXValConfig::TestCollection
 
 @brief High-level collection of @ref AAXValConfig::Test "tests"
 
 @details
 A test collection represents a high-level group of tests that are topically related.
 
 @ingroup AAXValidator_Config_Messages
 */
message TestCollection {
	required string id = 1;
	repeated string name = 2;
	repeated string description = 3;
}

/** @class AAXValConfig::TestModule
 
 @brief @ref AAXValConfig::Test "Test" module
 
 @details
 A test module represents a group of tests that are designed to be run together in a
 single test event.
 
 Each @ref AAXValConfig::TestModule can be assigned to multiple
 @ref AAXValConfig::TestCollection "collections"
 
 @ingroup AAXValidator_Config_Messages
 */
message TestModule {
	required string id = 1;
	repeated string name = 2;
	repeated string description = 3;

	repeated string collection_id = 11;
}

/** @class AAXValConfig::Test
 
 @brief A single runnable test
 
 @details
 A @ref AAXValConfig::Test "Test" includes all necessary information for categorizing and
 running a single test.
 
 - Each test may be associated with one or more
 @ref AAXValConfig::TestModule "modules".
 - Each test may be associated with one or more
 @ref AAXValConfig::Category "categories".
 
 @ingroup AAXValidator_Config_Messages
 */
message Test {
	required string id = 1;								///< Identifier for this test
	repeated string name = 2;							///< One or more short names for the test. Multiple names can be provided at a variety of lengths. The client will pick the most appropriate length to display.
	repeated string description = 3;					///< One or more strings describing the test. Multiple descriptions can be provided at a variety of lengths. The client will pick the most appropriate length to display.
	repeated string module_id = 4;						///< One or more @ref AAXValConfig::TestModule "modules" which contain this test
	repeated string category_id = 5;					///< One or more @ref AAXValConfig::Category "categories" which contain this test
	repeated Condition condition = 6;					///< Documentation of conditions checked by this test
	
	optional string process_id = 8;						///< @note required by clients
	optional Arguments arguments = 9;					///< Any additional process arguments for this test

	repeated ParamFormat param_format = 13;				///< Custom parameter formatting to use for this Test @details This may override a global @ref AAXValConfig::ParamFormat with the same id
	optional Constraints constraints = 14;
	
	optional string version = 20;						///< @todo Remove @ref AAXValConfig::Test::version if it will not be used
	optional sint32 build = 21;							///< @todo Remove @ref AAXValConfig::Test::build if it will not be used
	
	/** @class AAXValConfig::Test::Condition
	 
	 @brief A condition checked by a @ref AAXValConfig::Test "Test"
	 */
	message Condition {
		required string id = 1;
		optional EConditionType type = 2 [default = E_CONDITIONTYPE_UNKNOWN];
		optional string description = 3;
		
		/** @enum EConditionType
		 
		 @details
		 @note Additional enum definitions may be added in the future to
		 provide constraints for specific OS version ranges, if needed

		 @memberof AAXValConfig::Test::Condition
		 */
		enum EConditionType {
			E_CONDITIONTYPE_UNKNOWN = 0; ///< Used for backwards-compatibility if the enum has been extended
			E_CONDITIONTYPE_PASS = 1; ///< An explicit pass condition
			E_CONDITIONTYPE_FAIL = 2; ///< An explicit fail condition
			E_CONDITIONTYPE_WARN = 3; ///< A condition which will trigger a warning log but not a failure
		}
	}
}

/** @class AAXValConfig::Process

 @ingroup AAXValidator_Config_Messages
 */
message Process {
	required string id = 1;
	repeated string name = 2;
	repeated string description = 3;

	repeated PlatformProcess platform_process = 4;
	optional Arguments arguments = 5;
	
	/** @class AAXValConfig::Process::PlatformProcess

	 */
	message PlatformProcess {
		optional EPlatform platform = 2 [default = E_PLATFORM_UNKNOWN]; ///< target platform
		optional string invocation = 3;					///< process invocation
		optional Arguments arguments = 4;				///< platform-specific argument list. This list will be merged with the parent @ref AAXValConfig::Process "process" message argument list.
	
		/** @enum EPlatform
		 
		 @details
		 @note Additional platform enum definitions may be added in the future to
		 provide constraints for specific OS version ranges, if needed

		 @memberof AAXValConfig::Process::PlatformProcess
		 */
		enum EPlatform {
			E_PLATFORM_UNKNOWN = 0; ///< Used for backwards-compatibility if the enum has been extended
			E_PLATFORM_OSX = 1; ///< OS X
			E_PLATFORM_WIN = 2; ///< Windows
		}
	}
}

/** @class AAXValConfig::ParamFormat
 
 @brief Parameter formatting information
 
 @details
 This is the formatting configuration for a test parameter, not the actual parameter
 value. This information is used by clients to format their display of test output data.
 
 @ingroup AAXValidator_Config_Messages
 */
message ParamFormat {
	required string id = 1;
	repeated string name = 2;
	repeated string description = 3;
	
	optional EValueType value_type = 8 [default = E_VALUETYPE_UNKNOWN]; ///< @note required by clients
	optional string units = 9 [default = ""];
	optional string value_format_id = 10; 				///< @brief Used to link a custom formatter @details For example, an AAXValConfig::EnumSInt32Format::id for ENUM ValueType)
	optional EDisplayLevel display_level = 11 [default = E_DISPLAYLEVEL_UNKNOWN];
	
	/** @enum EValueType
	 */
	enum EValueType {
		E_VALUETYPE_UNKNOWN = 0; ///< Used for backwards-compatibility if the enum has been extended
		E_SINT32 = 1;		///< 32-bit signed int
		E_UINT32 = 2;		///< 32-bit unsigned int
		E_FLOAT = 3;		///< 32-bit float
		E_DOUBLE = 4; 		///< 64-bit double
		E_STRING = 5; 		///< 8-bit C string
		E_ENUM_SINT32 = 6;	///< Signed 32-bit enum formatted using the EnumSInt32Format identified with value_format_id
		E_RAW = 15; 		///< Raw binary data
	}
	
	/** @enum EDisplayLevel
	 */
	enum EDisplayLevel {
		E_DISPLAYLEVEL_UNKNOWN = 0; ///< Used for backwards-compatibility if the enum has been extended
		E_DEBUG = 2;		///< Parameter information will only be displayed when debugging
		E_VERBOSE = 4;		///< Parameter information will be displayed when in verbose mode
		E_NORMAL = 8;		///< Parameter information will be displayed under normal circumstances
		E_ALWAYS = 12;		///< Parameter information will always be displayed
	}
}

/** @class AAXValConfig::EnumSInt32Format
 
 @brief Formatting configuration for parameter value with the @c ENUM ValueType and
 @c sint32 values
 
 @details
 
 @ingroup AAXValidator_Config_Messages
 */
message EnumSInt32Format {
	required string id = 1;
	repeated ValuePair value_pair = 2;
	
	/** @class AAXValConfig::EnumSInt32Format::ValuePair
	 */
	message ValuePair {
		required sint32 value = 1;
		repeated string description = 2;
	}
}

/** @class AAXValConfig::Constraints
 
 @brief 
 
 @details

 @todo I am not sure if this is the best format for constraints. We might need other
 kinds of flexibility. Possibly reserve some range(s) for Extensions in other .proto
 files defined by specific tests.
 
 @ingroup AAXValidator_Config_Messages
 */
message Constraints {	
	repeated System system = 1;
	
	optional sint64 min_memory_bytes = 8;
	optional sint64 max_memory_bytes = 9;
	optional sint64 min_drive_bytes = 10;
	optional sint64 max_drive_bytes = 11;
	optional sint64 min_cpu_cores = 12;
	optional sint64 max_cpu_cores = 13;
	optional sint64 min_cpu_core_hz = 14;
	optional sint64 max_cpu_core_hz = 15;
	
	extensions 1000 to 9999;							///< @todo How should we manage extensions to @ref AAXValConfig::Constraints?
	
	/** @class AAXValConfig::Constraints::System
	 */
	message System {
		optional EType type = 1 [default = E_TYPE_UNKNOWN];
		optional float min_version = 2;
		optional float max_version = 3;
		
		/** @enum EType
		 */
		enum EType {
			E_TYPE_UNKNOWN = 0; ///< Used for backwards-compatibility if the enum has been extended
			E_NATIVE = 1;
			E_HDX = 2;
			E_S3L = 3;
		}
	}
}

/** @class AAXValConfig::Arguments
 
 @details
 This is a dedicated message type used for process argument lists. This is broken into a dedicated
 message type in order to make it easy to merge argument lists from different levels of the config.
 
 @note If the argument order for a particular test or process is important then the arguments list
 should be provided in a single @ref AAXValConfig::Arguments message. This may require omitting
 arguments entirely from the @ref AAXValConfig::Process configuration and only adding them at the
 individual @ref AAXValConfig::Test level.

 @note This message is not included in the @ref AAXValConfig::Configuration message directly; it is
 only included via various @ref AAXValConfig::Test, @ref AAXValConfig::Process, etc. config
 messages.
 */
message Arguments {
	repeated string elem = 1;
}
