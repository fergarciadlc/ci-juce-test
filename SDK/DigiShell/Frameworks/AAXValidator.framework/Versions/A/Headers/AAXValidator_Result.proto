package AAXValResult;

/** @file
	
 @brief Google Protocol Buffer message definitions for the AAX Validator Script Result structure
 
 */

/** @defgroup AAXValidator_Result_Messages Result messages
 
 @brief Google Protocol Buffer message definitions for AAX Validator test results
 
 @details
 
 @internal
 Unsupported Features for Ruby Protocol Buffers:
 - extensions
 - packed option (could be useful)
 - accessing custom options
 @endinternal
 
 */
 
/** @namespace AAXValResult
 
 @ingroup AAXValidator_Result_Messages
 */

/** @enum AAXValResult::EResultStatus
 
 @ingroup AAXValidator_Result_Messages
 */
enum EResultStatus {
	E_RESULTSTATUS_UNKNOWN = 0;	///< Used for backwards-compatibility if the enum has been extended

	E_COMPLETED_PASS = 1;	///< Test completed and passed, or pass/fail distinction is not applicable
	E_COMPLETED_FAIL = 2;	///< Test completed and failed
	
	E_LOST = 4; ///< We don't know what happened, but we lost the test
	E_TIMEOUT = 5; ///< The test was still running when a host timeout occurred
	E_ABORTED = 6;	///< Process was terminated, e.g. by ^C or force quit
	E_CANCELED = 7;	///< Process was canceled with a non-error, e.g. the test found that this test is inapplicable for the given plug-in (like a TI-specific test for a Native plug-in)
}

/** @class AAXValResult::DataTree
	
 @brief An arbitrary string-based data tree, similar to boost::ptree
 
 @ingroup AAXValidator_Result_Messages
 */
message DataTree {
	optional string data = 1; 
	repeated DataTree tree = 2; 
}

/** @class AAXValResult::Result
	
 @brief Test result message
 
 @details
 Each test is required to return a single Result message
  
 @ingroup AAXValidator_Result_Messages
 */
message Result {
	repeated SingleTestResult result = 1; ///< Result data for each sub-test within the test
	optional Summary summary = 2; ///< High-level summary
	optional EResultStatus result_status = 3 [default = E_RESULTSTATUS_UNKNOWN]; ///< Test status on completion

	optional uint64 connection_id = 4; ///< Identifies the test that this is a result for
}

/** @class AAXValResult::SingleTestResult
	
 @brief Test sub-result message
 
 @details
 A single "Test" may acutally involve multiple sub-tests run with different
 parameterizations, e.g. a sub-test for each sample rate. Each sub-test provides its
 results via a \ref AAXValResult::SingleTestResult "SingleTestResult".

 @ingroup AAXValidator_Result_Messages
 */
message SingleTestResult {
	optional string effect_id = 1; ///< The tested Effect ID, if applicable
	optional Triad triad_id = 2; ///< The tested plug-in type triad, if applicable
	optional TestConfig test_config = 3; ///< Supplemental test configuration data

	optional float score = 5; ///< A score for the test result
	optional PerformanceData performance_data = 6; ///< Performance results from the test
	
	repeated string logs = 9; ///< Logging information
	repeated DataTree tree = 10; ///< Arbitrary tree of supplemental test data
	
	/** @class AAXValResult::SingleTestResult::Triad
	 */
	message Triad {
		required uint32 manufacture_id = 1; 
		required uint32 product_id = 2; 
		required uint32 plugin_id = 3; 
	}
	
	/** @class AAXValResult::SingleTestResult::TestConfig
	 */
	message TestConfig {
		repeated DataTree tree = 1; ///< Arbitrary tree of supplemental test configuration data
	}

	/** @class AAXValResult::SingleTestResult::PerformanceData
	 */
	message PerformanceData {
		optional float started_wall_clock_sec = 1; ///< universal start time against some epoch

		optional float elapsed_time_sec = 2; ///< elapsed time for the test work
		optional float average_ms_per_iteration = 3; ///< average ms per inner loop
		optional float max_ms_per_iteration = 4; ///< max ms per inner loop

		optional float cpu_usage = 7; 
		optional float mem_usage = 8; 
	}
}

/** @class AAXValResult::Summary
	
 @brief Summary of sub-tests within a single test

 @ingroup AAXValidator_Result_Messages
 */
message Summary {
	optional sint32 total = 1;	///< Total number of sub-tests
 	
	optional sint32 failed = 2;	///< Total number of completed fail or not completed sub-tests
	optional sint32 successful = 3;	///< number of completed successful sub-tests

	optional sint32 not_run = 5;	///< Number of tests that were aborted, canceled, or otherwise not run
}
