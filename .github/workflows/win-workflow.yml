name: Windows Pipeline

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
    - develop

env:
  PLUGIN_NAME: ci-cmake-juce
  PLUGIN_VERSION: 1_0_0
  # PLUGINS_FOLDER: plugins
  INSTALLER_PLUGINS_FOLDER: installers/win
  PLUGIN_INSTALLER_URI: gs://webearcandy.appspot.com/ci-cmake-juce/ci-cmake-juce.exe
  PLUGINVAL_URI: gs://webearcandy.appspot.com/ci-utils/validators/pluginval_Windows.zip
  AAXVAL_URI: gs://webearcandy.appspot.com/ci-utils/validators/aaxval_win.zip
  PUBLIC_STORAGE_URL: https://storage.googleapis.com/webearcandy.appspot.com

jobs:

  remove-old-artifacts:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
    - name: Remove old artifacts
      uses: c-hive/gha-remove-artifacts@v1
      with:
        age: '5 days'

  # Matrix Preparation for OS
  matrix_prep:
    if: contains(toJson(github.event.commits), '/no-ci') == false && contains(toJson(github.event.commits), '/no-win') == false
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      PLUGIN_NAME_OUT: ${{ env.PLUGIN_NAME }}
    steps:
      - uses: actions/checkout@v2      
      - id: set-matrix
        uses: JoshuaTheMiller/conditional-build-matrix@main        
        with:
          inputFile: '.github/workflows/win_matrix.json'
          filter: '[?runOnBranch==`${{ github.ref }}` || runOnBranch==`main`]'

  # Unit tests
  unit-test:
    name: Unit Testing on ${{ matrix.runs_on }}
    needs: matrix_prep
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}

    steps:
    - name: Run Unit Testing on ${{ matrix.runs_on }}
      run: |
        if ( ${{ contains(toJson(github.event.commits), '/no-ut') }} ); then
          echo "/no-ut in commit message, skipping unit tests"
        else
          echo "running uts"
        fi

  # Building
  build:
    name: Build on ${{ matrix.runs_on }}
    needs: [matrix_prep, unit-test]
    if: contains(toJson(github.event.commits), '/no-build') == false
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}

    steps:
    - name: Get latest CMake
      uses: lukka/get-cmake@latest

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Configure Cmake
      run: cmake -Bbuild

    - name: Build Plug-ins
      run: cmake --build build --config Release

    - name: Copy Builds to Plug-Ins Folder
      run: |
        echo "Copy AAX to Plug-Ins Folder"
        mkdir ${{ env.PLUGINS_FOLDER }}/AAX/
        move "C:\Program Files\Common Files/Avid/Audio/Plug-Ins/." ${{ env.PLUGINS_FOLDER }}/AAX/

        echo "Copy VST to Plug-Ins Folder"
        mkdir ${{ env.PLUGINS_FOLDER }}/VST/
        move "C:\Program Files/Steinberg/Vstplugins/." ${{ env.PLUGINS_FOLDER }}/VST/
        
        echo "Copy VST3 to Plug-Ins Folder"
        mkdir ${{ env.PLUGINS_FOLDER }}/VST3/
        move "C:\Program Files\Common Files/VST3/." ${{ env.PLUGINS_FOLDER }}/VST3/


    - uses: actions/upload-artifact@v3
      with:
        name: plugins-folder-artifact
        path: ${{ env.PLUGINS_FOLDER }}

  # Validation
  validate:
    name: Validate on ${{ matrix.runs_on }}
    needs: [matrix_prep, build]
    if: contains(toJson(github.event.commits), '/no-validate') == false
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}
    #env:
    #  PLUGINVAL_WIN_URL: "https://firebasestorage.googleapis.com/v0/b/webearcandy.appspot.com/o/ci-utils%2Fvalidators%2Fpluginval_Windows.zip?alt=media&token=10881b3e-2bb3-4d15-8f3c-f48f229ebbf6"
    #  AAXVAL_WIN_URL: "https://firebasestorage.googleapis.com/v0/b/webearcandy.appspot.com/o/ci-utils%2Fvalidators%2Faaxval_win.zip?alt=media&token=de939711-5a0b-41e6-95d7-a3bbf6637eee"

    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@master
      with:
        name: plugins-folder-artifact
        path: ${{ env.PLUGINS_FOLDER }}

    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up gcloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Prepare pluginval
      run: | 
        gsutil -m cp -r "${{ env.PLUGINVAL_URI }}" .
        powershell -Command "Expand-Archive pluginval_Windows.zip -DestinationPath ."

    - name: Prepare aaxval
      run: |
        gsutil -m cp -r "${{ env.AAXVAL_URI }}" .
        tar -xf aaxval_win.zip

    - name: Generating VST and VST3 Validation Script
      run: |
        echo '
          PLUGIN_PATH=$1

          echo "OS: ${OSTYPE}"
          echo "Validating ${PLUGIN_PATH}"

          ./pluginval.exe \
            --strictness-level 5 \
            --validate-in-process \
            --validate $PLUGIN_PATH \
            --output-dir pluginval-logs \
            --timeout-ms 500000;
        ' > validate.sh

    - name: Generating AAX Validation Script
      run: |
        echo '
          PLUGIN_PATH=$1

          echo "
          load_dish aaxval
          runtest [info.productids, ${PLUGIN_PATH}]
          runtest [info.support.audiosuite, ${PLUGIN_PATH}]
          runtest [info.support.general, ${PLUGIN_PATH}]
          runtest [info.support.s6_feature, ${PLUGIN_PATH}]
          runtest [test.load_unload, ${PLUGIN_PATH}]
          runtest [test.page_table.automation_list, ${PLUGIN_PATH}]
          runtest [test.parameter_traversal.linear, ${PLUGIN_PATH}]
          runtest [test.parameter_traversal.random, ${PLUGIN_PATH}]
          runtest [test.parameter_traversal.random.fast, ${PLUGIN_PATH}]
          runtest [test.parameters, ${PLUGIN_PATH}]
          exit
          " | start aaxval_win/dsh.exe
        ' > validate_aax.sh

    - name: Validate VST
      run: bash validate.sh "${{ env.PLUGINS_FOLDER }}\VST\Vstplugins\${{ env.PLUGIN_NAME }}.dll"

    - name: Validate VST3
      run: bash validate.sh "${{ env.PLUGINS_FOLDER }}\VST3\VST3\${{ env.PLUGIN_NAME }}.vst3"

    - name: Validate AAX
      run: bash validate_aax.sh "${{ env.PLUGINS_FOLDER }}\AAX\Plug-Ins\${{ env.PLUGIN_NAME }}.aaxplugin\Contents\x64\${{ env.PLUGIN_NAME }}.aaxplugin"

  # Signing
  sign:
    name: Sign on ${{ matrix.runs_on }}
    needs: [matrix_prep, build, validate]
    if: contains(toJson(github.event.commits), '/no-sign') == false
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}

    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@master
      with:
        name: plugins-folder-artifact
        path: ${{ env.PLUGINS_FOLDER }}

    - name: Generating Signing Script
      run: |
        echo '
          PLUGIN_PATH=$1
          WRAPTOOL_PATH=$2
          ILOK_MAIL=$3
          ILOK_PASSWORD=$4
          APPLE_DEVELOPER=$5
          PACE_GUID=$6

          echo "OS: ${OSTYPE}"
          echo "Signing ${PLUGIN_PATH}"

          $WRAPTOOL_PATH sign \
            --verbose \
            --account $ILOK_MAIL \
            --password $ILOK_PASSWORD \
            --signid $APPLE_DEVELOPER \
            --wcguid $PACE_GUID \
            --in $PLUGIN_PATH \
            --out $PLUGIN_PATH \
            --allowsigningservice
          $WRAPTOOL_PATH verify --verbose --in $PLUGIN_PATH
          
        ' > sign_mac.sh

    - name: Sign Plug-Ins
      run: |
        echo "Sign AAX"
        echo "Sign VST"
        echo "Sign VST3"
  
  # Packaging
  Packaging:
    name: Packaging on ${{ matrix.runs_on }}
    needs: [matrix_prep, build, validate, sign]
    if: contains(toJson(github.event.commits), '/no-packaging') == false
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}
    outputs:
      PUBLIC_NAME: ${{ env.PLUGIN_NAME }}
      INSTALLER_PUBLIC_URL: ${{ env.PUBLIC_STORAGE_URL }}/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}_${{ env.PLUGIN_VERSION }}.exe

    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@master
      with:
        name: plugins-folder-artifact
        path: ${{ env.PLUGINS_FOLDER }}

    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up gcloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: See tree
      run: tree /f

    - name: Move Plug-Ins to Repository
      run: | 
        mkdir "${{ env.PLUGINS_FOLDER }}/plugins"
        move "${{ env.PLUGINS_FOLDER }}\VST\Vstplugins\${{ env.PLUGIN_NAME }}.dll"     "${{ env.INSTALLER_PLUGINS_FOLDER }}/plugins"
        move "${{ env.PLUGINS_FOLDER }}\VST3\VST3\${{ env.PLUGIN_NAME }}.vst3"         "${{ env.INSTALLER_PLUGINS_FOLDER }}/plugins"
        move "${{ env.PLUGINS_FOLDER }}\AAX\Plug-Ins\${{ env.PLUGIN_NAME }}.aaxplugin" "${{ env.INSTALLER_PLUGINS_FOLDER }}/plugins"

    - name: Build installer
      run: iscc ${{ env.INSTALLER_PLUGINS_FOLDER }}/${{ env.PLUGIN_NAME }}.iss

    - name: Upload to GCP Bucket
      run: | 
        gcloud storage \ 
        cp "${{ env.INSTALLER_PLUGINS_FOLDER }}\build\${{ env.PLUGIN_NAME }}_${{ env.VERSION }}.exe" \
        "${{ env.PLUGIN_INSTALLER_URI }}/${{ env.PLUGIN_NAME }}_${{ env.VERSION }}.exe"

    - name: Make file public
      run: gsutil acl ch -u AllUsers:R "${{ env.PLUGIN_INSTALLER_URI }}/${{ env.PLUGIN_NAME }}_${{ env.VERSION }}.exe"

  # Notification
  notification:
    name: Notify on ${{ matrix.runs_on }}
    needs: [matrix_prep, build, validate, sign, packaging]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    env:
      PLUGIN_NAME: ${{ needs.packaging.outputs.PUBLIC_NAME }}
      URL: ${{ needs.packaging.outputs.INSTALLER_PUBLIC_URL }}

    steps:
    - name: Push Notification on Discord
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_HOOK_ID }}
      uses: Ilshidur/action-discord@master
      with:
        args: '{{ PLUGIN_NAME }} (${{ env.VERSION }}) installer: {{ URL }}'