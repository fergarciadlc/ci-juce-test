name: Windows Pipeline

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  PLUGIN_NAME: ci-cmake-juce
  PLUGINS_FOLDER: plugins
  INSTALLER_PLUGINS_FOLDER: installers/windows
  VALIDATORS_PATH: gs://webearcandy.appspot.com/ci-utils/validators
  BUCKET_NAME: gs://webearcandy.appspot.com

jobs:

  # Matrix Preparation for OS
  matrix_prep:
    if: contains(toJson(github.event.commits), '/no-ci') == false && contains(toJson(github.event.commits), '/no-win') == false
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      PLUGIN_NAME_OUT: ${{ env.PLUGIN_NAME }}
    steps:
      - uses: actions/checkout@v2      
      - id: set-matrix
        uses: JoshuaTheMiller/conditional-build-matrix@main        
        with:
          inputFile: '.github/workflows/win_matrix.json'
          filter: '[?runOnBranch==`${{ github.ref }}` || runOnBranch==`main`]'

  # Unit tests
  unit-test:
    name: Unit Testing on ${{ matrix.runs_on }}
    needs: matrix_prep
    if: contains(toJson(github.event.commits), '/no-ut') == false
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}

    steps:
    - name: Run Unit Testing on ${{ matrix.runs_on }}
      if: runner.os == 'Windows'
      run: echo "Unit testing"

  # Building
  build:
    name: Build on ${{ matrix.runs_on }}
    needs: [matrix_prep, unit-test]
    if: contains(toJson(github.event.commits), '/no-build') == false
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}

    steps:
    - name: Get latest CMake
      uses: lukka/get-cmake@latest

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Configure Cmake
      run: cmake -Bbuild

    - name: Build for Windows
      if: runner.os == 'Windows'
      run: cmake --build build --config Release

    - name: Copy AAX to Plug-Ins Folder
      if: runner.os == 'Windows'
      run: |
        mkdir ${{ env.PLUGINS_FOLDER }}/AAX/
        move "C:\Program Files\Common Files/Avid/Audio/Plug-Ins/." ${{ env.PLUGINS_FOLDER }}/AAX/

    - name: Copy VST to Plug-Ins Folder
      if: runner.os == 'Windows'
      run: |
        mkdir ${{ env.PLUGINS_FOLDER }}/VST/
        move "C:\Program Files/Steinberg/Vstplugins/." ${{ env.PLUGINS_FOLDER }}/VST/

    - name: Copy VST3 to Plug-Ins Folder
      if: runner.os == 'Windows'
      run: |
        mkdir ${{ env.PLUGINS_FOLDER }}/VST3/
        move "C:\Program Files\Common Files/VST3/." ${{ env.PLUGINS_FOLDER }}/VST3/

    - uses: actions/upload-artifact@v3
      with:
        name: plugins-folder-artifact
        path: ${{ env.PLUGINS_FOLDER }}

  # Validation
  validate:
    name: Validate on ${{ matrix.runs_on }}
    needs: [matrix_prep, build]
    if: contains(toJson(github.event.commits), '/no-validate') == false
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}
    env:
      #PLUGINVAL_WIN_URL: ${{ secrets.PLUGINVAL_MAC_URL }}
      PLUGINVAL_WIN_URL: "https://firebasestorage.googleapis.com/v0/b/webearcandy.appspot.com/o/ci-utils%2Fvalidators%2Fpluginval_Windows.zip?alt=media&token=10881b3e-2bb3-4d15-8f3c-f48f229ebbf6"
      #AAXVAL_WIN_URL: ${{ secrets.AAXVAL_MAC_URL }}
      AAXVAL_WIN_URL: "https://firebasestorage.googleapis.com/v0/b/webearcandy.appspot.com/o/ci-utils%2Fvalidators%2Faaxval_win.zip?alt=media&token=de939711-5a0b-41e6-95d7-a3bbf6637eee"

    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@master
      with:
        name: plugins-folder-artifact
        path: ${{ env.PLUGINS_FOLDER }}

    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up gcloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'

    # - name: Prepare pluginval
    #   run: | 
    #     gsutil -m cp -r "${{ env.VALIDATORS_PATH }}/pluginval_Windows.zip" .
    #     powershell -Command "Expand-Archive pluginval_Windows.zip -DestinationPath ."

    - name: Prepare pluginval
      run: | 
        powershell -Command "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest https://github.com/Tracktion/pluginval/releases/latest/download/pluginval_Windows.zip -OutFile pluginval.zip"
        powershell -Command "Expand-Archive pluginval.zip -DestinationPath ."

    - name: Prepare aaxval
      run: |
        gsutil -m cp -r "${{ env.VALIDATORS_PATH }}/aaxval_win.zip" .
        tar -xf aaxval_win.zip

    - name: Generating VST, VST3 and AU Validation Script
      run: |
        echo '
          PLUGIN_PATH=$1

          echo "OS: ${OSTYPE}"
          echo "Validating ${PLUGIN_PATH}"

          ./pluginval.exe --strictness-level 5 --validate-in-process --validate $PLUGIN_PATH --output-dir pluginval-logs --timeout-ms 500000;
        ' > validate.sh

    - name: Generating AAX Validation Script
      run: |
        echo '
          PLUGIN_PATH=$1

          echo "
          load_dish aaxval
          runtest [info.productids, ${PLUGIN_PATH}]
          runtest [info.support.audiosuite, ${PLUGIN_PATH}]
          runtest [info.support.general, ${PLUGIN_PATH}]
          runtest [info.support.s6_feature, ${PLUGIN_PATH}]
          runtest [test.load_unload, ${PLUGIN_PATH}]
          runtest [test.page_table.automation_list, ${PLUGIN_PATH}]
          runtest [test.parameter_traversal.linear, ${PLUGIN_PATH}]
          runtest [test.parameter_traversal.random, ${PLUGIN_PATH}]
          runtest [test.parameter_traversal.random.fast, ${PLUGIN_PATH}]
          runtest [test.parameters, ${PLUGIN_PATH}]
          exit
          " | start aaxval_win/dsh.exe
        ' > validate_aax.sh

    - name: Log Plug-Ins Folder
      run: cd plugins && tree /f && cd

    - name: Validate VST
      run: bash validate.sh "plugins\VST\Vstplugins\ci-cmake-juce.dll"
      #run: bash validate.sh "${{ env.PLUGINS_FOLDER }}\VST\${{ env.PLUGIN_NAME }}.vst"

    - name: Validate VST3
      run: bash validate.sh "plugins\VST3\VST3\ci-cmake-juce.vst3\Contents\x86_64-win\ci-cmake-juce.vst3"
      #run: bash validate.sh "${{ env.PLUGINS_FOLDER }}\VST3\${{ env.PLUGIN_NAME }}.vst3"

    - name: Validate AAX
      run: bash validate_aax.sh "plugins\AAX\Plug-Ins\ci-cmake-juce.aaxplugin\Contents\x64\ci-cmake-juce.aaxplugin"
      #run: bash validate_aax.sh "${{ env.PLUGINS_FOLDER }}/AAX/${{ env.PLUGIN_NAME }}.aaxplugin"