name: Mac Pipeline

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  PLUGIN_NAME: ci-cmake-juce
  PLUGINS_FOLDER: /Users/runner/Library/Audio/Plug-Ins
  INSTALLER_PLUGINS_FOLDER: installers/mac
  EC_CI_BUCKET: gs://webearcandy.appspot.com
  PLUGIN_INSTALLER_URI: gs://webearcandy.appspot.com/ci-cmake-juce/ci-cmake-juce.pkg
  PLUGINVAL_URI: gs://webearcandy.appspot.com/ci-utils/validators/pluginval_macOS.zip
  AAXVAL_URI: gs://webearcandy.appspot.com/ci-utils/validators/aaxval_mac.zip
  PACKAGES_INSTALLER_URI: gs://webearcandy.appspot.com/ci-utils/Packages.pkg
  PUBLIC_STORAGE_URL: https://storage.googleapis.com/webearcandy.appspot.com

jobs:

  # Matrix Preparation for OS
  matrix_prep:
    if: contains(toJson(github.event.commits), '/no-ci') == false && contains(toJson(github.event.commits), '/no-mac') == false
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      PLUGIN_NAME_OUT: ${{ env.PLUGIN_NAME }}
    steps:
      - uses: actions/checkout@v2      
      - id: set-matrix
        uses: JoshuaTheMiller/conditional-build-matrix@main        
        with:
          inputFile: '.github/workflows/mac_matrix.json'
          filter: '[?runOnBranch==`${{ github.ref }}` || runOnBranch==`main`]'

  # Unit tests
  unit-test:
    name: Unit Testing on ${{ matrix.runs_on }}
    needs: matrix_prep
    if: contains(toJson(github.event.commits), '/no-ut') == false
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}

    steps:
    - name: Run Unit Testing on ${{ matrix.runs_on }}
      run: echo "Unit testing"

  # Building
  build:
    name: Build on ${{ matrix.runs_on }}
    needs: [matrix_prep, unit-test]
    if: contains(toJson(github.event.commits), '/no-build') == false
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}

    steps:
    - name: Get latest CMake
      uses: lukka/get-cmake@latest

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Configure Cmake
      run: cmake -Bbuild

    - name: Build for MacOS
      run: sudo cmake --build build --config Release

    - name: Copy AAX to Plug-Ins Folder
      run: |
        sudo mkdir ${{ env.PLUGINS_FOLDER }}/AAX/
        sudo cp -r "/Library/Application Support/Avid/Audio/Plug-Ins/." ${{ env.PLUGINS_FOLDER }}/AAX/

    - uses: actions/upload-artifact@v3
      with:
        name: plugins-folder-artifact
        path: ${{ env.PLUGINS_FOLDER }}

  # Validation
  validate:
    name: Validate on ${{ matrix.runs_on }}
    needs: [matrix_prep, build]
    if: contains(toJson(github.event.commits), '/no-validate') == false
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}

    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@master
      with:
        name: plugins-folder-artifact
        path: ${{ env.PLUGINS_FOLDER }}

    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up gcloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Prepare pluginval
      run: | 
        gsutil -m cp -r "${{ env.PLUGINVAL_URI }}" .
        unzip pluginval_macOS > /dev/null
        echo "pluginval.app/Contents/MacOS/pluginval"

    - name: Prepare aaxval
      run: |
        gsutil -m cp -r "${{ env.AAXVAL_URI }}" .
        unzip aaxval_mac > /dev/null
        mv aaxval_mac DigiShell
        ls -la

    - name: Generating VST, VST3 and AU Validation Script
      run: |
        echo '
          PLUGIN_PATH=$1

          echo "OS: ${OSTYPE}"
          echo "Validating ${PLUGIN_PATH}"

          pluginval.app/Contents/MacOS/pluginval \
            --strictness-level 5 \
            --validate-in-process \
            --validate $PLUGIN_PATH \
            --output-dir pluginval-logs \
            --timeout-ms 500000;
        ' > validate.sh

    - name: Generating AAX Validation Script
      run: |
        echo '
          PLUGIN_PATH=$1

          echo "
          load_dish aaxval
          runtest [info.productids, ${PLUGIN_PATH}]
          runtest [info.support.audiosuite, ${PLUGIN_PATH}]
          runtest [info.support.general, ${PLUGIN_PATH}]
          runtest [info.support.s6_feature, ${PLUGIN_PATH}]
          runtest [test.load_unload, ${PLUGIN_PATH}]
          runtest [test.page_table.automation_list, ${PLUGIN_PATH}]
          runtest [test.parameter_traversal.linear, ${PLUGIN_PATH}]
          runtest [test.parameter_traversal.random, ${PLUGIN_PATH}]
          runtest [test.parameter_traversal.random.fast, ${PLUGIN_PATH}]
          runtest [test.parameters, ${PLUGIN_PATH}]
          exit
          " | DigiShell/CommandLineTools/dsh
        ' > validate_aax.sh

    - name: Log Plug-Ins Folder
      run: find ${{ env.PLUGINS_FOLDER }}

    - name: Validate VST
      run: bash validate.sh "${{ env.PLUGINS_FOLDER }}/VST/${{ env.PLUGIN_NAME }}.vst"

    - name: Validate VST3
      run: bash validate.sh "${{ env.PLUGINS_FOLDER }}/VST3/${{ env.PLUGIN_NAME }}.vst3"

    - name: Validate AU
      run: |
        killall -9 AudioComponentRegistrar
        bash validate.sh "${{ env.PLUGINS_FOLDER }}/Components/${{ env.PLUGIN_NAME }}.component"

    - name: Validate AAX
      run: bash validate_aax.sh "${{ env.PLUGINS_FOLDER }}/AAX/${{ env.PLUGIN_NAME }}.aaxplugin"

  # Signing
  sign:
    name: Sign on ${{ matrix.runs_on }}
    needs: [matrix_prep, build, validate]
    if: contains(toJson(github.event.commits), '/no-sign') == false
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}

    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@master
      with:
        name: plugins-folder-artifact
        path: ${{ env.PLUGINS_FOLDER }}

    - name: Generating Signing Script
      run: |
        echo '
          PLUGIN_PATH=$1
          WRAPTOOL_PATH=$2
          ILOK_MAIL=$3
          ILOK_PASSWORD=$4
          APPLE_DEVELOPER=$5
          PACE_GUID=$6

          echo "OS: ${OSTYPE}"
          echo "Signing ${PLUGIN_PATH}"

          $WRAPTOOL_PATH sign \
            --verbose \
            --account $ILOK_MAIL \
            --password $ILOK_PASSWORD \
            --signid $APPLE_DEVELOPER \
            --wcguid $PACE_GUID \
            --in $PLUGIN_PATH \
            --out $PLUGIN_PATH \
            --allowsigningservice
          $WRAPTOOL_PATH verify --verbose --in $PLUGIN_PATH
          
        ' > sign_mac.sh

    - name: Sign Plug-Ins
      run: |
        echo "Sign AAX"
        echo "Sign AU"
        echo "Sign VST"
        echo "Sign VST3"
      # run: |
      #   bash sign_mac.sh ${{ env.PLUGINS_FOLDER }}/VST/${{ env.PLUGIN_NAME }}.aaxplugin $WRAPTOOL_PATH $ILOK_MAIL ${{ secrets.ILOK_PASSWORD }} ${{ secrets.APPLE_DEVELOPER }} ${{ secrets.PACE_GUID }}
      #   bash sign_mac.sh ${{ env.PLUGINS_FOLDER }}/VST/${{ env.PLUGIN_NAME }}.component $WRAPTOOL_PATH $ILOK_MAIL ${{ secrets.ILOK_PASSWORD }} ${{ secrets.APPLE_DEVELOPER }} ${{ secrets.PACE_GUID }}
      #   bash sign_mac.sh ${{ env.PLUGINS_FOLDER }}/VST/${{ env.PLUGIN_NAME }}.vst       $WRAPTOOL_PATH $ILOK_MAIL ${{ secrets.ILOK_PASSWORD }} ${{ secrets.APPLE_DEVELOPER }} ${{ secrets.PACE_GUID }}
      #   bash sign_mac.sh ${{ env.PLUGINS_FOLDER }}/VST/${{ env.PLUGIN_NAME }}.vst3      $WRAPTOOL_PATH $ILOK_MAIL ${{ secrets.ILOK_PASSWORD }} ${{ secrets.APPLE_DEVELOPER }} ${{ secrets.PACE_GUID }}

  # Packaging
  packaging:
    name: Package on ${{ matrix.runs_on }}
    needs: [matrix_prep, build, validate, sign]
    if: contains(toJson(github.event.commits), '/no-packaging') == false
    strategy:      
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ${{ matrix.runs_on }}
    outputs:
      PUBLIC_NAME: ${{ env.PLUGIN_NAME }}
      INSTALLER_PUBLIC_URL: ${{ env.PUBLIC_STORAGE_URL }}/${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.pkg

    steps:
    - uses: actions/checkout@master
    - uses: actions/download-artifact@master
      with:
        name: plugins-folder-artifact
        path: ${{ env.PLUGINS_FOLDER }}

    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up gcloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Download Packages Installer
      run: gsutil -m cp -r "${{ env.PACKAGES_INSTALLER_URI }}" .

    - name: Install Packages
      run: sudo installer -pkg Packages.pkg -target /

    - name: Copy Plug-ins to Repository
      run: |
        sudo mkdir plugins
        sudo cp -r "${{ env.PLUGINS_FOLDER }}/AAX/${{ env.PLUGIN_NAME }}.aaxplugin" plugins
        sudo cp -r "${{ env.PLUGINS_FOLDER }}/VST3/${{ env.PLUGIN_NAME }}.vst3" plugins
        sudo cp -r "${{ env.PLUGINS_FOLDER }}/VST/${{ env.PLUGIN_NAME }}.vst" plugins
        sudo cp -r "${{ env.PLUGINS_FOLDER }}/Components/${{ env.PLUGIN_NAME }}.component" plugins

    - name: Build MacOS Installer
      run: packagesbuild ${{ env.INSTALLER_PLUGINS_FOLDER }}/${{ env.PLUGIN_NAME }}.pkgproj

    - name: Sign MacOS Installer
      run: echo "Sign installer"

    - name: Notarize MacOS Installer
      run: echo "Notarize installer"

    - name: Upload to GCP Bucket
      run: gcloud storage cp ${{ env.INSTALLER_PLUGINS_FOLDER }}/build/${{ env.PLUGIN_NAME }}.pkg "{{ INSTALLER_URI }}"

    - name: Make file public
      run: gsutil acl ch -u AllUsers:R ${{ env.INSTALLER_URI }}

  # Notification
  notification:
    name: Notify on ${{ matrix.runs_on }}
    needs: [matrix_prep, build, validate, sign, packaging]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    env:
      PLUGIN_NAME: ${{ needs.packaging.outputs.PUBLIC_NAME }}
      URL: ${{ needs.packaging.outputs.INSTALLER_PUBLIC_URL }}

    steps:
    - name: Push Notification on Discord
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_HOOK_ID }}
      uses: Ilshidur/action-discord@master
      with:
        args: 'The plug-in {{ PLUGIN_NAME }} download link is: {{ URL }}'