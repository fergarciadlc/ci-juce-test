name: Mac Pipeline

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:

  # matrix_prep:
  #   if: contains(toJson(github.event.commits), '/no-ci') == false && contains(toJson(github.event.commits), '/no-mac') == false
  #   runs-on: ubuntu-latest
  #   outputs:
  #     matrix: ${{ steps.set-matrix.outputs.matrix }}
  #   steps:
  #     - uses: actions/checkout@v2      
  #     - id: set-matrix
  #       uses: JoshuaTheMiller/conditional-build-matrix@main        
  #       with:
  #         inputFile: '.github/workflows/mac_matrix.json'
  #         filter: '[?runOnBranch==`${{ github.ref }}` || runOnBranch==`main`]'

  # unit-test:
  #   name: Unit Testing on ${{ matrix.runs_on }}
  #   needs: matrix_prep
  #   strategy:      
  #     matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
  #   runs-on: ${{ matrix.runs_on }}

  #   steps:
  #   - name: Run Unit Testing on ${{ matrix.runs_on }}
  #     if: runner.os == 'MacOS'
  #     run: |
  #       if ( ${{ contains(toJson(github.event.commits), '/no-ut') }} ); then
  #         echo "/no-ut in commit message, skipping unit tests"
  #       else
  #         echo "Running uts"
  #       fi

  # build:
  #   name: Build on ${{ matrix.runs_on }}
  #   needs: [matrix_prep, unit-test]
  #   if: contains(toJson(github.event.commits), '/no-build') == false
  #   strategy:      
  #     matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
  #   runs-on: ${{ matrix.runs_on }}
  #   outputs:
  #     GLOBAL_VAR: global_var
  #     PLUGIN_NAME: ci-cmake-juce
  #     PLUGINS_FOLDER: /Users/runner/Library/Audio/Plug-Ins/

  #   env:
  #     GLOBAL_VAR: global_var
  #     PLUGIN_NAME: ci-cmake-juce
  #     PLUGINS_FOLDER: /Users/runner/Library/Audio/Plug-Ins/

  #   steps:
  #   - name: Get latest CMake
  #     uses: lukka/get-cmake@latest

  #   - name: Checkout code
  #     uses: actions/checkout@v2
  #     with:
  #       submodules: recursive

  #   - name: Configure Cmake
  #     run: cmake -Bbuild

  #   - name: Build for MacOS
  #     if: runner.os == 'MacOS'
  #     run: sudo cmake --build build --config Release

  #   - name: Copy AAX to Plugins Folder
  #     if: runner.os == 'MacOS'
  #     run: |
  #       sudo mkdir /Users/runner/Library/Audio/Plug-Ins/AAX/
  #       sudo cp -r "/Library/Application Support/Avid/Audio/Plug-Ins/." /Users/runner/Library/Audio/Plug-Ins/AAX/

  #   - uses: actions/upload-artifact@v3
  #     with:
  #       name: plugins-folder-artifact
  #       path: /Users/runner/Library/Audio/Plug-Ins/

  # validate:
  #   name: Validate on ${{ matrix.runs_on }}
  #   needs: [matrix_prep, build]
  #   if: contains(toJson(github.event.commits), '/no-validate') == false
  #   strategy:      
  #     matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
  #   runs-on: ${{ matrix.runs_on }}
  #   env:
  #     PLUGIN_NAME: ${{ needs.build.outputs.PLUGIN_NAME }}
  #     PLUGINS_FOLDER: ${{ needs.build.outputs.PLUGINS_FOLDER }}
  #     PLUGINVAL_MAC_URL: ${{ secrets.PLUGINVAL_MAC_URL }}
  #     AAXVAL_MAC_URL: ${{ secrets.AAXVAL_MAC_URL }}

  #   steps:
  #   - uses: actions/checkout@master
  #   - uses: actions/download-artifact@master
  #     with:
  #       name: plugins-folder-artifact
  #       path: /Users/runner/Library/Audio/Plug-Ins/

  #   - id: 'auth'
  #     uses: 'google-github-actions/auth@v1'
  #     with:
  #       credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

  #   - name: Set up gcloud SDK
  #     uses: 'google-github-actions/setup-gcloud@v1'

  #   - name: Prepare pluginval
  #     run: | 
  #       gsutil -m cp -r "gs://webearcandy.appspot.com/ci-utils/validators/pluginval_macOS.zip" .
  #       unzip pluginval_macOS > /dev/null
  #       echo "pluginval.app/Contents/MacOS/pluginval"

  #   - name: Prepare aaxval
  #     run: |
  #       gsutil -m cp -r "gs://webearcandy.appspot.com/ci-utils/validators/aaxval_mac.zip" .
  #       unzip aaxval_mac > /dev/null
  #       mv aaxval_mac DigiShell
  #       ls -la

  #   - name: Generating pluginval Validation Script
  #     run: |
  #       echo '
  #         PLUGIN_PATH=$1

  #         echo "OS: ${OSTYPE}"
  #         echo "Validating ${PLUGIN_PATH}"

  #         pluginval.app/Contents/MacOS/pluginval --strictness-level 5 --validate-in-process --validate $PLUGIN_PATH --output-dir pluginval-logs --timeout-ms 500000;
  #       ' > validate.sh

  #   - name: Generating aaxval Validation Script
  #     run: |
  #       echo '
  #         PLUGIN_PATH=$1

  #         echo "
  #         load_dish aaxval
  #         runtest [info.productids, ${PLUGIN_PATH}]
  #         runtest [info.support.audiosuite, ${PLUGIN_PATH}]
  #         runtest [info.support.general, ${PLUGIN_PATH}]
  #         runtest [info.support.s6_feature, ${PLUGIN_PATH}]
  #         runtest [test.load_unload, ${PLUGIN_PATH}]
  #         runtest [test.page_table.automation_list, ${PLUGIN_PATH}]
  #         runtest [test.parameter_traversal.linear, ${PLUGIN_PATH}]
  #         runtest [test.parameter_traversal.random, ${PLUGIN_PATH}]
  #         runtest [test.parameter_traversal.random.fast, ${PLUGIN_PATH}]
  #         runtest [test.parameters, ${PLUGIN_PATH}]
  #         exit
  #         " | DigiShell/CommandLineTools/dsh
  #       ' > validate_aax.sh

  #   - name: Killall Component Registrar
  #     run: killall -9 AudioComponentRegistrar

  #   - name: Log Plug-Ins Folder
  #     run: find $PLUGINS_FOLDER

  #   - name: Validate VST
  #     run: bash validate.sh $PLUGINS_FOLDER/VST/$PLUGIN_NAME.vst

  #   - name: Validate VST3
  #     run: bash validate.sh $PLUGINS_FOLDER/VST3/$PLUGIN_NAME.vst3

  #   - name: Validate AU
  #     run: bash validate.sh $PLUGINS_FOLDER/Components/$PLUGIN_NAME.component

  #   - name: Validate AAX
  #     run: bash validate_aax.sh "$PLUGINS_FOLDER/AAX/$PLUGIN_NAME.aaxplugin"

  # sign:
  #   name: Signing on ${{ matrix.runs_on }}
  #   needs: [matrix_prep, build, validate]
  #   if: contains(toJson(github.event.commits), '/no-sign') == false
  #   strategy:      
  #     matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
  #   runs-on: ${{ matrix.runs_on }}
  #   env:
  #     PLUGIN_NAME: ${{ needs.build.outputs.PLUGIN_NAME }}
  #     PLUGINS_FOLDER: ${{ needs.build.outputs.PLUGINS_FOLDER }}

  #   steps:
  #   - uses: actions/checkout@master
  #   - uses: actions/download-artifact@master
  #     with:
  #       name: plugins-folder-artifact
  #       path: /Users/runner/Library/Audio/Plug-Ins/

  #   - name: Generating Signing Script
  #     run: |
  #       echo '
  #         PLUGIN_PATH=$1
  #         WRAPTOOL_PATH=$2
  #         ILOK_MAIL=$3
  #         ILOK_PASSWORD=$4
  #         APPLE_DEVELOPER=$5
  #         PACE_GUID=$6

  #         echo "OS: ${OSTYPE}"
  #         echo "Signing ${PLUGIN_PATH}"

  #         $WRAPTOOL_PATH sign --verbose --account $ILOK_MAIL --password $ILOK_PASSWORD --signid $APPLE_DEVELOPER --wcguid $PACE_GUID --in $PLUGIN_PATH --out $PLUGIN_PATH --allowsigningservice

  #         $WRAPTOOL_PATH verify --verbose --in $PLUGIN_PATH
          
  #       ' > sign_mac.sh
  
  #   - name: Sign AAX
  #     run: echo "Sign AAX"
  #     #run: bash sign_mac.sh $PLUGINS_FOLDER/VST/$PLUGIN_NAME.aaxplugin $WRAPTOOL_PATH $ILOK_MAIL ${{ secrets.ILOK_PASSWORD }} ${{ secrets.APPLE_DEVELOPER }} ${{ secrets.PACE_GUID }}

  #   - name: Sign AU
  #     run: echo "Sign AU"
  #     #run: bash sign_mac.sh $PLUGINS_FOLDER/VST/$PLUGIN_NAME.component $WRAPTOOL_PATH $ILOK_MAIL ${{ secrets.ILOK_PASSWORD }} ${{ secrets.APPLE_DEVELOPER }} ${{ secrets.PACE_GUID }}

  #   - name: Sign VST
  #     run: echo "Sign VST"
  #     #run: bash sign_mac.sh $PLUGINS_FOLDER/VST/$PLUGIN_NAME.vst $WRAPTOOL_PATH $ILOK_MAIL ${{ secrets.ILOK_PASSWORD }} ${{ secrets.APPLE_DEVELOPER }} ${{ secrets.PACE_GUID }}

  #   - name: Sign VST3
  #     run: echo "Sign VST3"
  #     #run: bash sign_mac.sh $PLUGINS_FOLDER/VST/$PLUGIN_NAME.vst3 $WRAPTOOL_PATH $ILOK_MAIL ${{ secrets.ILOK_PASSWORD }} ${{ secrets.APPLE_DEVELOPER }} ${{ secrets.PACE_GUID }}

  # packaging:
  #   name: Packaging on ${{ matrix.runs_on }}
  #   needs: [matrix_prep, build, sign]
  #   if: contains(toJson(github.event.commits), '/no-packaging') == false
  #   strategy:      
  #     matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
  #   runs-on: ${{ matrix.runs_on }}
  #   outputs:
  #    installer-url: ${{ steps.download-url.outputs.matrix }}
  #   env:
  #    PLUGIN_NAME: ${{ needs.build.outputs.PLUGIN_NAME }}
  #    PLUGINS_FOLDER: ${{ needs.build.outputs.PLUGINS_FOLDER }}

  #   steps:
    # - uses: actions/checkout@master
    # - uses: actions/download-artifact@master
    #   with:
    #     name: plugins-folder-artifact
    #     path: /Users/runner/Library/Audio/Plug-Ins/
  
    # - name: Package Plug-Ins
    #   run: echo "Packaging plugins"

    # - id: 'auth'
    #   uses: 'google-github-actions/auth@v1'
    #   with:
    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    # - name: Set up gcloud SDK
    #   uses: 'google-github-actions/setup-gcloud@v1'

    # - name: Download Packages Installer
    #   run: gsutil -m cp -r "gs://webearcandy.appspot.com/ci-utils/Packages.pkg" .

    # - name: Install Packages
    #   run: sudo installer -pkg Packages.pkg -target /

    # - name: Copy Plug-ins to Repository
    #   if: runner.os == 'MacOS'
    #   run: |
    #     sudo mkdir plugins
    #     sudo cp -r "$PLUGINS_FOLDER/AAX/$PLUGIN_NAME.aaxplugin" plugins
    #     sudo cp -r "$PLUGINS_FOLDER/VST3/$PLUGIN_NAME.vst3" plugins
    #     sudo cp -r "$PLUGINS_FOLDER/VST/$PLUGIN_NAME.vst" plugins
    #     sudo cp -r "$PLUGINS_FOLDER/Components/$PLUGIN_NAME.component" plugins

    # - name: Build MacOS Installer
    #   run: packagesbuild installers/mac/${PLUGIN_NAME}.pkgproj

    # - name: Sign MacOS Installer
    #   run: echo "Sign installer"

    # - name: Notarize MacOS Installer
    #   run: echo "Notarizw installer"

    # - name: Upload to gcloud Bucket
    #   run: gcloud storage cp installers/mac/build/$PLUGIN_NAME.pkg "gs://webearcandy.appspot.com/$PLUGIN_NAME/$PLUGIN_NAME.pkg"

    # - name: Install pyopenssl
    #   run: pip install pyopenssl

    # - name: Get download URL
    #   #run: gsutil signurl -d 10m ${{ secrets.GCP_CREDENTIALS }} gs://webearcandy.appspot.com/$PLUGIN_NAME/$PLUGIN_NAME.pkg
    #   run: gsutil signurl -d 10m ${{ secrets.GCP_CREDENTIALS }} gs://webearcandy.appspot.com/ci-cmake-juce/ci-cmake-juce.pkg

    # Save URL for next job

  gcloud:
    runs-on: macos-12
    steps:
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up gcloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Install pyopenssl
      run: pip install pyopenssl

    - name: Get download URL
      run: gsutil signurl -d 10m ${{ secrets.GCP_CREDENTIALS }} gs://webearcandy.appspot.com/ci-cmake-juce/ci-cmake-juce.pkg

  notification:
    name: Notify deployment
    runs-on: ubuntu-latest
    needs: packaging

    steps:
    - name: Discord Webhook Action
      uses: tsickert/discord-webhook@v5.3.0
      with:
        webhook-url: ${{ secrets.DISCORD_HOOK_ID }}
        content: "MacOS Plugin Installer Deployed: "
        #content: "MacOS Plugin Installer Deployed: ${{needs.packaging.outputs.installer-url}}"